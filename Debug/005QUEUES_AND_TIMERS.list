
005QUEUES_AND_TIMERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009200  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b8  080097b8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c0  080097c0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080097c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f58  20000094  0800985c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012fec  0800985c  00022fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1a1  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be5  00000000  00000000  0003b265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003ee50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  000404f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a623  00000000  00000000  00041a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c25b  00000000  00000000  0006c02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101eec  00000000  00000000  00088286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018a172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000617c  00000000  00000000  0018a1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009378 	.word	0x08009378

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08009378 	.word	0x08009378

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <led_effect_stop>:


int flag_led = 0;

void led_effect_stop(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	for(int i = 0 ; i<4 ; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e00e      	b.n	80005ce <led_effect_stop+0x2a>
	{
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <led_effect_stop+0x40>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	2103      	movs	r1, #3
 80005c4:	f007 faec 	bl	8007ba0 <xTimerGenericCommand>
	for(int i = 0 ; i<4 ; i++)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dded      	ble.n	80005b0 <led_effect_stop+0xc>
	}
	flag_led = 0;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <led_effect_stop+0x44>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000017c 	.word	0x2000017c
 80005e8:	200000b0 	.word	0x200000b0

080005ec <led_effect>:

void led_effect(int n)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	6078      	str	r0, [r7, #4]
	/*The next line stop the last led effect*/
	led_effect_stop();
 80005f4:	f7ff ffd6 	bl	80005a4 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <led_effect+0x34>)
 80005fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000602:	f006 fbcf 	bl	8006da4 <xTaskGetTickCount>
 8000606:	4602      	mov	r2, r0
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	2101      	movs	r1, #1
 8000612:	4620      	mov	r0, r4
 8000614:	f007 fac4 	bl	8007ba0 <xTimerGenericCommand>
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	2000017c 	.word	0x2000017c

08000624 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f001 fe19 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <turn_off_all_leds+0x38>)
 800063e:	f001 fe13 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2110      	movs	r1, #16
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <turn_off_all_leds+0x38>)
 8000648:	f001 fe0e 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <turn_off_all_leds+0x38>)
 8000652:	f001 fe09 	bl	8002268 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	48000400 	.word	0x48000400

08000660 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f001 fdfb 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000678:	4807      	ldr	r0, [pc, #28]	; (8000698 <turn_on_all_leds+0x38>)
 800067a:	f001 fdf5 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2110      	movs	r1, #16
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <turn_on_all_leds+0x38>)
 8000684:	f001 fdf0 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2120      	movs	r1, #32
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <turn_on_all_leds+0x38>)
 800068e:	f001 fdeb 	bl	8002268 <HAL_GPIO_WritePin>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	48000400 	.word	0x48000400

0800069c <LED_effect1>:

void LED_effect1(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <LED_effect1+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f083 0301 	eor.w	r3, r3, #1
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <LED_effect1+0x28>)
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <LED_effect1+0x28>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d002      	beq.n	80006ba <LED_effect1+0x1e>
 80006b4:	f7ff ffb6 	bl	8000624 <turn_off_all_leds>
}
 80006b8:	e001      	b.n	80006be <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80006ba:	f7ff ffd1 	bl	8000660 <turn_on_all_leds>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000

080006c8 <turn_off_two_leds>:

void turn_off_two_leds(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f001 fdc7 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <turn_off_two_leds+0x38>)
 80006e2:	f001 fdc1 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2110      	movs	r1, #16
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <turn_off_two_leds+0x38>)
 80006ec:	f001 fdbc 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2120      	movs	r1, #32
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <turn_off_two_leds+0x38>)
 80006f6:	f001 fdb7 	bl	8002268 <HAL_GPIO_WritePin>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	48000400 	.word	0x48000400

08000704 <turn_on_two_leds>:

void turn_on_two_leds(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f001 fda9 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <turn_on_two_leds+0x38>)
 800071e:	f001 fda3 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2110      	movs	r1, #16
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <turn_on_two_leds+0x38>)
 8000728:	f001 fd9e 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2120      	movs	r1, #32
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <turn_on_two_leds+0x38>)
 8000732:	f001 fd99 	bl	8002268 <HAL_GPIO_WritePin>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	48000400 	.word	0x48000400

08000740 <LED_effect2>:

void LED_effect2(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_two_leds() : turn_on_two_leds();
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <LED_effect2+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <LED_effect2+0x28>)
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <LED_effect2+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <LED_effect2+0x1e>
 8000758:	f7ff ffb6 	bl	80006c8 <turn_off_two_leds>
}
 800075c:	e001      	b.n	8000762 <LED_effect2+0x22>
	(flag ^= 1) ? turn_off_two_leds() : turn_on_two_leds();
 800075e:	f7ff ffd1 	bl	8000704 <turn_on_two_leds>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000004 	.word	0x20000004

0800076c <turn_off_up_leds>:


void turn_off_up_leds(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    if(flag_led == 1)
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <turn_off_up_leds+0x84>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d11b      	bne.n	80007b0 <turn_off_up_leds+0x44>
    {
        /*"led 2 on */
    	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f001 fd71 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	4819      	ldr	r0, [pc, #100]	; (80007f4 <turn_off_up_leds+0x88>)
 800078e:	f001 fd6b 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2110      	movs	r1, #16
 8000796:	4817      	ldr	r0, [pc, #92]	; (80007f4 <turn_off_up_leds+0x88>)
 8000798:	f001 fd66 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	4814      	ldr	r0, [pc, #80]	; (80007f4 <turn_off_up_leds+0x88>)
 80007a2:	f001 fd61 	bl	8002268 <HAL_GPIO_WritePin>
        flag_led++;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <turn_off_up_leds+0x84>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <turn_off_up_leds+0x84>)
 80007ae:	6013      	str	r3, [r2, #0]
    }
    if(flag_led == 3)
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <turn_off_up_leds+0x84>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d119      	bne.n	80007ec <turn_off_up_leds+0x80>
    {
        /*"led 4 on */
    	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f001 fd51 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <turn_off_up_leds+0x88>)
 80007ce:	f001 fd4b 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2110      	movs	r1, #16
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <turn_off_up_leds+0x88>)
 80007d8:	f001 fd46 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <turn_off_up_leds+0x88>)
 80007e2:	f001 fd41 	bl	8002268 <HAL_GPIO_WritePin>
        flag_led=0;
 80007e6:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <turn_off_up_leds+0x84>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
    }
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000b0 	.word	0x200000b0
 80007f4:	48000400 	.word	0x48000400

080007f8 <turn_on_up_leds>:

void turn_on_up_leds(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
    if(flag_led == 0)
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <turn_on_up_leds+0x88>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d11b      	bne.n	800083c <turn_on_up_leds+0x44>
    {
        /*"led 1 on */
    	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f001 fd2b 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000818:	481a      	ldr	r0, [pc, #104]	; (8000884 <turn_on_up_leds+0x8c>)
 800081a:	f001 fd25 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2110      	movs	r1, #16
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <turn_on_up_leds+0x8c>)
 8000824:	f001 fd20 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2120      	movs	r1, #32
 800082c:	4815      	ldr	r0, [pc, #84]	; (8000884 <turn_on_up_leds+0x8c>)
 800082e:	f001 fd1b 	bl	8002268 <HAL_GPIO_WritePin>
        flag_led++;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <turn_on_up_leds+0x88>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a11      	ldr	r2, [pc, #68]	; (8000880 <turn_on_up_leds+0x88>)
 800083a:	6013      	str	r3, [r2, #0]
    }
    if(flag_led == 2)
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <turn_on_up_leds+0x88>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b02      	cmp	r3, #2
 8000842:	d11b      	bne.n	800087c <turn_on_up_leds+0x84>
    {
        /*"led 3 on */
    	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f001 fd0b 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000858:	480a      	ldr	r0, [pc, #40]	; (8000884 <turn_on_up_leds+0x8c>)
 800085a:	f001 fd05 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2110      	movs	r1, #16
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <turn_on_up_leds+0x8c>)
 8000864:	f001 fd00 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2120      	movs	r1, #32
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <turn_on_up_leds+0x8c>)
 800086e:	f001 fcfb 	bl	8002268 <HAL_GPIO_WritePin>
        flag_led++;
 8000872:	4b03      	ldr	r3, [pc, #12]	; (8000880 <turn_on_up_leds+0x88>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	4a01      	ldr	r2, [pc, #4]	; (8000880 <turn_on_up_leds+0x88>)
 800087a:	6013      	str	r3, [r2, #0]
    }
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000b0 	.word	0x200000b0
 8000884:	48000400 	.word	0x48000400

08000888 <LED_effect3>:

void LED_effect3(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_up_leds() : turn_on_up_leds();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <LED_effect3+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f083 0301 	eor.w	r3, r3, #1
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <LED_effect3+0x28>)
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <LED_effect3+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <LED_effect3+0x1e>
 80008a0:	f7ff ff64 	bl	800076c <turn_off_up_leds>
}
 80008a4:	e001      	b.n	80008aa <LED_effect3+0x22>
	(flag ^= 1) ? turn_off_up_leds() : turn_on_up_leds();
 80008a6:	f7ff ffa7 	bl	80007f8 <turn_on_up_leds>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008

080008b4 <turn_off_down_leds>:


void turn_off_down_leds(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    if(flag_led == 1)
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <turn_off_down_leds+0x84>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d11b      	bne.n	80008f8 <turn_off_down_leds+0x44>
    {
        /*"led 3 on */
    	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f001 fccd 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d4:	4819      	ldr	r0, [pc, #100]	; (800093c <turn_off_down_leds+0x88>)
 80008d6:	f001 fcc7 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2110      	movs	r1, #16
 80008de:	4817      	ldr	r0, [pc, #92]	; (800093c <turn_off_down_leds+0x88>)
 80008e0:	f001 fcc2 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2120      	movs	r1, #32
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <turn_off_down_leds+0x88>)
 80008ea:	f001 fcbd 	bl	8002268 <HAL_GPIO_WritePin>
        flag_led++;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <turn_off_down_leds+0x84>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a10      	ldr	r2, [pc, #64]	; (8000938 <turn_off_down_leds+0x84>)
 80008f6:	6013      	str	r3, [r2, #0]
    }
    if(flag_led == 3)
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <turn_off_down_leds+0x84>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d119      	bne.n	8000934 <turn_off_down_leds+0x80>
    {
        /*"led 1 on */
    	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f001 fcad 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <turn_off_down_leds+0x88>)
 8000916:	f001 fca7 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2110      	movs	r1, #16
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <turn_off_down_leds+0x88>)
 8000920:	f001 fca2 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2120      	movs	r1, #32
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <turn_off_down_leds+0x88>)
 800092a:	f001 fc9d 	bl	8002268 <HAL_GPIO_WritePin>
        flag_led=0;
 800092e:	4b02      	ldr	r3, [pc, #8]	; (8000938 <turn_off_down_leds+0x84>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
    }
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000b0 	.word	0x200000b0
 800093c:	48000400 	.word	0x48000400

08000940 <turn_on_down_leds>:

void turn_on_down_leds(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    if(flag_led == 0)
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <turn_on_down_leds+0x88>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d11b      	bne.n	8000984 <turn_on_down_leds+0x44>
    {
        /*"led 4 on */
    	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f001 fc87 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000960:	481a      	ldr	r0, [pc, #104]	; (80009cc <turn_on_down_leds+0x8c>)
 8000962:	f001 fc81 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	4818      	ldr	r0, [pc, #96]	; (80009cc <turn_on_down_leds+0x8c>)
 800096c:	f001 fc7c 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2120      	movs	r1, #32
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <turn_on_down_leds+0x8c>)
 8000976:	f001 fc77 	bl	8002268 <HAL_GPIO_WritePin>
        flag_led++;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <turn_on_down_leds+0x88>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <turn_on_down_leds+0x88>)
 8000982:	6013      	str	r3, [r2, #0]
    }
    if(flag_led == 2)
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <turn_on_down_leds+0x88>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d11b      	bne.n	80009c4 <turn_on_down_leds+0x84>
    {
        /*"led 2 on */
    	HAL_GPIO_WritePin(GPIOA, Led_1_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000996:	f001 fc67 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_2_Pin, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a0:	480a      	ldr	r0, [pc, #40]	; (80009cc <turn_on_down_leds+0x8c>)
 80009a2:	f001 fc61 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_3_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2110      	movs	r1, #16
 80009aa:	4808      	ldr	r0, [pc, #32]	; (80009cc <turn_on_down_leds+0x8c>)
 80009ac:	f001 fc5c 	bl	8002268 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, Led_4_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <turn_on_down_leds+0x8c>)
 80009b6:	f001 fc57 	bl	8002268 <HAL_GPIO_WritePin>
        flag_led++;
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <turn_on_down_leds+0x88>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	4a01      	ldr	r2, [pc, #4]	; (80009c8 <turn_on_down_leds+0x88>)
 80009c2:	6013      	str	r3, [r2, #0]
    }
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000b0 	.word	0x200000b0
 80009cc:	48000400 	.word	0x48000400

080009d0 <LED_effect4>:

void LED_effect4(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_down_leds() : turn_on_down_leds();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <LED_effect4+0x28>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f083 0301 	eor.w	r3, r3, #1
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <LED_effect4+0x28>)
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <LED_effect4+0x28>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d002      	beq.n	80009ee <LED_effect4+0x1e>
 80009e8:	f7ff ff64 	bl	80008b4 <turn_off_down_leds>
}
 80009ec:	e001      	b.n	80009f2 <LED_effect4+0x22>
	(flag ^= 1) ? turn_off_down_leds() : turn_on_down_leds();
 80009ee:	f7ff ffa7 	bl	8000940 <turn_on_down_leds>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000000c 	.word	0x2000000c

080009fc <Menu_task>:
int extract_command(command_t *cmd);

const char *msg_inv = "//// INVALID OPTION ////\n";

void Menu_task(void* parameters)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	6078      	str	r0, [r7, #4]
uint32_t cmd_addr;
command_t *cmd;
int option;
   const char* msg_menu = "==================\n"
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <Menu_task+0xd0>)
 8000a06:	60bb      	str	r3, [r7, #8]
           	   	   	   	   "Exit 	---> 2\n"
  	   	   	   	   	   	   "Enter your choice here: \n";
	while(1)
	{
		/*Print menu*/
		xQueueSend(Queue_print, &msg_menu, portMAX_DELAY);
 8000a08:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <Menu_task+0xd4>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	f107 0108 	add.w	r1, r7, #8
 8000a10:	2300      	movs	r3, #0
 8000a12:	f04f 32ff 	mov.w	r2, #4294967295
 8000a16:	f005 fab9 	bl	8005f8c <xQueueGenericSend>
		/*waits for menu commands*/
		xTaskNotifyWait(0,0,&cmd_addr, portMAX_DELAY);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a22:	9200      	str	r2, [sp, #0]
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f006 fd63 	bl	80074f4 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	7a9b      	ldrb	r3, [r3, #10]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d133      	bne.n	8000aa2 <Menu_task+0xa6>
		{
			option = cmd->payload[0] - 48; //converts from ASCII to decimal value
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	3b30      	subs	r3, #48	; 0x30
 8000a40:	613b      	str	r3, [r7, #16]
			switch(option)
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d035      	beq.n	8000ab4 <Menu_task+0xb8>
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	dc20      	bgt.n	8000a90 <Menu_task+0x94>
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <Menu_task+0x60>
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d00d      	beq.n	8000a76 <Menu_task+0x7a>
 8000a5a:	e019      	b.n	8000a90 <Menu_task+0x94>
			{
			case 0:
				curr_state = sLedEffect;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <Menu_task+0xd8>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
				xTaskNotify(LED_task_handle,0,eNoAction);
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <Menu_task+0xdc>)
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f006 fdc0 	bl	80075f4 <xTaskGenericNotify>
				break;
 8000a74:	e01f      	b.n	8000ab6 <Menu_task+0xba>
			case 1:
				curr_state = sRtcMenu;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <Menu_task+0xd8>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	701a      	strb	r2, [r3, #0]
				xTaskNotify(RTC_task_handle,0,eNoAction);
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <Menu_task+0xe0>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	2300      	movs	r3, #0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2300      	movs	r3, #0
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	f006 fdb3 	bl	80075f4 <xTaskGenericNotify>
				break;
 8000a8e:	e012      	b.n	8000ab6 <Menu_task+0xba>
			case 2:
				/*IMPLEMENT EXIT*/
				break;
			default:
				xQueueSend(Queue_print, &msg_inv, portMAX_DELAY);
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <Menu_task+0xd4>)
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	2300      	movs	r3, #0
 8000a96:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9a:	4911      	ldr	r1, [pc, #68]	; (8000ae0 <Menu_task+0xe4>)
 8000a9c:	f005 fa76 	bl	8005f8c <xQueueGenericSend>
				continue;
 8000aa0:	e012      	b.n	8000ac8 <Menu_task+0xcc>
			}
		}
		else
		{
			/*Print invalid message*/
			xQueueSend(Queue_print, &msg_inv, portMAX_DELAY);
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <Menu_task+0xd4>)
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <Menu_task+0xe4>)
 8000aae:	f005 fa6d 	bl	8005f8c <xQueueGenericSend>
 8000ab2:	e000      	b.n	8000ab6 <Menu_task+0xba>
				break;
 8000ab4:	bf00      	nop
		}
		/*waits to run again when some other task notifies*/
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2300      	movs	r3, #0
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f006 fd16 	bl	80074f4 <xTaskGenericNotifyWait>
		xQueueSend(Queue_print, &msg_menu, portMAX_DELAY);
 8000ac8:	e79e      	b.n	8000a08 <Menu_task+0xc>
 8000aca:	bf00      	nop
 8000acc:	080093ac 	.word	0x080093ac
 8000ad0:	20000178 	.word	0x20000178
 8000ad4:	2000018d 	.word	0x2000018d
 8000ad8:	20000164 	.word	0x20000164
 8000adc:	20000168 	.word	0x20000168
 8000ae0:	20000010 	.word	0x20000010

08000ae4 <LED_task>:
	}
}
void LED_task(void* parameters)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;

	   const char* msg_led =   "======================\n"
 8000aec:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <LED_task+0x104>)
 8000aee:	60fb      	str	r3, [r7, #12]
			                   "none (e1,e2,e3,e4)\n"
	  	   	   	   	   	   	   "Enter your choice here: \n";
	while(1)
	{
		/*waits for notification, this notification will be sent by the Menu Task*/
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2300      	movs	r3, #0
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	f006 fcf9 	bl	80074f4 <xTaskGenericNotifyWait>
		/*Print menu*/
		xQueueSend(Queue_print, &msg_led, portMAX_DELAY);
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <LED_task+0x108>)
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	f107 010c 	add.w	r1, r7, #12
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	f005 fa3c 	bl	8005f8c <xQueueGenericSend>
		/*waits for LED command*/
		xTaskNotifyWait(0,0,&cmd_addr, portMAX_DELAY);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	9200      	str	r2, [sp, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f006 fce6 	bl	80074f4 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	7a9b      	ldrb	r3, [r3, #10]
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d843      	bhi.n	8000bbc <LED_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	492e      	ldr	r1, [pc, #184]	; (8000bf0 <LED_task+0x10c>)
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fb49 	bl	80001d0 <strcmp>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <LED_task+0x66>
				led_effect_stop();
 8000b44:	f7ff fd2e 	bl	80005a4 <led_effect_stop>
 8000b48:	e040      	b.n	8000bcc <LED_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	4929      	ldr	r1, [pc, #164]	; (8000bf4 <LED_task+0x110>)
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fb3e 	bl	80001d0 <strcmp>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <LED_task+0x7e>
				led_effect(1);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fd46 	bl	80005ec <led_effect>
 8000b60:	e034      	b.n	8000bcc <LED_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	4924      	ldr	r1, [pc, #144]	; (8000bf8 <LED_task+0x114>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fb32 	bl	80001d0 <strcmp>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d103      	bne.n	8000b7a <LED_task+0x96>
				led_effect(2);
 8000b72:	2002      	movs	r0, #2
 8000b74:	f7ff fd3a 	bl	80005ec <led_effect>
 8000b78:	e028      	b.n	8000bcc <LED_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	491f      	ldr	r1, [pc, #124]	; (8000bfc <LED_task+0x118>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb26 	bl	80001d0 <strcmp>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <LED_task+0xae>
				led_effect(3);
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f7ff fd2e 	bl	80005ec <led_effect>
 8000b90:	e01c      	b.n	8000bcc <LED_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	491a      	ldr	r1, [pc, #104]	; (8000c00 <LED_task+0x11c>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fb1a 	bl	80001d0 <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d103      	bne.n	8000baa <LED_task+0xc6>
				led_effect(4);
 8000ba2:	2004      	movs	r0, #4
 8000ba4:	f7ff fd22 	bl	80005ec <led_effect>
 8000ba8:	e010      	b.n	8000bcc <LED_task+0xe8>
			else
				xQueueSend(Queue_print, &msg_inv, portMAX_DELAY);
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <LED_task+0x108>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	4913      	ldr	r1, [pc, #76]	; (8000c04 <LED_task+0x120>)
 8000bb6:	f005 f9e9 	bl	8005f8c <xQueueGenericSend>
 8000bba:	e007      	b.n	8000bcc <LED_task+0xe8>
		}
		else
		{
			xQueueSend(Queue_print, &msg_inv, portMAX_DELAY);
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <LED_task+0x108>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc6:	490f      	ldr	r1, [pc, #60]	; (8000c04 <LED_task+0x120>)
 8000bc8:	f005 f9e0 	bl	8005f8c <xQueueGenericSend>
		}

		/*update state variable*/
		curr_state = sMainMenu;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <LED_task+0x124>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]

		/*Notify menu task*/
		xTaskNotify(Menu_task_handle,0,eNoAction);
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <LED_task+0x128>)
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	f006 fd08 	bl	80075f4 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8000be4:	e784      	b.n	8000af0 <LED_task+0xc>
 8000be6:	bf00      	nop
 8000be8:	08009438 	.word	0x08009438
 8000bec:	20000178 	.word	0x20000178
 8000bf0:	080094ac 	.word	0x080094ac
 8000bf4:	080094b4 	.word	0x080094b4
 8000bf8:	080094b8 	.word	0x080094b8
 8000bfc:	080094bc 	.word	0x080094bc
 8000c00:	080094c0 	.word	0x080094c0
 8000c04:	20000010 	.word	0x20000010
 8000c08:	2000018d 	.word	0x2000018d
 8000c0c:	20000160 	.word	0x20000160

08000c10 <Print_task>:

	}
}

void Print_task(void* parameters)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(Queue_print, &msg, portMAX_DELAY);
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <Print_task+0x38>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f107 010c 	add.w	r1, r7, #12
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	4618      	mov	r0, r3
 8000c26:	f005 fb59 	bl	80062dc <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), portMAX_DELAY);
 8000c2a:	68fc      	ldr	r4, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fad8 	bl	80001e4 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <Print_task+0x3c>)
 8000c40:	f003 fcda 	bl	80045f8 <HAL_UART_Transmit>
		xQueueReceive(Queue_print, &msg, portMAX_DELAY);
 8000c44:	e7e8      	b.n	8000c18 <Print_task+0x8>
 8000c46:	bf00      	nop
 8000c48:	20000178 	.word	0x20000178
 8000c4c:	200000dc 	.word	0x200000dc

08000c50 <Command_handling_task>:
	}
}
void Command_handling_task(void* parameters)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	while(1)
	{
	/*implement notify wait*/
	ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f006 fc45 	bl	80074f4 <xTaskGenericNotifyWait>
 8000c6a:	6178      	str	r0, [r7, #20]
	/*If receives a notification from the UART ISR it will process the input from the user*/
	if(ret == pdTRUE)
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d1f2      	bne.n	8000c58 <Command_handling_task+0x8>
	{
		process_command(&cmd);
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f802 	bl	8000c80 <process_command>
	ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000c7c:	e7ec      	b.n	8000c58 <Command_handling_task+0x8>
	...

08000c80 <process_command>:
	}
	}
}

void process_command(command_t *cmd)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	6078      	str	r0, [r7, #4]

	/*Extract the data items bytes from the input data queue*/
	extract_command(cmd);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 f835 	bl	8000cf8 <extract_command>

	/*After extracting the command the processor will back to the task that was running before the input from the
	 * user was detected*/
	switch(curr_state)
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <process_command+0x68>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	dc24      	bgt.n	8000ce0 <process_command+0x60>
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	da18      	bge.n	8000ccc <process_command+0x4c>
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <process_command+0x24>
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d00a      	beq.n	8000cb8 <process_command+0x38>
	case sRtcReport:
		xTaskNotify(RTC_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}

}
 8000ca2:	e01d      	b.n	8000ce0 <process_command+0x60>
		xTaskNotify(Menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <process_command+0x6c>)
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2303      	movs	r3, #3
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f006 fc9f 	bl	80075f4 <xTaskGenericNotify>
		break;
 8000cb6:	e013      	b.n	8000ce0 <process_command+0x60>
		xTaskNotify(LED_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <process_command+0x70>)
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	f006 fc95 	bl	80075f4 <xTaskGenericNotify>
		break;
 8000cca:	e009      	b.n	8000ce0 <process_command+0x60>
		xTaskNotify(RTC_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <process_command+0x74>)
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f006 fc8b 	bl	80075f4 <xTaskGenericNotify>
		break;
 8000cde:	bf00      	nop
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000018d 	.word	0x2000018d
 8000cec:	20000160 	.word	0x20000160
 8000cf0:	20000164 	.word	0x20000164
 8000cf4:	20000168 	.word	0x20000168

08000cf8 <extract_command>:

int extract_command(command_t *cmd)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	/*In the next line the number of messages stored in the queue are stored in the status variable
	 * if there is no message stored this variable will be 0 and the function will return -1 due to
	 * there is no command to extract*/
	status = uxQueueMessagesWaiting(Queue_data);
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <extract_command+0x70>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f005 fc58 	bl	80065ba <uxQueueMessagesWaiting>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <extract_command+0x22>
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	e022      	b.n	8000d60 <extract_command+0x68>


	uint8_t i = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	75fb      	strb	r3, [r7, #23]

	do
	{
		/*In the next line each data item is received, the status variable will be true if the
		 * data item was received correctly*/
		status = xQueueReceive(Queue_data, &item, 0);
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <extract_command+0x70>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f107 010f 	add.w	r1, r7, #15
 8000d26:	2200      	movs	r2, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 fad7 	bl	80062dc <xQueueReceive>
 8000d2e:	6138      	str	r0, [r7, #16]
		/*If the reception of the item was successful then the payload[i] variable that is inside the cmd
		 * structure will be updated with the data item this payload can have a max of 10 data items */
		if(status == pdTRUE) cmd->payload[i++] = item;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d106      	bne.n	8000d44 <extract_command+0x4c>
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	75fa      	strb	r2, [r7, #23]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	7bf9      	ldrb	r1, [r7, #15]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	5499      	strb	r1, [r3, r2]
		/*This process will be done until the char \n is detected that means the user made an enter*/
	}while(item != '\n');
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	2b0a      	cmp	r3, #10
 8000d48:	d1e9      	bne.n	8000d1e <extract_command+0x26>

	/*Here the last item of the payload array that should be /n will be replaced with \0 "null character" to follow
	 * a standard of UART */
	cmd->payload[i-1]='\0';
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	2100      	movs	r1, #0
 8000d52:	54d1      	strb	r1, [r2, r3]
	/*the len variable of the cmd struct will store the number of items stored in the payload excluding the \0 character*/
	cmd -> len = i-1;
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	729a      	strb	r2, [r3, #10]

	return 0;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000174 	.word	0x20000174

08000d6c <getnumber>:


uint8_t getnumber(uint8_t *p , int len)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	int value;

	if(len > 1)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	dd0f      	ble.n	8000d9c <getnumber+0x30>
	{
		value = ( ((p[0]-48) * 10) + (p[1] - 48) );
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3301      	adds	r3, #1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	3b30      	subs	r3, #48	; 0x30
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e003      	b.n	8000da4 <getnumber+0x38>
	}
	else
	{
		value = p[0] - 48;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	3b30      	subs	r3, #48	; 0x30
 8000da2:	60fb      	str	r3, [r7, #12]
	}

	return value;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	b2db      	uxtb	r3, r3
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <RTC_task>:

void RTC_task(void* parameters)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09a      	sub	sp, #104	; 0x68
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8000dbc:	4bb2      	ldr	r3, [pc, #712]	; (8001088 <RTC_task+0x2d4>)
 8000dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8000dc0:	4bb2      	ldr	r3, [pc, #712]	; (800108c <RTC_task+0x2d8>)
 8000dc2:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 4\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8000dc4:	4bb2      	ldr	r3, [pc, #712]	; (8001090 <RTC_task+0x2dc>)
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8000dc8:	4bb2      	ldr	r3, [pc, #712]	; (8001094 <RTC_task+0x2e0>)
 8000dca:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8000dcc:	4bb2      	ldr	r3, [pc, #712]	; (8001098 <RTC_task+0x2e4>)
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8000dd0:	4bb2      	ldr	r3, [pc, #712]	; (800109c <RTC_task+0x2e8>)
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8000dd4:	4bb2      	ldr	r3, [pc, #712]	; (80010a0 <RTC_task+0x2ec>)
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8000dd8:	4bb2      	ldr	r3, [pc, #712]	; (80010a4 <RTC_task+0x2f0>)
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8000ddc:	4bb2      	ldr	r3, [pc, #712]	; (80010a8 <RTC_task+0x2f4>)
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8000de0:	4bb2      	ldr	r3, [pc, #712]	; (80010ac <RTC_task+0x2f8>)
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8000de4:	4bb2      	ldr	r3, [pc, #712]	; (80010b0 <RTC_task+0x2fc>)
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
#define YEAR_CONFIG  2
#define DAY_CONFIG   3

	while(1){
		/*Notify wait (wait till someone notifies)*/
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2300      	movs	r3, #0
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2000      	movs	r0, #0
 8000df6:	f006 fb7d 	bl	80074f4 <xTaskGenericNotifyWait>
		/*Print the menu and show current date and time information */
		xQueueSend(Queue_print, &msg_rtc1, portMAX_DELAY);
 8000dfa:	4bae      	ldr	r3, [pc, #696]	; (80010b4 <RTC_task+0x300>)
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000e02:	2300      	movs	r3, #0
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	f005 f8c0 	bl	8005f8c <xQueueGenericSend>
		show_time_date();
 8000e0c:	f000 fc42 	bl	8001694 <show_time_date>
		xQueueSend(Queue_print, &msg_rtc2, portMAX_DELAY);
 8000e10:	4ba8      	ldr	r3, [pc, #672]	; (80010b4 <RTC_task+0x300>)
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1e:	f005 f8b5 	bl	8005f8c <xQueueGenericSend>
		while(curr_state != sMainMenu){
 8000e22:	bf00      	nop
 8000e24:	e1a0      	b.n	8001168 <RTC_task+0x3b4>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2e:	9200      	str	r2, [sp, #0]
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2000      	movs	r0, #0
 8000e36:	f006 fb5d 	bl	80074f4 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <RTC_task+0x304>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	3b02      	subs	r3, #2
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	f200 818f 	bhi.w	8001168 <RTC_task+0x3b4>
 8000e4a:	a201      	add	r2, pc, #4	; (adr r2, 8000e50 <RTC_task+0x9c>)
 8000e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e50:	08000e61 	.word	0x08000e61
 8000e54:	08000f13 	.word	0x08000f13
 8000e58:	08001001 	.word	0x08001001
 8000e5c:	08001167 	.word	0x08001167
			{
				case sRtcMenu:{

					/*process RTC menu commands */
					if(cmd->len == 1)
 8000e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e62:	7a9b      	ldrb	r3, [r3, #10]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d148      	bne.n	8000efa <RTC_task+0x146>
					{
						menu_code=cmd->payload[0]-48;
 8000e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3b30      	subs	r3, #48	; 0x30
 8000e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8000e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d835      	bhi.n	8000ee2 <RTC_task+0x12e>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <RTC_task+0xc8>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000ea7 	.word	0x08000ea7
 8000e84:	08000ec1 	.word	0x08000ec1
 8000e88:	08000edb 	.word	0x08000edb
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8000e8c:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <RTC_task+0x304>)
 8000e8e:	2203      	movs	r2, #3
 8000e90:	701a      	strb	r2, [r3, #0]
							xQueueSend(Queue_print,&msg_rtc_hh,portMAX_DELAY);
 8000e92:	4b88      	ldr	r3, [pc, #544]	; (80010b4 <RTC_task+0x300>)
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	f005 f874 	bl	8005f8c <xQueueGenericSend>
							break;
 8000ea4:	e034      	b.n	8000f10 <RTC_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 8000ea6:	4b84      	ldr	r3, [pc, #528]	; (80010b8 <RTC_task+0x304>)
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	701a      	strb	r2, [r3, #0]
							xQueueSend(Queue_print,&msg_rtc_dd,portMAX_DELAY);
 8000eac:	4b81      	ldr	r3, [pc, #516]	; (80010b4 <RTC_task+0x300>)
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eba:	f005 f867 	bl	8005f8c <xQueueGenericSend>
							break;
 8000ebe:	e027      	b.n	8000f10 <RTC_task+0x15c>
						case 2:
							curr_state = sRtcReport;
 8000ec0:	4b7d      	ldr	r3, [pc, #500]	; (80010b8 <RTC_task+0x304>)
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	701a      	strb	r2, [r3, #0]
							xQueueSend(Queue_print,&msg_rtc_report,portMAX_DELAY);
 8000ec6:	4b7b      	ldr	r3, [pc, #492]	; (80010b4 <RTC_task+0x300>)
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	f005 f85a 	bl	8005f8c <xQueueGenericSend>
							break;
 8000ed8:	e01a      	b.n	8000f10 <RTC_task+0x15c>
						case 3:
							curr_state = sMainMenu;
 8000eda:	4b77      	ldr	r3, [pc, #476]	; (80010b8 <RTC_task+0x304>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
							break;
 8000ee0:	e016      	b.n	8000f10 <RTC_task+0x15c>
						default:
							curr_state = sMainMenu;
 8000ee2:	4b75      	ldr	r3, [pc, #468]	; (80010b8 <RTC_task+0x304>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
							xQueueSend(Queue_print,&msg_inv,portMAX_DELAY);
 8000ee8:	4b72      	ldr	r3, [pc, #456]	; (80010b4 <RTC_task+0x300>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	2300      	movs	r3, #0
 8000eee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef2:	4972      	ldr	r1, [pc, #456]	; (80010bc <RTC_task+0x308>)
 8000ef4:	f005 f84a 	bl	8005f8c <xQueueGenericSend>
 8000ef8:	e136      	b.n	8001168 <RTC_task+0x3b4>
						}
					}
					else
					{
						curr_state = sMainMenu;
 8000efa:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <RTC_task+0x304>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
						xQueueSend(Queue_print,&msg_inv,portMAX_DELAY);
 8000f00:	4b6c      	ldr	r3, [pc, #432]	; (80010b4 <RTC_task+0x300>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	2300      	movs	r3, #0
 8000f06:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0a:	496c      	ldr	r1, [pc, #432]	; (80010bc <RTC_task+0x308>)
 8000f0c:	f005 f83e 	bl	8005f8c <xQueueGenericSend>
					}
					break;}
 8000f10:	e12a      	b.n	8001168 <RTC_task+0x3b4>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 8000f12:	4b6b      	ldr	r3, [pc, #428]	; (80010c0 <RTC_task+0x30c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d03b      	beq.n	8000f92 <RTC_task+0x1de>
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	f300 8124 	bgt.w	8001168 <RTC_task+0x3b4>
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <RTC_task+0x176>
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d01a      	beq.n	8000f5e <RTC_task+0x1aa>
 8000f28:	e11e      	b.n	8001168 <RTC_task+0x3b4>
					{
						case HH_CONFIG:{
							uint8_t hour = getnumber(cmd->payload , cmd->len);
 8000f2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f2e:	7a9b      	ldrb	r3, [r3, #10]
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f7ff ff1a 	bl	8000d6c <getnumber>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
							time.Hours = hour;
 8000f3e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000f42:	733b      	strb	r3, [r7, #12]
							rtc_state = MM_CONFIG;
 8000f44:	4b5e      	ldr	r3, [pc, #376]	; (80010c0 <RTC_task+0x30c>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
							xQueueSend(Queue_print,&msg_rtc_mm,portMAX_DELAY);
 8000f4a:	4b5a      	ldr	r3, [pc, #360]	; (80010b4 <RTC_task+0x300>)
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000f52:	2300      	movs	r3, #0
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	f005 f818 	bl	8005f8c <xQueueGenericSend>
							break;}
 8000f5c:	e04f      	b.n	8000ffe <RTC_task+0x24a>
						case MM_CONFIG:{
							uint8_t min = getnumber(cmd->payload , cmd->len);
 8000f5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f62:	7a9b      	ldrb	r3, [r3, #10]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f7ff ff00 	bl	8000d6c <getnumber>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							time.Minutes = min;
 8000f72:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000f76:	737b      	strb	r3, [r7, #13]
							rtc_state = SS_CONFIG;
 8000f78:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <RTC_task+0x30c>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	601a      	str	r2, [r3, #0]
							xQueueSend(Queue_print,&msg_rtc_ss,portMAX_DELAY);
 8000f7e:	4b4d      	ldr	r3, [pc, #308]	; (80010b4 <RTC_task+0x300>)
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000f86:	2300      	movs	r3, #0
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	f004 fffe 	bl	8005f8c <xQueueGenericSend>
							break;}
 8000f90:	e035      	b.n	8000ffe <RTC_task+0x24a>
						case SS_CONFIG:{
							uint8_t sec = getnumber(cmd->payload , cmd->len);
 8000f92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f96:	7a9b      	ldrb	r3, [r3, #10]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	f7ff fee6 	bl	8000d6c <getnumber>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							time.Seconds = sec;
 8000fa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000faa:	73bb      	strb	r3, [r7, #14]
							if(!validate_rtc_information(&time, NULL))
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fc02 	bl	80017bc <validate_rtc_information>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d110      	bne.n	8000fe0 <RTC_task+0x22c>
							{
								rtc_configure_time(&time);
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fbd2 	bl	800176c <rtc_configure_time>
								xQueueSend(Queue_print,&msg_conf,portMAX_DELAY);
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <RTC_task+0x300>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd6:	f004 ffd9 	bl	8005f8c <xQueueGenericSend>
								show_time_date();
 8000fda:	f000 fb5b 	bl	8001694 <show_time_date>
 8000fde:	e007      	b.n	8000ff0 <RTC_task+0x23c>
							}
							else
							{
								xQueueSend(Queue_print,&msg_inv,portMAX_DELAY);
 8000fe0:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <RTC_task+0x300>)
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fea:	4934      	ldr	r1, [pc, #208]	; (80010bc <RTC_task+0x308>)
 8000fec:	f004 ffce 	bl	8005f8c <xQueueGenericSend>
							}
							curr_state = sMainMenu;
 8000ff0:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <RTC_task+0x304>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <RTC_task+0x30c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
							break;}
 8000ffc:	bf00      	nop
					}

					break;}
 8000ffe:	e0b3      	b.n	8001168 <RTC_task+0x3b4>

				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <RTC_task+0x30c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b03      	cmp	r3, #3
 8001006:	f200 80af 	bhi.w	8001168 <RTC_task+0x3b4>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <RTC_task+0x25c>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	08001021 	.word	0x08001021
 8001014:	08001055 	.word	0x08001055
 8001018:	080010f9 	.word	0x080010f9
 800101c:	080010c5 	.word	0x080010c5
					{
					case DATE_CONFIG:{
						uint8_t d = getnumber(cmd->payload , cmd->len);
 8001020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001024:	7a9b      	ldrb	r3, [r3, #10]
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f7ff fe9f 	bl	8000d6c <getnumber>
 800102e:	4603      	mov	r3, r0
 8001030:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
						date.Date = d;
 8001034:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001038:	72bb      	strb	r3, [r7, #10]
						rtc_state = MONTH_CONFIG;
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <RTC_task+0x30c>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
						xQueueSend(Queue_print,&msg_rtc_mo,portMAX_DELAY);
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <RTC_task+0x300>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001048:	2300      	movs	r3, #0
 800104a:	f04f 32ff 	mov.w	r2, #4294967295
 800104e:	f004 ff9d 	bl	8005f8c <xQueueGenericSend>
						break;}
 8001052:	e087      	b.n	8001164 <RTC_task+0x3b0>
					case MONTH_CONFIG:{
						uint8_t month = getnumber(cmd->payload , cmd->len);
 8001054:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001058:	7a9b      	ldrb	r3, [r3, #10]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f7ff fe85 	bl	8000d6c <getnumber>
 8001062:	4603      	mov	r3, r0
 8001064:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
						date.Month = month;
 8001068:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800106c:	727b      	strb	r3, [r7, #9]
						rtc_state = DAY_CONFIG;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <RTC_task+0x30c>)
 8001070:	2203      	movs	r2, #3
 8001072:	601a      	str	r2, [r3, #0]
						xQueueSend(Queue_print,&msg_rtc_dow,portMAX_DELAY);
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <RTC_task+0x300>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800107c:	2300      	movs	r3, #0
 800107e:	f04f 32ff 	mov.w	r2, #4294967295
 8001082:	f004 ff83 	bl	8005f8c <xQueueGenericSend>
						break;}
 8001086:	e06d      	b.n	8001164 <RTC_task+0x3b0>
 8001088:	080094c4 	.word	0x080094c4
 800108c:	08009510 	.word	0x08009510
 8001090:	080095b4 	.word	0x080095b4
 8001094:	080095c8 	.word	0x080095c8
 8001098:	080095e0 	.word	0x080095e0
 800109c:	080095f8 	.word	0x080095f8
 80010a0:	0800960c 	.word	0x0800960c
 80010a4:	08009620 	.word	0x08009620
 80010a8:	08009638 	.word	0x08009638
 80010ac:	0800964c 	.word	0x0800964c
 80010b0:	08009668 	.word	0x08009668
 80010b4:	20000178 	.word	0x20000178
 80010b8:	2000018d 	.word	0x2000018d
 80010bc:	20000010 	.word	0x20000010
 80010c0:	200000b4 	.word	0x200000b4
					case DAY_CONFIG:{
						uint8_t day = getnumber(cmd->payload , cmd->len);
 80010c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c8:	7a9b      	ldrb	r3, [r3, #10]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4610      	mov	r0, r2
 80010ce:	f7ff fe4d 	bl	8000d6c <getnumber>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						date.WeekDay = day;
 80010d8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010dc:	723b      	strb	r3, [r7, #8]
						rtc_state = YEAR_CONFIG;
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <RTC_task+0x3c0>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	601a      	str	r2, [r3, #0]
						xQueueSend(Queue_print,&msg_rtc_yr,portMAX_DELAY);
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <RTC_task+0x3c4>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80010ec:	2300      	movs	r3, #0
 80010ee:	f04f 32ff 	mov.w	r2, #4294967295
 80010f2:	f004 ff4b 	bl	8005f8c <xQueueGenericSend>
						break;}
 80010f6:	e035      	b.n	8001164 <RTC_task+0x3b0>
					case YEAR_CONFIG:{
						uint8_t year = getnumber(cmd->payload , cmd->len);
 80010f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010fc:	7a9b      	ldrb	r3, [r3, #10]
 80010fe:	4619      	mov	r1, r3
 8001100:	4610      	mov	r0, r2
 8001102:	f7ff fe33 	bl	8000d6c <getnumber>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
						date.Year = year;
 800110c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001110:	72fb      	strb	r3, [r7, #11]

						if(!validate_rtc_information(NULL, &date))
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	2000      	movs	r0, #0
 800111a:	f000 fb4f 	bl	80017bc <validate_rtc_information>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d110      	bne.n	8001146 <RTC_task+0x392>
						{
							rtc_configure_date(&date);
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fb37 	bl	800179c <rtc_configure_date>
							xQueueSend(Queue_print,&msg_conf,portMAX_DELAY);
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <RTC_task+0x3c4>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001136:	2300      	movs	r3, #0
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	f004 ff26 	bl	8005f8c <xQueueGenericSend>
							show_time_date();
 8001140:	f000 faa8 	bl	8001694 <show_time_date>
 8001144:	e007      	b.n	8001156 <RTC_task+0x3a2>
						}
						else
						{
							xQueueSend(Queue_print,&msg_inv,portMAX_DELAY);
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <RTC_task+0x3c4>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	490a      	ldr	r1, [pc, #40]	; (800117c <RTC_task+0x3c8>)
 8001152:	f004 ff1b 	bl	8005f8c <xQueueGenericSend>
						}

						curr_state = sMainMenu;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <RTC_task+0x3cc>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
						rtc_state = 0;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <RTC_task+0x3c0>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
						break;}
 8001162:	bf00      	nop

					}
					break;}
 8001164:	e000      	b.n	8001168 <RTC_task+0x3b4>

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					break;}
 8001166:	bf00      	nop
		while(curr_state != sMainMenu){
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <RTC_task+0x3cc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f47f ae5a 	bne.w	8000e26 <RTC_task+0x72>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001172:	e639      	b.n	8000de8 <RTC_task+0x34>
 8001174:	200000b4 	.word	0x200000b4
 8001178:	20000178 	.word	0x20000178
 800117c:	20000010 	.word	0x20000010
 8001180:	2000018d 	.word	0x2000018d

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f000 fd21 	bl	8001bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 f8c3 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001192:	f000 f96d 	bl	8001470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001196:	f000 f93b 	bl	8001410 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800119a:	f000 f911 	bl	80013c0 <MX_RTC_Init>
  /*Starting recording of segger systemview events*/
  //SEGGER_SYSVIEW_Conf();
  //SEGGER_SYSVIEW_Start(); //is commented because it is called in the SEGGER_UART_init(), this when we want real time debbuging

  /*Here we are creating the tasks*/
  status = xTaskCreate(Menu_task, "Menu_task", 200, NULL, 2, &Menu_task_handle);
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <main+0x13c>)
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	2302      	movs	r3, #2
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	22c8      	movs	r2, #200	; 0xc8
 80011aa:	4946      	ldr	r1, [pc, #280]	; (80012c4 <main+0x140>)
 80011ac:	4846      	ldr	r0, [pc, #280]	; (80012c8 <main+0x144>)
 80011ae:	f005 fbb7 	bl	8006920 <xTaskCreate>
 80011b2:	60b8      	str	r0, [r7, #8]
  /*With this config assert that is located in FreeRTOSConfig.h if the status variable is 0 then it will enter to an infinite loop, it will help
   * to debug issues*/
  configASSERT(status = pdPASS);
 80011b4:	2301      	movs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]

  status = xTaskCreate(LED_task, "LED_task", 200, NULL, 2, &LED_task_handle);
 80011b8:	4b44      	ldr	r3, [pc, #272]	; (80012cc <main+0x148>)
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	2302      	movs	r3, #2
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	22c8      	movs	r2, #200	; 0xc8
 80011c4:	4942      	ldr	r1, [pc, #264]	; (80012d0 <main+0x14c>)
 80011c6:	4843      	ldr	r0, [pc, #268]	; (80012d4 <main+0x150>)
 80011c8:	f005 fbaa 	bl	8006920 <xTaskCreate>
 80011cc:	60b8      	str	r0, [r7, #8]
  configASSERT(status = pdPASS);
 80011ce:	2301      	movs	r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]

  status = xTaskCreate(RTC_task, "RTC_task", 200, NULL, 2, &RTC_task_handle);
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <main+0x154>)
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	2302      	movs	r3, #2
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2300      	movs	r3, #0
 80011dc:	22c8      	movs	r2, #200	; 0xc8
 80011de:	493f      	ldr	r1, [pc, #252]	; (80012dc <main+0x158>)
 80011e0:	483f      	ldr	r0, [pc, #252]	; (80012e0 <main+0x15c>)
 80011e2:	f005 fb9d 	bl	8006920 <xTaskCreate>
 80011e6:	60b8      	str	r0, [r7, #8]
  configASSERT(status = pdPASS);
 80011e8:	2301      	movs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]

  status = xTaskCreate(Print_task, "Print_task", 200, NULL, 2, &Print_task_handle);
 80011ec:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <main+0x160>)
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2302      	movs	r3, #2
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	22c8      	movs	r2, #200	; 0xc8
 80011f8:	493b      	ldr	r1, [pc, #236]	; (80012e8 <main+0x164>)
 80011fa:	483c      	ldr	r0, [pc, #240]	; (80012ec <main+0x168>)
 80011fc:	f005 fb90 	bl	8006920 <xTaskCreate>
 8001200:	60b8      	str	r0, [r7, #8]
  configASSERT(status = pdPASS);
 8001202:	2301      	movs	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]

  status = xTaskCreate(Command_handling_task, "Command_handling_task", 200, NULL, 2, &Command_handling_task_handle);
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <main+0x16c>)
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	2302      	movs	r3, #2
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	22c8      	movs	r2, #200	; 0xc8
 8001212:	4938      	ldr	r1, [pc, #224]	; (80012f4 <main+0x170>)
 8001214:	4838      	ldr	r0, [pc, #224]	; (80012f8 <main+0x174>)
 8001216:	f005 fb83 	bl	8006920 <xTaskCreate>
 800121a:	60b8      	str	r0, [r7, #8]
  configASSERT(status = pdPASS);
 800121c:	2301      	movs	r3, #1
 800121e:	60bb      	str	r3, [r7, #8]


  /* Create a queue that will save the data received from user */
  Queue_data = xQueueCreate( 10, sizeof( char ) );
 8001220:	2200      	movs	r2, #0
 8001222:	2101      	movs	r1, #1
 8001224:	200a      	movs	r0, #10
 8001226:	f004 fe2f 	bl	8005e88 <xQueueGenericCreate>
 800122a:	4603      	mov	r3, r0
 800122c:	4a33      	ldr	r2, [pc, #204]	; (80012fc <main+0x178>)
 800122e:	6013      	str	r3, [r2, #0]

  configASSERT( Queue_data != NULL );
 8001230:	4b32      	ldr	r3, [pc, #200]	; (80012fc <main+0x178>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10a      	bne.n	800124e <main+0xca>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123c:	f383 8811 	msr	BASEPRI, r3
 8001240:	f3bf 8f6f 	isb	sy
 8001244:	f3bf 8f4f 	dsb	sy
 8001248:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800124a:	bf00      	nop
 800124c:	e7fe      	b.n	800124c <main+0xc8>

  /* Create a queue that will sent the data to the user */
  Queue_print = xQueueCreate( 10, sizeof( size_t ) );
 800124e:	2200      	movs	r2, #0
 8001250:	2104      	movs	r1, #4
 8001252:	200a      	movs	r0, #10
 8001254:	f004 fe18 	bl	8005e88 <xQueueGenericCreate>
 8001258:	4603      	mov	r3, r0
 800125a:	4a29      	ldr	r2, [pc, #164]	; (8001300 <main+0x17c>)
 800125c:	6013      	str	r3, [r2, #0]

  configASSERT( Queue_print != NULL );
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <main+0x17c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10a      	bne.n	800127c <main+0xf8>
        __asm volatile
 8001266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126a:	f383 8811 	msr	BASEPRI, r3
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	f3bf 8f4f 	dsb	sy
 8001276:	603b      	str	r3, [r7, #0]
    }
 8001278:	bf00      	nop
 800127a:	e7fe      	b.n	800127a <main+0xf6>

  /*Create software timers for led EFFECTS*/
  for(int i = 0 ; i<4 ; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	e013      	b.n	80012aa <main+0x126>
  {
	  handle_led_timer[i] =  xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3301      	adds	r3, #1
 8001286:	461a      	mov	r2, r3
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <main+0x180>)
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001294:	481c      	ldr	r0, [pc, #112]	; (8001308 <main+0x184>)
 8001296:	f006 fc27 	bl	8007ae8 <xTimerCreate>
 800129a:	4602      	mov	r2, r0
 800129c:	491b      	ldr	r1, [pc, #108]	; (800130c <main+0x188>)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0 ; i<4 ; i++)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3301      	adds	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	dde8      	ble.n	8001282 <main+0xfe>
  }


  /*Enable UART receive interrupt*/
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	4917      	ldr	r1, [pc, #92]	; (8001310 <main+0x18c>)
 80012b4:	4817      	ldr	r0, [pc, #92]	; (8001314 <main+0x190>)
 80012b6:	f003 fa33 	bl	8004720 <HAL_UART_Receive_IT>

  /*Here we are starting the FreeRTOS scheduler*/
  vTaskStartScheduler();
 80012ba:	f005 fc77 	bl	8006bac <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012be:	e7fe      	b.n	80012be <main+0x13a>
 80012c0:	20000160 	.word	0x20000160
 80012c4:	0800968c 	.word	0x0800968c
 80012c8:	080009fd 	.word	0x080009fd
 80012cc:	20000164 	.word	0x20000164
 80012d0:	08009698 	.word	0x08009698
 80012d4:	08000ae5 	.word	0x08000ae5
 80012d8:	20000168 	.word	0x20000168
 80012dc:	080096a4 	.word	0x080096a4
 80012e0:	08000db5 	.word	0x08000db5
 80012e4:	2000016c 	.word	0x2000016c
 80012e8:	080096b0 	.word	0x080096b0
 80012ec:	08000c11 	.word	0x08000c11
 80012f0:	20000170 	.word	0x20000170
 80012f4:	080096bc 	.word	0x080096bc
 80012f8:	08000c51 	.word	0x08000c51
 80012fc:	20000174 	.word	0x20000174
 8001300:	20000178 	.word	0x20000178
 8001304:	08001615 	.word	0x08001615
 8001308:	080096d4 	.word	0x080096d4
 800130c:	2000017c 	.word	0x2000017c
 8001310:	2000018c 	.word	0x2000018c
 8001314:	200000dc 	.word	0x200000dc

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b096      	sub	sp, #88	; 0x58
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2244      	movs	r2, #68	; 0x44
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f007 fbbe 	bl	8008aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800133a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800133e:	f000 ffdd 	bl	80022fc <HAL_PWREx_ControlVoltageScaling>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001348:	f000 f99e 	bl	8001688 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800134c:	230a      	movs	r3, #10
 800134e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001354:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001356:	2310      	movs	r3, #16
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800135a:	2301      	movs	r3, #1
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001362:	2302      	movs	r3, #2
 8001364:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800136a:	230a      	movs	r3, #10
 800136c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800136e:	2307      	movs	r3, #7
 8001370:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001372:	2302      	movs	r3, #2
 8001374:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001376:	2302      	movs	r3, #2
 8001378:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4618      	mov	r0, r3
 8001380:	f001 f812 	bl	80023a8 <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800138a:	f000 f97d 	bl	8001688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2303      	movs	r3, #3
 8001394:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	2104      	movs	r1, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fbda 	bl	8002b60 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013b2:	f000 f969 	bl	8001688 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3758      	adds	r7, #88	; 0x58
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_RTC_Init+0x48>)
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <MX_RTC_Init+0x4c>)
 80013c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_RTC_Init+0x48>)
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <MX_RTC_Init+0x48>)
 80013d2:	227f      	movs	r2, #127	; 0x7f
 80013d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_RTC_Init+0x48>)
 80013d8:	22ff      	movs	r2, #255	; 0xff
 80013da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <MX_RTC_Init+0x48>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_RTC_Init+0x48>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <MX_RTC_Init+0x48>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_RTC_Init+0x48>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_RTC_Init+0x48>)
 80013f6:	f002 fac5 	bl	8003984 <HAL_RTC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001400:	f000 f942 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200000b8 	.word	0x200000b8
 800140c:	40002800 	.word	0x40002800

08001410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_USART2_UART_Init+0x58>)
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <MX_USART2_UART_Init+0x5c>)
 8001418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_USART2_UART_Init+0x58>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_USART2_UART_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_USART2_UART_Init+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_USART2_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_USART2_UART_Init+0x58>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_USART2_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_USART2_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_USART2_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_USART2_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_USART2_UART_Init+0x58>)
 8001454:	f003 f882 	bl	800455c <HAL_UART_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800145e:	f000 f913 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200000dc 	.word	0x200000dc
 800146c:	40004400 	.word	0x40004400

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <MX_GPIO_Init+0x104>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <MX_GPIO_Init+0x104>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <MX_GPIO_Init+0x104>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	4b35      	ldr	r3, [pc, #212]	; (8001574 <MX_GPIO_Init+0x104>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a34      	ldr	r2, [pc, #208]	; (8001574 <MX_GPIO_Init+0x104>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <MX_GPIO_Init+0x104>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <MX_GPIO_Init+0x104>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <MX_GPIO_Init+0x104>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <MX_GPIO_Init+0x104>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MX_GPIO_Init+0x104>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a28      	ldr	r2, [pc, #160]	; (8001574 <MX_GPIO_Init+0x104>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_GPIO_Init+0x104>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Led_1_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f0:	f000 feba 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_2_Pin|Led_3_Pin|Led_4_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80014fa:	481f      	ldr	r0, [pc, #124]	; (8001578 <MX_GPIO_Init+0x108>)
 80014fc:	f000 feb4 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001506:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4819      	ldr	r0, [pc, #100]	; (800157c <MX_GPIO_Init+0x10c>)
 8001518:	f000 fcfc 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Led_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Led_1_Pin;
 800151c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f000 fcec 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_2_Pin Led_3_Pin Led_4_Pin */
  GPIO_InitStruct.Pin = Led_2_Pin|Led_3_Pin|Led_4_Pin;
 800153c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4808      	ldr	r0, [pc, #32]	; (8001578 <MX_GPIO_Init+0x108>)
 8001556:	f000 fcdd 	bl	8001f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2106      	movs	r1, #6
 800155e:	2028      	movs	r0, #40	; 0x28
 8001560:	f000 fc2e 	bl	8001dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001564:	2028      	movs	r0, #40	; 0x28
 8001566:	f000 fc47 	bl	8001df8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800

08001580 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/*Whenever data byte is received this callback will be called*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af02      	add	r7, sp, #8
 8001586:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	if ( !xQueueIsQueueFullFromISR(Queue_data) )
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_UART_RxCpltCallback+0x84>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f005 f942 	bl	8006816 <xQueueIsQueueFullFromISR>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d107      	bne.n	80015a8 <HAL_UART_RxCpltCallback+0x28>
	{
		/*Enqueue Data byte*/
		xQueueSendFromISR(Queue_data, (void*)&user_data, NULL);
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_UART_RxCpltCallback+0x84>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	2200      	movs	r2, #0
 80015a0:	4919      	ldr	r1, [pc, #100]	; (8001608 <HAL_UART_RxCpltCallback+0x88>)
 80015a2:	f004 fdf1 	bl	8006188 <xQueueGenericSendFromISR>
 80015a6:	e013      	b.n	80015d0 <HAL_UART_RxCpltCallback+0x50>
	}else{
		if (user_data == '\n')
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_UART_RxCpltCallback+0x88>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b0a      	cmp	r3, #10
 80015b0:	d10e      	bne.n	80015d0 <HAL_UART_RxCpltCallback+0x50>
		{
			/*Make sure that the last data byte of the queue is \n*/
			xQueueReceiveFromISR(Queue_data, (void*)&dummy, NULL);
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_UART_RxCpltCallback+0x84>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f107 010f 	add.w	r1, r7, #15
 80015ba:	2200      	movs	r2, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 ff6d 	bl	800649c <xQueueReceiveFromISR>
			xQueueSendFromISR(Queue_data, (void*)&user_data, NULL);
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_UART_RxCpltCallback+0x84>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	2200      	movs	r2, #0
 80015ca:	490f      	ldr	r1, [pc, #60]	; (8001608 <HAL_UART_RxCpltCallback+0x88>)
 80015cc:	f004 fddc 	bl	8006188 <xQueueGenericSendFromISR>
		}
	}

	if (user_data == '\n')
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_UART_RxCpltCallback+0x88>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d10a      	bne.n	80015f0 <HAL_UART_RxCpltCallback+0x70>
	{
		/*Send notification to command handling task*/
		xTaskNotifyFromISR(Command_handling_task_handle, 0, eNoAction, NULL);
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_UART_RxCpltCallback+0x8c>)
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	2300      	movs	r3, #0
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	f006 f8e2 	bl	80077b4 <xTaskGenericNotifyFromISR>
	}
	  /*Enable UART receive interrupt*/
	  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	4905      	ldr	r1, [pc, #20]	; (8001608 <HAL_UART_RxCpltCallback+0x88>)
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <HAL_UART_RxCpltCallback+0x90>)
 80015f6:	f003 f893 	bl	8004720 <HAL_UART_Receive_IT>

}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000174 	.word	0x20000174
 8001608:	2000018c 	.word	0x2000018c
 800160c:	20000170 	.word	0x20000170
 8001610:	200000dc 	.word	0x200000dc

08001614 <led_effect_callback>:

/*Implementing callback for software timers*/
void led_effect_callback(TimerHandle_t xTimer)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f006 fd9f 	bl	8008160 <pvTimerGetTimerID>
 8001622:	4603      	mov	r3, r0
 8001624:	60fb      	str	r3, [r7, #12]

	switch(id)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3b01      	subs	r3, #1
 800162a:	2b03      	cmp	r3, #3
 800162c:	d816      	bhi.n	800165c <led_effect_callback+0x48>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <led_effect_callback+0x20>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001645 	.word	0x08001645
 8001638:	0800164b 	.word	0x0800164b
 800163c:	08001651 	.word	0x08001651
 8001640:	08001657 	.word	0x08001657
	{
	case 1:
		LED_effect1();
 8001644:	f7ff f82a 	bl	800069c <LED_effect1>
		break;
 8001648:	e008      	b.n	800165c <led_effect_callback+0x48>
	case 2:
		LED_effect2();
 800164a:	f7ff f879 	bl	8000740 <LED_effect2>
		break;
 800164e:	e005      	b.n	800165c <led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8001650:	f7ff f91a 	bl	8000888 <LED_effect3>
		break;
 8001654:	e002      	b.n	800165c <led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8001656:	f7ff f9bb 	bl	80009d0 <LED_effect4>
		break;
 800165a:	bf00      	nop
	}
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d101      	bne.n	800167a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001676:	f000 facb 	bl	8001c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40001000 	.word	0x40001000

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	e7fe      	b.n	8001690 <Error_Handler+0x8>
	...

08001694 <show_time_date>:
 */

#include "main.h"


void show_time_date(void){
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	2204      	movs	r2, #4
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f007 fa00 	bl	8008aa8 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2214      	movs	r2, #20
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f007 f9fa 	bl	8008aa8 <memset>

	/* Get the RTC current time*/
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	4619      	mov	r1, r3
 80016ba:	4821      	ldr	r0, [pc, #132]	; (8001740 <show_time_date+0xac>)
 80016bc:	f002 fa7a 	bl	8003bb4 <HAL_RTC_GetTime>
	/* Get the RTC current date*/
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80016c0:	f107 0318 	add.w	r3, r7, #24
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	481d      	ldr	r0, [pc, #116]	; (8001740 <show_time_date+0xac>)
 80016ca:	f002 fb56 	bl	8003d7a <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <show_time_date+0x44>
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <show_time_date+0xb0>)
 80016d6:	e000      	b.n	80016da <show_time_date+0x46>
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <show_time_date+0xb4>)
 80016da:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours,rtc_time.Minutes, rtc_time.Seconds,format);
 80016dc:	793b      	ldrb	r3, [r7, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	797b      	ldrb	r3, [r7, #5]
 80016e2:	461a      	mov	r2, r3
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	4619      	mov	r1, r3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	9101      	str	r1, [sp, #4]
 80016ee:	9200      	str	r2, [sp, #0]
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <show_time_date+0xb8>)
 80016f4:	4916      	ldr	r1, [pc, #88]	; (8001750 <show_time_date+0xbc>)
 80016f6:	4817      	ldr	r0, [pc, #92]	; (8001754 <show_time_date+0xc0>)
 80016f8:	f007 f9de 	bl	8008ab8 <siprintf>
	xQueueSend(Queue_print,&time,portMAX_DELAY);
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <show_time_date+0xc4>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	f04f 32ff 	mov.w	r2, #4294967295
 8001706:	4915      	ldr	r1, [pc, #84]	; (800175c <show_time_date+0xc8>)
 8001708:	f004 fc40 	bl	8005f8c <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate, "\t%02d-%02d-%2d\n",rtc_date.Month,rtc_date.Date, 2000 + rtc_date.Year);
 800170c:	7e7b      	ldrb	r3, [r7, #25]
 800170e:	461a      	mov	r2, r3
 8001710:	7ebb      	ldrb	r3, [r7, #26]
 8001712:	4619      	mov	r1, r3
 8001714:	7efb      	ldrb	r3, [r7, #27]
 8001716:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	460b      	mov	r3, r1
 800171e:	4910      	ldr	r1, [pc, #64]	; (8001760 <show_time_date+0xcc>)
 8001720:	4810      	ldr	r0, [pc, #64]	; (8001764 <show_time_date+0xd0>)
 8001722:	f007 f9c9 	bl	8008ab8 <siprintf>
	xQueueSend(Queue_print,&date,portMAX_DELAY);
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <show_time_date+0xc4>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	2300      	movs	r3, #0
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	490d      	ldr	r1, [pc, #52]	; (8001768 <show_time_date+0xd4>)
 8001732:	f004 fc2b 	bl	8005f8c <xQueueGenericSend>
}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200000b8 	.word	0x200000b8
 8001744:	080096e0 	.word	0x080096e0
 8001748:	080096e4 	.word	0x080096e4
 800174c:	080096e8 	.word	0x080096e8
 8001750:	080096fc 	.word	0x080096fc
 8001754:	20000190 	.word	0x20000190
 8001758:	20000178 	.word	0x20000178
 800175c:	20000014 	.word	0x20000014
 8001760:	08009714 	.word	0x08009714
 8001764:	200001b8 	.word	0x200001b8
 8001768:	20000018 	.word	0x20000018

0800176c <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8001786:	2200      	movs	r2, #0
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <rtc_configure_time+0x2c>)
 800178c:	f002 f975 	bl	8003a7a <HAL_RTC_SetTime>

}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200000b8 	.word	0x200000b8

0800179c <rtc_configure_date>:

void rtc_configure_date(RTC_DateTypeDef *date){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <rtc_configure_date+0x1c>)
 80017aa:	f002 fa5f 	bl	8003c6c <HAL_RTC_SetDate>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200000b8 	.word	0x200000b8

080017bc <validate_rtc_information>:

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	if(time){
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	d807      	bhi.n	80017e4 <validate_rtc_information+0x28>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	2b3b      	cmp	r3, #59	; 0x3b
 80017da:	d803      	bhi.n	80017e4 <validate_rtc_information+0x28>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	2b3b      	cmp	r3, #59	; 0x3b
 80017e2:	d901      	bls.n	80017e8 <validate_rtc_information+0x2c>
		{
			return 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e015      	b.n	8001814 <validate_rtc_information+0x58>
		}
	}

	if(date){
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d011      	beq.n	8001812 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	789b      	ldrb	r3, [r3, #2]
 80017f2:	2b1f      	cmp	r3, #31
 80017f4:	d80b      	bhi.n	800180e <validate_rtc_information+0x52>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	d807      	bhi.n	800180e <validate_rtc_information+0x52>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	78db      	ldrb	r3, [r3, #3]
 8001802:	2b63      	cmp	r3, #99	; 0x63
 8001804:	d803      	bhi.n	800180e <validate_rtc_information+0x52>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	785b      	ldrb	r3, [r3, #1]
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d901      	bls.n	8001812 <validate_rtc_information+0x56>
		{
			return 1;
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <validate_rtc_information+0x58>
		}
	}

	return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_MspInit+0x44>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_MspInit+0x44>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6613      	str	r3, [r2, #96]	; 0x60
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_MspInit+0x44>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_MspInit+0x44>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_MspInit+0x44>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	6593      	str	r3, [r2, #88]	; 0x58
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_MspInit+0x44>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0a4      	sub	sp, #144	; 0x90
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	2288      	movs	r2, #136	; 0x88
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f007 f915 	bl	8008aa8 <memset>
  if(hrtc->Instance==RTC)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_RTC_MspInit+0x5c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d118      	bne.n	80018ba <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800188e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	4618      	mov	r0, r3
 800189c:	f001 fbb6 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80018a6:	f7ff feef 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_RTC_MspInit+0x60>)
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b0:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <HAL_RTC_MspInit+0x60>)
 80018b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018ba:	bf00      	nop
 80018bc:	3790      	adds	r7, #144	; 0x90
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40002800 	.word	0x40002800
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0ac      	sub	sp, #176	; 0xb0
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2288      	movs	r2, #136	; 0x88
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f007 f8db 	bl	8008aa8 <memset>
  if(huart->Instance==USART2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <HAL_UART_MspInit+0xc0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d143      	bne.n	8001984 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001900:	2300      	movs	r3, #0
 8001902:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fb7f 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001914:	f7ff feb8 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_UART_MspInit+0xc4>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <HAL_UART_MspInit+0xc4>)
 800191e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_UART_MspInit+0xc4>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_UART_MspInit+0xc4>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	4a16      	ldr	r2, [pc, #88]	; (8001990 <HAL_UART_MspInit+0xc4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_UART_MspInit+0xc4>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001948:	230c      	movs	r3, #12
 800194a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001960:	2307      	movs	r3, #7
 8001962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001970:	f000 fad0 	bl	8001f14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2106      	movs	r1, #6
 8001978:	2026      	movs	r0, #38	; 0x26
 800197a:	f000 fa21 	bl	8001dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800197e:	2026      	movs	r0, #38	; 0x26
 8001980:	f000 fa3a 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001984:	bf00      	nop
 8001986:	37b0      	adds	r7, #176	; 0xb0
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40004400 	.word	0x40004400
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08e      	sub	sp, #56	; 0x38
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019a2:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <HAL_InitTick+0xe0>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	4a33      	ldr	r2, [pc, #204]	; (8001a74 <HAL_InitTick+0xe0>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6593      	str	r3, [r2, #88]	; 0x58
 80019ae:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <HAL_InitTick+0xe0>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019ba:	f107 0210 	add.w	r2, r7, #16
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 fa8f 	bl	8002ee8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d103      	bne.n	80019dc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019d4:	f001 fa5c 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 80019d8:	6378      	str	r0, [r7, #52]	; 0x34
 80019da:	e004      	b.n	80019e6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019dc:	f001 fa58 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 80019e0:	4603      	mov	r3, r0
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e8:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <HAL_InitTick+0xe4>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0c9b      	lsrs	r3, r3, #18
 80019f0:	3b01      	subs	r3, #1
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_InitTick+0xe8>)
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_InitTick+0xec>)
 80019f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_InitTick+0xe8>)
 80019fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a02:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <HAL_InitTick+0xe8>)
 8001a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_InitTick+0xe8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_InitTick+0xe8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_InitTick+0xe8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a1a:	4818      	ldr	r0, [pc, #96]	; (8001a7c <HAL_InitTick+0xe8>)
 8001a1c:	f002 facc 	bl	8003fb8 <HAL_TIM_Base_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d11b      	bne.n	8001a66 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a2e:	4813      	ldr	r0, [pc, #76]	; (8001a7c <HAL_InitTick+0xe8>)
 8001a30:	f002 fb24 	bl	800407c <HAL_TIM_Base_Start_IT>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d111      	bne.n	8001a66 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a42:	2036      	movs	r0, #54	; 0x36
 8001a44:	f000 f9d8 	bl	8001df8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	d808      	bhi.n	8001a60 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	2036      	movs	r0, #54	; 0x36
 8001a54:	f000 f9b4 	bl	8001dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_InitTick+0xf0>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e002      	b.n	8001a66 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3738      	adds	r7, #56	; 0x38
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	431bde83 	.word	0x431bde83
 8001a7c:	200001e0 	.word	0x200001e0
 8001a80:	40001000 	.word	0x40001000
 8001a84:	20000020 	.word	0x20000020

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x4>

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <USART2_IRQHandler+0x10>)
 8001aba:	f002 fe87 	bl	80047cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000dc 	.word	0x200000dc

08001ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /*Clear EXTI pending bit in the exti pending register*/
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001acc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ad0:	f000 fbe2 	bl	8002298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM6_DAC_IRQHandler+0x10>)
 8001ade:	f002 fb3d 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200001e0 	.word	0x200001e0

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f006 ff8c 	bl	8008a38 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20018000 	.word	0x20018000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	2000022c 	.word	0x2000022c
 8001b54:	20012ff0 	.word	0x20012ff0

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b80:	f7ff ffea 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b86:	490d      	ldr	r1, [pc, #52]	; (8001bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <LoopForever+0xe>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	; (8001bc8 <LoopForever+0x16>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001baa:	f006 ff4b 	bl	8008a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bae:	f7ff fae9 	bl	8001184 <main>

08001bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb2:	e7fe      	b.n	8001bb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001bc0:	080097c8 	.word	0x080097c8
  ldr r2, =_sbss
 8001bc4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001bc8:	20012fec 	.word	0x20012fec

08001bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC1_2_IRQHandler>
	...

08001bd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_Init+0x3c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <HAL_Init+0x3c>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be6:	2003      	movs	r0, #3
 8001be8:	f000 f8df 	bl	8001daa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bec:	200f      	movs	r0, #15
 8001bee:	f7ff fed1 	bl	8001994 <HAL_InitTick>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	71fb      	strb	r3, [r7, #7]
 8001bfc:	e001      	b.n	8001c02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bfe:	f7ff fe0f 	bl	8001820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c02:	79fb      	ldrb	r3, [r7, #7]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40022000 	.word	0x40022000

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000024 	.word	0x20000024
 8001c34:	20000230 	.word	0x20000230

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000230 	.word	0x20000230

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff4c 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd2:	f7ff ff61 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001dd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	6978      	ldr	r0, [r7, #20]
 8001dde:	f7ff ffb1 	bl	8001d44 <NVIC_EncodePriority>
 8001de2:	4602      	mov	r2, r0
 8001de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff80 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff54 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d008      	beq.n	8001e3e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e022      	b.n	8001e84 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 020e 	bic.w	r2, r2, #14
 8001e4c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0201 	bic.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f003 021c 	and.w	r2, r3, #28
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d005      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e029      	b.n	8001f08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 020e 	bic.w	r2, r2, #14
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	f003 021c 	and.w	r2, r3, #28
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
    }
  }
  return status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	e17f      	b.n	8002224 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8171 	beq.w	800221e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d005      	beq.n	8001f54 <HAL_GPIO_Init+0x40>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d130      	bne.n	8001fb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f003 0201 	and.w	r2, r3, #1
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d118      	bne.n	8001ff4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	08db      	lsrs	r3, r3, #3
 8001fde:	f003 0201 	and.w	r2, r3, #1
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d017      	beq.n	8002030 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d123      	bne.n	8002084 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	08da      	lsrs	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	6939      	ldr	r1, [r7, #16]
 8002080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0203 	and.w	r2, r3, #3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80ac 	beq.w	800221e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	4b5f      	ldr	r3, [pc, #380]	; (8002244 <HAL_GPIO_Init+0x330>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	4a5e      	ldr	r2, [pc, #376]	; (8002244 <HAL_GPIO_Init+0x330>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6613      	str	r3, [r2, #96]	; 0x60
 80020d2:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_GPIO_Init+0x330>)
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020de:	4a5a      	ldr	r2, [pc, #360]	; (8002248 <HAL_GPIO_Init+0x334>)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002108:	d025      	beq.n	8002156 <HAL_GPIO_Init+0x242>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4f      	ldr	r2, [pc, #316]	; (800224c <HAL_GPIO_Init+0x338>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <HAL_GPIO_Init+0x23e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_GPIO_Init+0x33c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x23a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4d      	ldr	r2, [pc, #308]	; (8002254 <HAL_GPIO_Init+0x340>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x236>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <HAL_GPIO_Init+0x344>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x232>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4b      	ldr	r2, [pc, #300]	; (800225c <HAL_GPIO_Init+0x348>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x22e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4a      	ldr	r2, [pc, #296]	; (8002260 <HAL_GPIO_Init+0x34c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x22a>
 800213a:	2306      	movs	r3, #6
 800213c:	e00c      	b.n	8002158 <HAL_GPIO_Init+0x244>
 800213e:	2307      	movs	r3, #7
 8002140:	e00a      	b.n	8002158 <HAL_GPIO_Init+0x244>
 8002142:	2305      	movs	r3, #5
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x244>
 8002146:	2304      	movs	r3, #4
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x244>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x244>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x244>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x244>
 8002156:	2300      	movs	r3, #0
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002168:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_GPIO_Init+0x334>)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002176:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_GPIO_Init+0x350>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800219a:	4a32      	ldr	r2, [pc, #200]	; (8002264 <HAL_GPIO_Init+0x350>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <HAL_GPIO_Init+0x350>)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	f47f ae78 	bne.w	8001f24 <HAL_GPIO_Init+0x10>
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	48000400 	.word	0x48000400
 8002250:	48000800 	.word	0x48000800
 8002254:	48000c00 	.word	0x48000c00
 8002258:	48001000 	.word	0x48001000
 800225c:	48001400 	.word	0x48001400
 8002260:	48001800 	.word	0x48001800
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002284:	e002      	b.n	800228c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f806 	bl	80022c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40010400 	.word	0x40010400

080022c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40007000 	.word	0x40007000

080022fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230a:	d130      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002318:	d038      	beq.n	800238c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002322:	4a1e      	ldr	r2, [pc, #120]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002328:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2232      	movs	r2, #50	; 0x32
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9b      	lsrs	r3, r3, #18
 800233c:	3301      	adds	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002340:	e002      	b.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3b01      	subs	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002354:	d102      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f2      	bne.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002368:	d110      	bne.n	800238c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e00f      	b.n	800238e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237a:	d007      	beq.n	800238c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002384:	4a05      	ldr	r2, [pc, #20]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800238a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40007000 	.word	0x40007000
 80023a0:	2000001c 	.word	0x2000001c
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e3ca      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ba:	4b97      	ldr	r3, [pc, #604]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c4:	4b94      	ldr	r3, [pc, #592]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80e4 	beq.w	80025a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4a>
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b0c      	cmp	r3, #12
 80023e6:	f040 808b 	bne.w	8002500 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	f040 8087 	bne.w	8002500 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_RCC_OscConfig+0x62>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e3a2      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	4b82      	ldr	r3, [pc, #520]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <HAL_RCC_OscConfig+0x7c>
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002422:	e005      	b.n	8002430 <HAL_RCC_OscConfig+0x88>
 8002424:	4b7c      	ldr	r3, [pc, #496]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002430:	4293      	cmp	r3, r2
 8002432:	d223      	bcs.n	800247c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fd87 	bl	8002f4c <RCC_SetFlashLatencyFromMSIRange>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e383      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002448:	4b73      	ldr	r3, [pc, #460]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a72      	ldr	r2, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b70      	ldr	r3, [pc, #448]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	496d      	ldr	r1, [pc, #436]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002466:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	4968      	ldr	r1, [pc, #416]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
 800247a:	e025      	b.n	80024c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247c:	4b66      	ldr	r3, [pc, #408]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a65      	ldr	r2, [pc, #404]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002482:	f043 0308 	orr.w	r3, r3, #8
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4960      	ldr	r1, [pc, #384]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249a:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	495b      	ldr	r1, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fd47 	bl	8002f4c <RCC_SetFlashLatencyFromMSIRange>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e343      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c8:	f000 fc4a 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b52      	ldr	r3, [pc, #328]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	4950      	ldr	r1, [pc, #320]	; (800261c <HAL_RCC_OscConfig+0x274>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	4a4e      	ldr	r2, [pc, #312]	; (8002620 <HAL_RCC_OscConfig+0x278>)
 80024e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024e8:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fa51 	bl	8001994 <HAL_InitTick>
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d052      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	e327      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d032      	beq.n	800256e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a42      	ldr	r2, [pc, #264]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002514:	f7ff fb90 	bl	8001c38 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800251c:	f7ff fb8c 	bl	8001c38 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e310      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252e:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a36      	ldr	r2, [pc, #216]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4931      	ldr	r1, [pc, #196]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	492c      	ldr	r1, [pc, #176]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
 800256c:	e01a      	b.n	80025a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a29      	ldr	r2, [pc, #164]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800257a:	f7ff fb5d 	bl	8001c38 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002582:	f7ff fb59 	bl	8001c38 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e2dd      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x1da>
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d074      	beq.n	800269a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x21a>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d10e      	bne.n	80025da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d10b      	bne.n	80025da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d064      	beq.n	8002698 <HAL_RCC_OscConfig+0x2f0>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d160      	bne.n	8002698 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e2ba      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x24a>
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e026      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025fa:	d115      	bne.n	8002628 <HAL_RCC_OscConfig+0x280>
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a05      	ldr	r2, [pc, #20]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a02      	ldr	r2, [pc, #8]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	0800973c 	.word	0x0800973c
 8002620:	2000001c 	.word	0x2000001c
 8002624:	20000020 	.word	0x20000020
 8002628:	4ba0      	ldr	r3, [pc, #640]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a9f      	ldr	r2, [pc, #636]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b9d      	ldr	r3, [pc, #628]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a9c      	ldr	r2, [pc, #624]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff faf6 	bl	8001c38 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff faf2 	bl	8001c38 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e276      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002662:	4b92      	ldr	r3, [pc, #584]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x2a8>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff fae2 	bl	8001c38 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff fade 	bl	8001c38 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e262      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268a:	4b88      	ldr	r3, [pc, #544]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x2d0>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d060      	beq.n	8002768 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_OscConfig+0x310>
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d119      	bne.n	80026e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d116      	bne.n	80026e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b8:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_OscConfig+0x328>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e23f      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b76      	ldr	r3, [pc, #472]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	4973      	ldr	r1, [pc, #460]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e4:	e040      	b.n	8002768 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d023      	beq.n	8002736 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ee:	4b6f      	ldr	r3, [pc, #444]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6e      	ldr	r2, [pc, #440]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7ff fa9d 	bl	8001c38 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002702:	f7ff fa99 	bl	8001c38 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e21d      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002714:	4b65      	ldr	r3, [pc, #404]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b62      	ldr	r3, [pc, #392]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	495f      	ldr	r1, [pc, #380]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
 8002734:	e018      	b.n	8002768 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002736:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5c      	ldr	r2, [pc, #368]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800273c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7ff fa79 	bl	8001c38 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7ff fa75 	bl	8001c38 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1f9      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d03c      	beq.n	80027ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277c:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800277e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002782:	4a4a      	ldr	r2, [pc, #296]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7ff fa54 	bl	8001c38 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002794:	f7ff fa50 	bl	8001c38 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e1d4      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80027a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ef      	beq.n	8002794 <HAL_RCC_OscConfig+0x3ec>
 80027b4:	e01b      	b.n	80027ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80027b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027bc:	4a3b      	ldr	r2, [pc, #236]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7ff fa37 	bl	8001c38 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ce:	f7ff fa33 	bl	8001c38 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1b7      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e0:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80027e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ef      	bne.n	80027ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80a6 	beq.w	8002948 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10d      	bne.n	8002828 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b27      	ldr	r3, [pc, #156]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	4a26      	ldr	r2, [pc, #152]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	6593      	str	r3, [r2, #88]	; 0x58
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002824:	2301      	movs	r3, #1
 8002826:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCC_OscConfig+0x508>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d118      	bne.n	8002866 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_RCC_OscConfig+0x508>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_RCC_OscConfig+0x508>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002840:	f7ff f9fa 	bl	8001c38 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7ff f9f6 	bl	8001c38 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e17a      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_RCC_OscConfig+0x508>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d108      	bne.n	8002880 <HAL_RCC_OscConfig+0x4d8>
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800287e:	e029      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b05      	cmp	r3, #5
 8002886:	d115      	bne.n	80028b4 <HAL_RCC_OscConfig+0x50c>
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	4a03      	ldr	r2, [pc, #12]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40007000 	.word	0x40007000
 80028b4:	4b9c      	ldr	r3, [pc, #624]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	4a9b      	ldr	r2, [pc, #620]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c4:	4b98      	ldr	r3, [pc, #608]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	4a97      	ldr	r2, [pc, #604]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d016      	beq.n	800290a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7ff f9ac 	bl	8001c38 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7ff f9a8 	bl	8001c38 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e12a      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	4b8b      	ldr	r3, [pc, #556]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ed      	beq.n	80028e4 <HAL_RCC_OscConfig+0x53c>
 8002908:	e015      	b.n	8002936 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7ff f995 	bl	8001c38 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7ff f991 	bl	8001c38 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e113      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002928:	4b7f      	ldr	r3, [pc, #508]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ed      	bne.n	8002912 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002936:	7ffb      	ldrb	r3, [r7, #31]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293c:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	4a79      	ldr	r2, [pc, #484]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002946:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80fe 	beq.w	8002b4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	2b02      	cmp	r3, #2
 8002958:	f040 80d0 	bne.w	8002afc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800295c:	4b72      	ldr	r3, [pc, #456]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	429a      	cmp	r2, r3
 800296e:	d130      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	3b01      	subs	r3, #1
 800297c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d127      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d11f      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800299c:	2a07      	cmp	r2, #7
 800299e:	bf14      	ite	ne
 80029a0:	2201      	movne	r2, #1
 80029a2:	2200      	moveq	r2, #0
 80029a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d113      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	3b01      	subs	r3, #1
 80029b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d06e      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	d069      	beq.n	8002aac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029d8:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0ad      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a00:	f7ff f91a 	bl	8001c38 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a08:	f7ff f916 	bl	8001c38 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e09a      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1a:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a26:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <HAL_RCC_OscConfig+0x784>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a36:	3a01      	subs	r2, #1
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a40:	0212      	lsls	r2, r2, #8
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a48:	0852      	lsrs	r2, r2, #1
 8002a4a:	3a01      	subs	r2, #1
 8002a4c:	0552      	lsls	r2, r2, #21
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a54:	0852      	lsrs	r2, r2, #1
 8002a56:	3a01      	subs	r2, #1
 8002a58:	0652      	lsls	r2, r2, #25
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a60:	0912      	lsrs	r2, r2, #4
 8002a62:	0452      	lsls	r2, r2, #17
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4930      	ldr	r1, [pc, #192]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a84:	f7ff f8d8 	bl	8001c38 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7ff f8d4 	bl	8001c38 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e058      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aaa:	e050      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e04f      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d148      	bne.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ad4:	f7ff f8b0 	bl	8001c38 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7ff f8ac 	bl	8001c38 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e030      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x734>
 8002afa:	e028      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d023      	beq.n	8002b4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7ff f893 	bl	8001c38 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b14:	e00c      	b.n	8002b30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7ff f88f 	bl	8001c38 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d905      	bls.n	8002b30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e013      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_OscConfig+0x7b0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ec      	bne.n	8002b16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_OscConfig+0x7b0>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	4905      	ldr	r1, [pc, #20]	; (8002b58 <HAL_RCC_OscConfig+0x7b0>)
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_RCC_OscConfig+0x7b4>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	60cb      	str	r3, [r1, #12]
 8002b48:	e001      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	feeefffc 	.word	0xfeeefffc

08002b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0e7      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b75      	ldr	r3, [pc, #468]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d910      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b72      	ldr	r3, [pc, #456]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 0207 	bic.w	r2, r3, #7
 8002b8a:	4970      	ldr	r1, [pc, #448]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b6e      	ldr	r3, [pc, #440]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0cf      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d908      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4960      	ldr	r1, [pc, #384]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d04c      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be6:	4b5a      	ldr	r3, [pc, #360]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d121      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0a6      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfe:	4b54      	ldr	r3, [pc, #336]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d115      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e09a      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c16:	4b4e      	ldr	r3, [pc, #312]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e08e      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e086      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	4b46      	ldr	r3, [pc, #280]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4943      	ldr	r1, [pc, #268]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c48:	f7fe fff6 	bl	8001c38 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fe fff2 	bl	8001c38 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e06e      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d208      	bcs.n	8002ca6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	492b      	ldr	r1, [pc, #172]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d210      	bcs.n	8002cd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 0207 	bic.w	r2, r3, #7
 8002cbc:	4923      	ldr	r1, [pc, #140]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc4:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e036      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	4918      	ldr	r1, [pc, #96]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4910      	ldr	r1, [pc, #64]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d14:	f000 f824 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	490b      	ldr	r1, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1f4>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1f8>)
 8002d32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1fc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fe2b 	bl	8001994 <HAL_InitTick>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d42:	7afb      	ldrb	r3, [r7, #11]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	40021000 	.word	0x40021000
 8002d54:	0800973c 	.word	0x0800973c
 8002d58:	2000001c 	.word	0x2000001c
 8002d5c:	20000020 	.word	0x20000020

08002d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d78:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x34>
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d121      	bne.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d11e      	bne.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e005      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d102      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e004      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d134      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dee:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d003      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0xac>
 8002e04:	e005      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e08:	617b      	str	r3, [r7, #20]
      break;
 8002e0a:	e005      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e0e:	617b      	str	r3, [r7, #20]
      break;
 8002e10:	e002      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	617b      	str	r3, [r7, #20]
      break;
 8002e16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	3301      	adds	r3, #1
 8002e24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	fb03 f202 	mul.w	r2, r3, r2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	0e5b      	lsrs	r3, r3, #25
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e58:	69bb      	ldr	r3, [r7, #24]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08009754 	.word	0x08009754
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	2000001c 	.word	0x2000001c

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e94:	f7ff fff0 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	0800974c 	.word	0x0800974c

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ec0:	f7ff ffda 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0adb      	lsrs	r3, r3, #11
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4904      	ldr	r1, [pc, #16]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	0800974c 	.word	0x0800974c

08002ee8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0203 	and.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	08db      	lsrs	r3, r3, #3
 8002f22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_RCC_GetClockConfig+0x60>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0207 	and.w	r2, r3, #7
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	601a      	str	r2, [r3, #0]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40022000 	.word	0x40022000

08002f4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f58:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f64:	f7ff f9bc 	bl	80022e0 <HAL_PWREx_GetVoltageRange>
 8002f68:	6178      	str	r0, [r7, #20]
 8002f6a:	e014      	b.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	4a24      	ldr	r2, [pc, #144]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6593      	str	r3, [r2, #88]	; 0x58
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f84:	f7ff f9ac 	bl	80022e0 <HAL_PWREx_GetVoltageRange>
 8002f88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f9c:	d10b      	bne.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d919      	bls.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fa8:	d902      	bls.n	8002fb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002faa:	2302      	movs	r3, #2
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	e013      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e010      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d902      	bls.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e00a      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b80      	cmp	r3, #128	; 0x80
 8002fc6:	d102      	bne.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fc8:	2302      	movs	r3, #2
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	e004      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b70      	cmp	r3, #112	; 0x70
 8002fd2:	d101      	bne.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 0207 	bic.w	r2, r3, #7
 8002fe0:	4909      	ldr	r1, [pc, #36]	; (8003008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fe8:	4b07      	ldr	r3, [pc, #28]	; (8003008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	40022000 	.word	0x40022000

0800300c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003014:	2300      	movs	r3, #0
 8003016:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003018:	2300      	movs	r3, #0
 800301a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003024:	2b00      	cmp	r3, #0
 8003026:	d041      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800302c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003030:	d02a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003032:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003036:	d824      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003038:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800303c:	d008      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800303e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003042:	d81e      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304c:	d010      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800304e:	e018      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003050:	4b86      	ldr	r3, [pc, #536]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a85      	ldr	r2, [pc, #532]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800305c:	e015      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fabb 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800306e:	e00c      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3320      	adds	r3, #32
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fba6 	bl	80037c8 <RCCEx_PLLSAI2_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003080:	e003      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	74fb      	strb	r3, [r7, #19]
      break;
 8003086:	e000      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003090:	4b76      	ldr	r3, [pc, #472]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309e:	4973      	ldr	r1, [pc, #460]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030a6:	e001      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d041      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030c0:	d02a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030c6:	d824      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030cc:	d008      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030d2:	d81e      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030dc:	d010      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030de:	e018      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030e0:	4b62      	ldr	r3, [pc, #392]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a61      	ldr	r2, [pc, #388]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ec:	e015      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fa73 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030fe:	e00c      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3320      	adds	r3, #32
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fb5e 	bl	80037c8 <RCCEx_PLLSAI2_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003110:	e003      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	74fb      	strb	r3, [r7, #19]
      break;
 8003116:	e000      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003120:	4b52      	ldr	r3, [pc, #328]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800312e:	494f      	ldr	r1, [pc, #316]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003136:	e001      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a0 	beq.w	800328a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	4a40      	ldr	r2, [pc, #256]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	6593      	str	r3, [r2, #88]	; 0x58
 8003170:	4b3e      	ldr	r3, [pc, #248]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317c:	2301      	movs	r3, #1
 800317e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003180:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a3a      	ldr	r2, [pc, #232]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800318c:	f7fe fd54 	bl	8001c38 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003192:	e009      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003194:	f7fe fd50 	bl	8001c38 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d902      	bls.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	74fb      	strb	r3, [r7, #19]
        break;
 80031a6:	e005      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031a8:	4b31      	ldr	r3, [pc, #196]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ef      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d15c      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031ba:	4b2c      	ldr	r3, [pc, #176]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01f      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d019      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031d8:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	4a20      	ldr	r2, [pc, #128]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003204:	4a19      	ldr	r2, [pc, #100]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d016      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe fd0f 	bl	8001c38 <HAL_GetTick>
 800321a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321c:	e00b      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fe fd0b 	bl	8001c38 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f241 3288 	movw	r2, #5000	; 0x1388
 800322c:	4293      	cmp	r3, r2
 800322e:	d902      	bls.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	74fb      	strb	r3, [r7, #19]
            break;
 8003234:	e006      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ec      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325a:	4904      	ldr	r1, [pc, #16]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003262:	e009      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	74bb      	strb	r3, [r7, #18]
 8003268:	e006      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003278:	7c7b      	ldrb	r3, [r7, #17]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d105      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327e:	4b9e      	ldr	r3, [pc, #632]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	4a9d      	ldr	r2, [pc, #628]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003288:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003296:	4b98      	ldr	r3, [pc, #608]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f023 0203 	bic.w	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	4994      	ldr	r1, [pc, #592]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032b8:	4b8f      	ldr	r3, [pc, #572]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	f023 020c 	bic.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	498c      	ldr	r1, [pc, #560]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032da:	4b87      	ldr	r3, [pc, #540]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	4983      	ldr	r1, [pc, #524]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032fc:	4b7e      	ldr	r3, [pc, #504]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	497b      	ldr	r1, [pc, #492]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800331e:	4b76      	ldr	r3, [pc, #472]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332c:	4972      	ldr	r1, [pc, #456]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003340:	4b6d      	ldr	r3, [pc, #436]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	496a      	ldr	r1, [pc, #424]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003362:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	4961      	ldr	r1, [pc, #388]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003384:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003392:	4959      	ldr	r1, [pc, #356]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a6:	4b54      	ldr	r3, [pc, #336]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	4950      	ldr	r1, [pc, #320]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033c8:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	4948      	ldr	r1, [pc, #288]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033ea:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	493f      	ldr	r1, [pc, #252]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d028      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341a:	4937      	ldr	r1, [pc, #220]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800342a:	d106      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800342c:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003436:	60d3      	str	r3, [r2, #12]
 8003438:	e011      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003442:	d10c      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f8c8 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d028      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	491f      	ldr	r1, [pc, #124]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003488:	d106      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003494:	60d3      	str	r3, [r2, #12]
 8003496:	e011      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f899 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02b      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	4908      	ldr	r1, [pc, #32]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e6:	d109      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a02      	ldr	r2, [pc, #8]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
 80034f4:	e014      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003504:	d10c      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f867 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d02f      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353a:	4928      	ldr	r1, [pc, #160]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800354a:	d10d      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	2102      	movs	r1, #2
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f844 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d014      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003562:	7cfb      	ldrb	r3, [r7, #19]
 8003564:	74bb      	strb	r3, [r7, #18]
 8003566:	e011      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003570:	d10c      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3320      	adds	r3, #32
 8003576:	2102      	movs	r1, #2
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f925 	bl	80037c8 <RCCEx_PLLSAI2_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a6:	490d      	ldr	r1, [pc, #52]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ca:	4904      	ldr	r1, [pc, #16]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000

080035e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ee:	4b75      	ldr	r3, [pc, #468]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d018      	beq.n	800362c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035fa:	4b72      	ldr	r3, [pc, #456]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0203 	and.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d10d      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
       ||
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003612:	4b6c      	ldr	r3, [pc, #432]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
       ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d047      	beq.n	80036b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
 800362a:	e044      	b.n	80036b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d018      	beq.n	8003666 <RCCEx_PLLSAI1_Config+0x86>
 8003634:	2b03      	cmp	r3, #3
 8003636:	d825      	bhi.n	8003684 <RCCEx_PLLSAI1_Config+0xa4>
 8003638:	2b01      	cmp	r3, #1
 800363a:	d002      	beq.n	8003642 <RCCEx_PLLSAI1_Config+0x62>
 800363c:	2b02      	cmp	r3, #2
 800363e:	d009      	beq.n	8003654 <RCCEx_PLLSAI1_Config+0x74>
 8003640:	e020      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003642:	4b60      	ldr	r3, [pc, #384]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d11d      	bne.n	800368a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003652:	e01a      	b.n	800368a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003654:	4b5b      	ldr	r3, [pc, #364]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d116      	bne.n	800368e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003664:	e013      	b.n	800368e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003666:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003672:	4b54      	ldr	r3, [pc, #336]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003682:	e006      	b.n	8003692 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e004      	b.n	8003694 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800368a:	bf00      	nop
 800368c:	e002      	b.n	8003694 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800368e:	bf00      	nop
 8003690:	e000      	b.n	8003694 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003692:	bf00      	nop
    }

    if(status == HAL_OK)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10d      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800369a:	4b4a      	ldr	r3, [pc, #296]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	430b      	orrs	r3, r1
 80036b0:	4944      	ldr	r1, [pc, #272]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d17d      	bne.n	80037b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036bc:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fe fab6 	bl	8001c38 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ce:	e009      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036d0:	f7fe fab2 	bl	8001c38 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d902      	bls.n	80036e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	73fb      	strb	r3, [r7, #15]
        break;
 80036e2:	e005      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036e4:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ef      	bne.n	80036d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d160      	bne.n	80037b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d111      	bne.n	8003720 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fc:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6892      	ldr	r2, [r2, #8]
 800370c:	0211      	lsls	r1, r2, #8
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68d2      	ldr	r2, [r2, #12]
 8003712:	0912      	lsrs	r2, r2, #4
 8003714:	0452      	lsls	r2, r2, #17
 8003716:	430a      	orrs	r2, r1
 8003718:	492a      	ldr	r1, [pc, #168]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]
 800371e:	e027      	b.n	8003770 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d112      	bne.n	800374c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003726:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800372e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6892      	ldr	r2, [r2, #8]
 8003736:	0211      	lsls	r1, r2, #8
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6912      	ldr	r2, [r2, #16]
 800373c:	0852      	lsrs	r2, r2, #1
 800373e:	3a01      	subs	r2, #1
 8003740:	0552      	lsls	r2, r2, #21
 8003742:	430a      	orrs	r2, r1
 8003744:	491f      	ldr	r1, [pc, #124]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	610b      	str	r3, [r1, #16]
 800374a:	e011      	b.n	8003770 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6892      	ldr	r2, [r2, #8]
 800375c:	0211      	lsls	r1, r2, #8
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6952      	ldr	r2, [r2, #20]
 8003762:	0852      	lsrs	r2, r2, #1
 8003764:	3a01      	subs	r2, #1
 8003766:	0652      	lsls	r2, r2, #25
 8003768:	430a      	orrs	r2, r1
 800376a:	4916      	ldr	r1, [pc, #88]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003770:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a13      	ldr	r2, [pc, #76]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003776:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800377a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fe fa5c 	bl	8001c38 <HAL_GetTick>
 8003780:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003782:	e009      	b.n	8003798 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003784:	f7fe fa58 	bl	8001c38 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d902      	bls.n	8003798 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	73fb      	strb	r3, [r7, #15]
          break;
 8003796:	e005      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ef      	beq.n	8003784 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	4904      	ldr	r1, [pc, #16]	; (80037c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000

080037c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037d6:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037e2:	4b67      	ldr	r3, [pc, #412]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0203 	and.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d10d      	bne.n	800380e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
       ||
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037fa:	4b61      	ldr	r3, [pc, #388]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
       ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d047      	beq.n	800389e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	e044      	b.n	800389e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d018      	beq.n	800384e <RCCEx_PLLSAI2_Config+0x86>
 800381c:	2b03      	cmp	r3, #3
 800381e:	d825      	bhi.n	800386c <RCCEx_PLLSAI2_Config+0xa4>
 8003820:	2b01      	cmp	r3, #1
 8003822:	d002      	beq.n	800382a <RCCEx_PLLSAI2_Config+0x62>
 8003824:	2b02      	cmp	r3, #2
 8003826:	d009      	beq.n	800383c <RCCEx_PLLSAI2_Config+0x74>
 8003828:	e020      	b.n	800386c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800382a:	4b55      	ldr	r3, [pc, #340]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d11d      	bne.n	8003872 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383a:	e01a      	b.n	8003872 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800383c:	4b50      	ldr	r3, [pc, #320]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d116      	bne.n	8003876 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384c:	e013      	b.n	8003876 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800384e:	4b4c      	ldr	r3, [pc, #304]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800385a:	4b49      	ldr	r3, [pc, #292]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800386a:	e006      	b.n	800387a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	e004      	b.n	800387c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800387a:	bf00      	nop
    }

    if(status == HAL_OK)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003882:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	430b      	orrs	r3, r1
 8003898:	4939      	ldr	r1, [pc, #228]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d167      	bne.n	8003974 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a35      	ldr	r2, [pc, #212]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b0:	f7fe f9c2 	bl	8001c38 <HAL_GetTick>
 80038b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038b6:	e009      	b.n	80038cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038b8:	f7fe f9be 	bl	8001c38 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d902      	bls.n	80038cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	73fb      	strb	r3, [r7, #15]
        break;
 80038ca:	e005      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038cc:	4b2c      	ldr	r3, [pc, #176]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ef      	bne.n	80038b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d14a      	bne.n	8003974 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d111      	bne.n	8003908 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038e4:	4b26      	ldr	r3, [pc, #152]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6892      	ldr	r2, [r2, #8]
 80038f4:	0211      	lsls	r1, r2, #8
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68d2      	ldr	r2, [r2, #12]
 80038fa:	0912      	lsrs	r2, r2, #4
 80038fc:	0452      	lsls	r2, r2, #17
 80038fe:	430a      	orrs	r2, r1
 8003900:	491f      	ldr	r1, [pc, #124]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	614b      	str	r3, [r1, #20]
 8003906:	e011      	b.n	800392c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003910:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	0211      	lsls	r1, r2, #8
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6912      	ldr	r2, [r2, #16]
 800391e:	0852      	lsrs	r2, r2, #1
 8003920:	3a01      	subs	r2, #1
 8003922:	0652      	lsls	r2, r2, #25
 8003924:	430a      	orrs	r2, r1
 8003926:	4916      	ldr	r1, [pc, #88]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a13      	ldr	r2, [pc, #76]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003936:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fe f97e 	bl	8001c38 <HAL_GetTick>
 800393c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800393e:	e009      	b.n	8003954 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003940:	f7fe f97a 	bl	8001c38 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d902      	bls.n	8003954 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	73fb      	strb	r3, [r7, #15]
          break;
 8003952:	e005      	b.n	8003960 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ef      	beq.n	8003940 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4904      	ldr	r1, [pc, #16]	; (8003980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003970:	4313      	orrs	r3, r2
 8003972:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000

08003984 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d06c      	beq.n	8003a70 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd ff5c 	bl	8001868 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	22ca      	movs	r2, #202	; 0xca
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2253      	movs	r2, #83	; 0x53
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fa49 	bl	8003e60 <RTC_EnterInitMode>
 80039ce:	4603      	mov	r3, r0
 80039d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d14b      	bne.n	8003a70 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80039e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ea:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6899      	ldr	r1, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	041a      	lsls	r2, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fa4d 	bl	8003ec8 <RTC_ExitInitMode>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d11b      	bne.n	8003a70 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0203 	bic.w	r2, r2, #3
 8003a46:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	22ff      	movs	r2, #255	; 0xff
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a7a:	b590      	push	{r4, r7, lr}
 8003a7c:	b087      	sub	sp, #28
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_RTC_SetTime+0x1a>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e08b      	b.n	8003bac <HAL_RTC_SetTime+0x132>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	22ca      	movs	r2, #202	; 0xca
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2253      	movs	r2, #83	; 0x53
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f9d3 	bl	8003e60 <RTC_EnterInitMode>
 8003aba:	4603      	mov	r3, r0
 8003abc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d163      	bne.n	8003b8c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d126      	bne.n	8003b18 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d102      	bne.n	8003ade <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2200      	movs	r2, #0
 8003adc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fa2e 	bl	8003f44 <RTC_ByteToBcd2>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fa27 	bl	8003f44 <RTC_ByteToBcd2>
 8003af6:	4603      	mov	r3, r0
 8003af8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003afa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	789b      	ldrb	r3, [r3, #2]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fa1f 	bl	8003f44 <RTC_ByteToBcd2>
 8003b06:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b08:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	78db      	ldrb	r3, [r3, #3]
 8003b10:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e018      	b.n	8003b4a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	785b      	ldrb	r3, [r3, #1]
 8003b36:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b38:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b3e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	78db      	ldrb	r3, [r3, #3]
 8003b44:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003b54:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b58:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f9a0 	bl	8003ec8 <RTC_ExitInitMode>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	22ff      	movs	r2, #255	; 0xff
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd90      	pop	{r4, r7, pc}

08003bb4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003be2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003be6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	0c1b      	lsrs	r3, r3, #16
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	0d9b      	lsrs	r3, r3, #22
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d11a      	bne.n	8003c62 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f9a7 	bl	8003f84 <RTC_Bcd2ToByte>
 8003c36:	4603      	mov	r3, r0
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f99e 	bl	8003f84 <RTC_Bcd2ToByte>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	789b      	ldrb	r3, [r3, #2]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 f995 	bl	8003f84 <RTC_Bcd2ToByte>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_RTC_SetDate+0x1a>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e075      	b.n	8003d72 <HAL_RTC_SetDate+0x106>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2202      	movs	r2, #2
 8003c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10e      	bne.n	8003cba <HAL_RTC_SetDate+0x4e>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	f023 0310 	bic.w	r3, r3, #16
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	330a      	adds	r3, #10
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11c      	bne.n	8003cfa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 f93d 	bl	8003f44 <RTC_ByteToBcd2>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	785b      	ldrb	r3, [r3, #1]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f936 	bl	8003f44 <RTC_ByteToBcd2>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003cdc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	789b      	ldrb	r3, [r3, #2]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f92e 	bl	8003f44 <RTC_ByteToBcd2>
 8003ce8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003cea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e00e      	b.n	8003d18 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	78db      	ldrb	r3, [r3, #3]
 8003cfe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	785b      	ldrb	r3, [r3, #1]
 8003d04:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d06:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003d0c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	22ca      	movs	r2, #202	; 0xca
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2253      	movs	r2, #83	; 0x53
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f899 	bl	8003e60 <RTC_EnterInitMode>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10c      	bne.n	8003d52 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d46:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f8bd 	bl	8003ec8 <RTC_ExitInitMode>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	22ff      	movs	r2, #255	; 0xff
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}

08003d7a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d94:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	0c1b      	lsrs	r3, r3, #16
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	0b5b      	lsrs	r3, r3, #13
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11a      	bne.n	8003e0a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	78db      	ldrb	r3, [r3, #3]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f8d3 	bl	8003f84 <RTC_Bcd2ToByte>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f8ca 	bl	8003f84 <RTC_Bcd2ToByte>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	789b      	ldrb	r3, [r3, #2]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f8c1 	bl	8003f84 <RTC_Bcd2ToByte>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e2a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003e2c:	f7fd ff04 	bl	8001c38 <HAL_GetTick>
 8003e30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e32:	e009      	b.n	8003e48 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e34:	f7fd ff00 	bl	8001c38 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e42:	d901      	bls.n	8003e48 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e007      	b.n	8003e58 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ee      	beq.n	8003e34 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d120      	bne.n	8003ebc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e84:	f7fd fed8 	bl	8001c38 <HAL_GetTick>
 8003e88:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e8a:	e00d      	b.n	8003ea8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e8c:	f7fd fed4 	bl	8001c38 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e9a:	d905      	bls.n	8003ea8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <RTC_EnterInitMode+0x5c>
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d1e7      	bne.n	8003e8c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <RTC_ExitInitMode+0x78>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <RTC_ExitInitMode+0x78>)
 8003eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ede:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <RTC_ExitInitMode+0x78>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10c      	bne.n	8003f06 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff91 	bl	8003e14 <HAL_RTC_WaitForSynchro>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01e      	beq.n	8003f36 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2203      	movs	r2, #3
 8003efc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	73fb      	strb	r3, [r7, #15]
 8003f04:	e017      	b.n	8003f36 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <RTC_ExitInitMode+0x78>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	4a0d      	ldr	r2, [pc, #52]	; (8003f40 <RTC_ExitInitMode+0x78>)
 8003f0c:	f023 0320 	bic.w	r3, r3, #32
 8003f10:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff ff7e 	bl	8003e14 <HAL_RTC_WaitForSynchro>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2203      	movs	r2, #3
 8003f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003f2a:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <RTC_ExitInitMode+0x78>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <RTC_ExitInitMode+0x78>)
 8003f30:	f043 0320 	orr.w	r3, r3, #32
 8003f34:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40002800 	.word	0x40002800

08003f44 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003f56:	e005      	b.n	8003f64 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003f5e:	7afb      	ldrb	r3, [r7, #11]
 8003f60:	3b0a      	subs	r3, #10
 8003f62:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	2b09      	cmp	r3, #9
 8003f68:	d8f6      	bhi.n	8003f58 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	7afb      	ldrb	r3, [r7, #11]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	b2db      	uxtb	r3, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	0092      	lsls	r2, r2, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	4413      	add	r3, r2
 8003faa:	b2db      	uxtb	r3, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e049      	b.n	800405e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f841 	bl	8004066 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f000 f9f8 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d001      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e04f      	b.n	8004134 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a23      	ldr	r2, [pc, #140]	; (8004140 <HAL_TIM_Base_Start_IT+0xc4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01d      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d018      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <HAL_TIM_Base_Start_IT+0xc8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_TIM_Base_Start_IT+0xcc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1c      	ldr	r2, [pc, #112]	; (800414c <HAL_TIM_Base_Start_IT+0xd0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <HAL_TIM_Base_Start_IT+0xd4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d115      	bne.n	800411e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <HAL_TIM_Base_Start_IT+0xdc>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d015      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0xb4>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d011      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411c:	e008      	b.n	8004130 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e000      	b.n	8004132 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40013400 	.word	0x40013400
 8004154:	40014000 	.word	0x40014000
 8004158:	00010007 	.word	0x00010007

0800415c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b02      	cmp	r3, #2
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0202 	mvn.w	r2, #2
 8004188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f905 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8f7 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f908 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0204 	mvn.w	r2, #4
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8db 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8cd 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f8de 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b08      	cmp	r3, #8
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b08      	cmp	r3, #8
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0208 	mvn.w	r2, #8
 8004230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2204      	movs	r2, #4
 8004236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8b1 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8a3 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f8b4 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b10      	cmp	r3, #16
 800426c:	d122      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d11b      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0210 	mvn.w	r2, #16
 8004284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2208      	movs	r2, #8
 800428a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f887 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f879 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f88a 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0201 	mvn.w	r2, #1
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fd f9c2 	bl	8001664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b80      	cmp	r3, #128	; 0x80
 80042ec:	d10e      	bne.n	800430c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d107      	bne.n	800430c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f914 	bl	8004534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431a:	d10e      	bne.n	800433a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d107      	bne.n	800433a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f907 	bl	8004548 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d10e      	bne.n	8004366 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d107      	bne.n	8004366 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800435e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f838 	bl	80043d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b20      	cmp	r3, #32
 8004372:	d10e      	bne.n	8004392 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b20      	cmp	r3, #32
 8004380:	d107      	bne.n	8004392 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f06f 0220 	mvn.w	r2, #32
 800438a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f8c7 	bl	8004520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a40      	ldr	r2, [pc, #256]	; (8004500 <TIM_Base_SetConfig+0x114>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d00f      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3d      	ldr	r2, [pc, #244]	; (8004504 <TIM_Base_SetConfig+0x118>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00b      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <TIM_Base_SetConfig+0x11c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a3b      	ldr	r2, [pc, #236]	; (800450c <TIM_Base_SetConfig+0x120>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a3a      	ldr	r2, [pc, #232]	; (8004510 <TIM_Base_SetConfig+0x124>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <TIM_Base_SetConfig+0x114>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01f      	beq.n	8004486 <TIM_Base_SetConfig+0x9a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d01b      	beq.n	8004486 <TIM_Base_SetConfig+0x9a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <TIM_Base_SetConfig+0x118>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d017      	beq.n	8004486 <TIM_Base_SetConfig+0x9a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a2b      	ldr	r2, [pc, #172]	; (8004508 <TIM_Base_SetConfig+0x11c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <TIM_Base_SetConfig+0x9a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a2a      	ldr	r2, [pc, #168]	; (800450c <TIM_Base_SetConfig+0x120>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00f      	beq.n	8004486 <TIM_Base_SetConfig+0x9a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a29      	ldr	r2, [pc, #164]	; (8004510 <TIM_Base_SetConfig+0x124>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_Base_SetConfig+0x9a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a28      	ldr	r2, [pc, #160]	; (8004514 <TIM_Base_SetConfig+0x128>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_Base_SetConfig+0x9a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a27      	ldr	r2, [pc, #156]	; (8004518 <TIM_Base_SetConfig+0x12c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_Base_SetConfig+0x9a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a26      	ldr	r2, [pc, #152]	; (800451c <TIM_Base_SetConfig+0x130>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a10      	ldr	r2, [pc, #64]	; (8004500 <TIM_Base_SetConfig+0x114>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00f      	beq.n	80044e4 <TIM_Base_SetConfig+0xf8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <TIM_Base_SetConfig+0x124>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <TIM_Base_SetConfig+0xf8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a11      	ldr	r2, [pc, #68]	; (8004514 <TIM_Base_SetConfig+0x128>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d007      	beq.n	80044e4 <TIM_Base_SetConfig+0xf8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a10      	ldr	r2, [pc, #64]	; (8004518 <TIM_Base_SetConfig+0x12c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_Base_SetConfig+0xf8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a0f      	ldr	r2, [pc, #60]	; (800451c <TIM_Base_SetConfig+0x130>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	615a      	str	r2, [r3, #20]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40014000 	.word	0x40014000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800

08004520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e040      	b.n	80045f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fd f9a4 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	; 0x24
 8004588:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fc18 	bl	8004dd0 <UART_SetConfig>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e022      	b.n	80045f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fec4 	bl	8005340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 ff4b 	bl	8005484 <UART_CheckIdleState>
 80045ee:	4603      	mov	r3, r0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460c:	2b20      	cmp	r3, #32
 800460e:	f040 8082 	bne.w	8004716 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_UART_Transmit+0x26>
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07a      	b.n	8004718 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_UART_Transmit+0x38>
 800462c:	2302      	movs	r3, #2
 800462e:	e073      	b.n	8004718 <HAL_UART_Transmit+0x120>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2221      	movs	r2, #33	; 0x21
 8004644:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004646:	f7fd faf7 	bl	8001c38 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	88fa      	ldrh	r2, [r7, #6]
 8004650:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	d108      	bne.n	8004678 <HAL_UART_Transmit+0x80>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e003      	b.n	8004680 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004688:	e02d      	b.n	80046e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2200      	movs	r2, #0
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 ff3e 	bl	8005516 <UART_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e039      	b.n	8004718 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	881a      	ldrh	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b6:	b292      	uxth	r2, r2
 80046b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	3302      	adds	r3, #2
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e008      	b.n	80046d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b292      	uxth	r2, r2
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1cb      	bne.n	800468a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2140      	movs	r1, #64	; 0x40
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 ff0a 	bl	8005516 <UART_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e005      	b.n	8004718 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004716:	2302      	movs	r3, #2
  }
}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	; 0x28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004732:	2b20      	cmp	r3, #32
 8004734:	d142      	bne.n	80047bc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <HAL_UART_Receive_IT+0x22>
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e03b      	b.n	80047be <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_UART_Receive_IT+0x34>
 8004750:	2302      	movs	r3, #2
 8004752:	e034      	b.n	80047be <HAL_UART_Receive_IT+0x9e>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_UART_Receive_IT+0xa8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d01f      	beq.n	80047ac <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	e853 3f00 	ldrex	r3, [r3]
 8004786:	613b      	str	r3, [r7, #16]
   return(result);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	69f9      	ldr	r1, [r7, #28]
 800479e:	6a3a      	ldr	r2, [r7, #32]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e6      	bne.n	800477a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	461a      	mov	r2, r3
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 ff74 	bl	80056a0 <UART_Start_Receive_IT>
 80047b8:	4603      	mov	r3, r0
 80047ba:	e000      	b.n	80047be <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3728      	adds	r7, #40	; 0x28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40008000 	.word	0x40008000

080047cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b0ba      	sub	sp, #232	; 0xe8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80047fa:	4013      	ands	r3, r2
 80047fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d115      	bne.n	8004834 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00f      	beq.n	8004834 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 82a6 	beq.w	8004d76 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
      }
      return;
 8004832:	e2a0      	b.n	8004d76 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8117 	beq.w	8004a6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800483e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800484a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800484e:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <HAL_UART_IRQHandler+0x298>)
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 810a 	beq.w	8004a6c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d011      	beq.n	8004888 <HAL_UART_IRQHandler+0xbc>
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487e:	f043 0201 	orr.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d011      	beq.n	80048b8 <HAL_UART_IRQHandler+0xec>
 8004894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2202      	movs	r2, #2
 80048a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ae:	f043 0204 	orr.w	r2, r3, #4
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d011      	beq.n	80048e8 <HAL_UART_IRQHandler+0x11c>
 80048c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2204      	movs	r2, #4
 80048d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048de:	f043 0202 	orr.w	r2, r3, #2
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d017      	beq.n	8004924 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d105      	bne.n	800490c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004904:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2208      	movs	r2, #8
 8004912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800491a:	f043 0208 	orr.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492c:	2b00      	cmp	r3, #0
 800492e:	d012      	beq.n	8004956 <HAL_UART_IRQHandler+0x18a>
 8004930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00c      	beq.n	8004956 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 820c 	beq.w	8004d7a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800496e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d005      	beq.n	80049ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d04f      	beq.n	8004a4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 ff40 	bl	8005834 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d141      	bne.n	8004a46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1d9      	bne.n	80049c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d013      	beq.n	8004a3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <HAL_UART_IRQHandler+0x29c>)
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fd fa34 	bl	8001e90 <HAL_DMA_Abort_IT>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d017      	beq.n	8004a5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	e00f      	b.n	8004a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9b0 	bl	8004da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	e00b      	b.n	8004a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9ac 	bl	8004da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	e007      	b.n	8004a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9a8 	bl	8004da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004a5c:	e18d      	b.n	8004d7a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5e:	bf00      	nop
    return;
 8004a60:	e18b      	b.n	8004d7a <HAL_UART_IRQHandler+0x5ae>
 8004a62:	bf00      	nop
 8004a64:	04000120 	.word	0x04000120
 8004a68:	080058fb 	.word	0x080058fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f040 8146 	bne.w	8004d02 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 813f 	beq.w	8004d02 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8138 	beq.w	8004d02 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2210      	movs	r2, #16
 8004a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	f040 80b4 	bne.w	8004c12 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ab6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 815f 	beq.w	8004d7e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aca:	429a      	cmp	r2, r3
 8004acc:	f080 8157 	bcs.w	8004d7e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 8085 	bne.w	8004bf6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1da      	bne.n	8004aec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e1      	bne.n	8004b36 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e3      	bne.n	8004b72 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc6:	f023 0310 	bic.w	r3, r3, #16
 8004bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e4      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fd f90f 	bl	8001e14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8d4 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c10:	e0b5      	b.n	8004d7e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80a7 	beq.w	8004d82 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80a2 	beq.w	8004d82 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c60:	647b      	str	r3, [r7, #68]	; 0x44
 8004c62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e4      	bne.n	8004c3e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	623b      	str	r3, [r7, #32]
   return(result);
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3308      	adds	r3, #8
 8004c94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c98:	633a      	str	r2, [r7, #48]	; 0x30
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e3      	bne.n	8004c74 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0310 	bic.w	r3, r3, #16
 8004cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	69b9      	ldr	r1, [r7, #24]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	617b      	str	r3, [r7, #20]
   return(result);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e4      	bne.n	8004cbe <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f85c 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d00:	e03f      	b.n	8004d82 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00e      	beq.n	8004d2c <HAL_UART_IRQHandler+0x560>
 8004d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d008      	beq.n	8004d2c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 ff88 	bl	8005c3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d2a:	e02d      	b.n	8004d88 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00e      	beq.n	8004d56 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01c      	beq.n	8004d86 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
    }
    return;
 8004d54:	e017      	b.n	8004d86 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d012      	beq.n	8004d88 <HAL_UART_IRQHandler+0x5bc>
 8004d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fdd9 	bl	8005926 <UART_EndTransmit_IT>
    return;
 8004d74:	e008      	b.n	8004d88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004d76:	bf00      	nop
 8004d78:	e006      	b.n	8004d88 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004d7a:	bf00      	nop
 8004d7c:	e004      	b.n	8004d88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004d7e:	bf00      	nop
 8004d80:	e002      	b.n	8004d88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004d86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d88:	37e8      	adds	r7, #232	; 0xe8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop

08004d90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b08a      	sub	sp, #40	; 0x28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4ba4      	ldr	r3, [pc, #656]	; (8005090 <UART_SetConfig+0x2c0>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a99      	ldr	r2, [pc, #612]	; (8005094 <UART_SetConfig+0x2c4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a90      	ldr	r2, [pc, #576]	; (8005098 <UART_SetConfig+0x2c8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d126      	bne.n	8004ea8 <UART_SetConfig+0xd8>
 8004e5a:	4b90      	ldr	r3, [pc, #576]	; (800509c <UART_SetConfig+0x2cc>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d81b      	bhi.n	8004ea0 <UART_SetConfig+0xd0>
 8004e68:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <UART_SetConfig+0xa0>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004e81 	.word	0x08004e81
 8004e74:	08004e91 	.word	0x08004e91
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004e99 	.word	0x08004e99
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e86:	e116      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8e:	e112      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004e90:	2304      	movs	r3, #4
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e96:	e10e      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9e:	e10a      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea6:	e106      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a7c      	ldr	r2, [pc, #496]	; (80050a0 <UART_SetConfig+0x2d0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d138      	bne.n	8004f24 <UART_SetConfig+0x154>
 8004eb2:	4b7a      	ldr	r3, [pc, #488]	; (800509c <UART_SetConfig+0x2cc>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	f003 030c 	and.w	r3, r3, #12
 8004ebc:	2b0c      	cmp	r3, #12
 8004ebe:	d82d      	bhi.n	8004f1c <UART_SetConfig+0x14c>
 8004ec0:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <UART_SetConfig+0xf8>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004efd 	.word	0x08004efd
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	08004f1d 	.word	0x08004f1d
 8004ed4:	08004f1d 	.word	0x08004f1d
 8004ed8:	08004f0d 	.word	0x08004f0d
 8004edc:	08004f1d 	.word	0x08004f1d
 8004ee0:	08004f1d 	.word	0x08004f1d
 8004ee4:	08004f1d 	.word	0x08004f1d
 8004ee8:	08004f05 	.word	0x08004f05
 8004eec:	08004f1d 	.word	0x08004f1d
 8004ef0:	08004f1d 	.word	0x08004f1d
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	08004f15 	.word	0x08004f15
 8004efc:	2300      	movs	r3, #0
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f02:	e0d8      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f04:	2302      	movs	r3, #2
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0a:	e0d4      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f12:	e0d0      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f14:	2308      	movs	r3, #8
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1a:	e0cc      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f22:	e0c8      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a5e      	ldr	r2, [pc, #376]	; (80050a4 <UART_SetConfig+0x2d4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d125      	bne.n	8004f7a <UART_SetConfig+0x1aa>
 8004f2e:	4b5b      	ldr	r3, [pc, #364]	; (800509c <UART_SetConfig+0x2cc>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f38:	2b30      	cmp	r3, #48	; 0x30
 8004f3a:	d016      	beq.n	8004f6a <UART_SetConfig+0x19a>
 8004f3c:	2b30      	cmp	r3, #48	; 0x30
 8004f3e:	d818      	bhi.n	8004f72 <UART_SetConfig+0x1a2>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d00a      	beq.n	8004f5a <UART_SetConfig+0x18a>
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d814      	bhi.n	8004f72 <UART_SetConfig+0x1a2>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <UART_SetConfig+0x182>
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d008      	beq.n	8004f62 <UART_SetConfig+0x192>
 8004f50:	e00f      	b.n	8004f72 <UART_SetConfig+0x1a2>
 8004f52:	2300      	movs	r3, #0
 8004f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f58:	e0ad      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f60:	e0a9      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f62:	2304      	movs	r3, #4
 8004f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f68:	e0a5      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f70:	e0a1      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f72:	2310      	movs	r3, #16
 8004f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f78:	e09d      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a4a      	ldr	r2, [pc, #296]	; (80050a8 <UART_SetConfig+0x2d8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d125      	bne.n	8004fd0 <UART_SetConfig+0x200>
 8004f84:	4b45      	ldr	r3, [pc, #276]	; (800509c <UART_SetConfig+0x2cc>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f90:	d016      	beq.n	8004fc0 <UART_SetConfig+0x1f0>
 8004f92:	2bc0      	cmp	r3, #192	; 0xc0
 8004f94:	d818      	bhi.n	8004fc8 <UART_SetConfig+0x1f8>
 8004f96:	2b80      	cmp	r3, #128	; 0x80
 8004f98:	d00a      	beq.n	8004fb0 <UART_SetConfig+0x1e0>
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d814      	bhi.n	8004fc8 <UART_SetConfig+0x1f8>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <UART_SetConfig+0x1d8>
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d008      	beq.n	8004fb8 <UART_SetConfig+0x1e8>
 8004fa6:	e00f      	b.n	8004fc8 <UART_SetConfig+0x1f8>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fae:	e082      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb6:	e07e      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fbe:	e07a      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc6:	e076      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fce:	e072      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a35      	ldr	r2, [pc, #212]	; (80050ac <UART_SetConfig+0x2dc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d12a      	bne.n	8005030 <UART_SetConfig+0x260>
 8004fda:	4b30      	ldr	r3, [pc, #192]	; (800509c <UART_SetConfig+0x2cc>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe8:	d01a      	beq.n	8005020 <UART_SetConfig+0x250>
 8004fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fee:	d81b      	bhi.n	8005028 <UART_SetConfig+0x258>
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff4:	d00c      	beq.n	8005010 <UART_SetConfig+0x240>
 8004ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffa:	d815      	bhi.n	8005028 <UART_SetConfig+0x258>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <UART_SetConfig+0x238>
 8005000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005004:	d008      	beq.n	8005018 <UART_SetConfig+0x248>
 8005006:	e00f      	b.n	8005028 <UART_SetConfig+0x258>
 8005008:	2300      	movs	r3, #0
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500e:	e052      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005010:	2302      	movs	r3, #2
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005016:	e04e      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005018:	2304      	movs	r3, #4
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800501e:	e04a      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005020:	2308      	movs	r3, #8
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005026:	e046      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005028:	2310      	movs	r3, #16
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502e:	e042      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a17      	ldr	r2, [pc, #92]	; (8005094 <UART_SetConfig+0x2c4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d13a      	bne.n	80050b0 <UART_SetConfig+0x2e0>
 800503a:	4b18      	ldr	r3, [pc, #96]	; (800509c <UART_SetConfig+0x2cc>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005044:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005048:	d01a      	beq.n	8005080 <UART_SetConfig+0x2b0>
 800504a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800504e:	d81b      	bhi.n	8005088 <UART_SetConfig+0x2b8>
 8005050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005054:	d00c      	beq.n	8005070 <UART_SetConfig+0x2a0>
 8005056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505a:	d815      	bhi.n	8005088 <UART_SetConfig+0x2b8>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <UART_SetConfig+0x298>
 8005060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005064:	d008      	beq.n	8005078 <UART_SetConfig+0x2a8>
 8005066:	e00f      	b.n	8005088 <UART_SetConfig+0x2b8>
 8005068:	2300      	movs	r3, #0
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506e:	e022      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005070:	2302      	movs	r3, #2
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005076:	e01e      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005078:	2304      	movs	r3, #4
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507e:	e01a      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005080:	2308      	movs	r3, #8
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005086:	e016      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005088:	2310      	movs	r3, #16
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508e:	e012      	b.n	80050b6 <UART_SetConfig+0x2e6>
 8005090:	efff69f3 	.word	0xefff69f3
 8005094:	40008000 	.word	0x40008000
 8005098:	40013800 	.word	0x40013800
 800509c:	40021000 	.word	0x40021000
 80050a0:	40004400 	.word	0x40004400
 80050a4:	40004800 	.word	0x40004800
 80050a8:	40004c00 	.word	0x40004c00
 80050ac:	40005000 	.word	0x40005000
 80050b0:	2310      	movs	r3, #16
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a9f      	ldr	r2, [pc, #636]	; (8005338 <UART_SetConfig+0x568>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d17a      	bne.n	80051b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d824      	bhi.n	8005112 <UART_SetConfig+0x342>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0x300>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	080050f5 	.word	0x080050f5
 80050d4:	08005113 	.word	0x08005113
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	08005113 	.word	0x08005113
 80050e0:	08005103 	.word	0x08005103
 80050e4:	08005113 	.word	0x08005113
 80050e8:	08005113 	.word	0x08005113
 80050ec:	08005113 	.word	0x08005113
 80050f0:	0800510b 	.word	0x0800510b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f4:	f7fd fecc 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 80050f8:	61f8      	str	r0, [r7, #28]
        break;
 80050fa:	e010      	b.n	800511e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050fc:	4b8f      	ldr	r3, [pc, #572]	; (800533c <UART_SetConfig+0x56c>)
 80050fe:	61fb      	str	r3, [r7, #28]
        break;
 8005100:	e00d      	b.n	800511e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005102:	f7fd fe2d 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8005106:	61f8      	str	r0, [r7, #28]
        break;
 8005108:	e009      	b.n	800511e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510e:	61fb      	str	r3, [r7, #28]
        break;
 8005110:	e005      	b.n	800511e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800511c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80fb 	beq.w	800531c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	429a      	cmp	r2, r3
 8005134:	d305      	bcc.n	8005142 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	429a      	cmp	r2, r3
 8005140:	d903      	bls.n	800514a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005148:	e0e8      	b.n	800531c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2200      	movs	r2, #0
 800514e:	461c      	mov	r4, r3
 8005150:	4615      	mov	r5, r2
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	022b      	lsls	r3, r5, #8
 800515c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005160:	0222      	lsls	r2, r4, #8
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	6849      	ldr	r1, [r1, #4]
 8005166:	0849      	lsrs	r1, r1, #1
 8005168:	2000      	movs	r0, #0
 800516a:	4688      	mov	r8, r1
 800516c:	4681      	mov	r9, r0
 800516e:	eb12 0a08 	adds.w	sl, r2, r8
 8005172:	eb43 0b09 	adc.w	fp, r3, r9
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005184:	4650      	mov	r0, sl
 8005186:	4659      	mov	r1, fp
 8005188:	f7fb f88a 	bl	80002a0 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4613      	mov	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519a:	d308      	bcc.n	80051ae <UART_SetConfig+0x3de>
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a2:	d204      	bcs.n	80051ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	e0b6      	b.n	800531c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051b4:	e0b2      	b.n	800531c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051be:	d15e      	bne.n	800527e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d828      	bhi.n	800521a <UART_SetConfig+0x44a>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x400>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051fd 	.word	0x080051fd
 80051d8:	08005205 	.word	0x08005205
 80051dc:	0800521b 	.word	0x0800521b
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	0800521b 	.word	0x0800521b
 80051e8:	0800521b 	.word	0x0800521b
 80051ec:	0800521b 	.word	0x0800521b
 80051f0:	08005213 	.word	0x08005213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fd fe4c 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 80051f8:	61f8      	str	r0, [r7, #28]
        break;
 80051fa:	e014      	b.n	8005226 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051fc:	f7fd fe5e 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8005200:	61f8      	str	r0, [r7, #28]
        break;
 8005202:	e010      	b.n	8005226 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005204:	4b4d      	ldr	r3, [pc, #308]	; (800533c <UART_SetConfig+0x56c>)
 8005206:	61fb      	str	r3, [r7, #28]
        break;
 8005208:	e00d      	b.n	8005226 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520a:	f7fd fda9 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 800520e:	61f8      	str	r0, [r7, #28]
        break;
 8005210:	e009      	b.n	8005226 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005216:	61fb      	str	r3, [r7, #28]
        break;
 8005218:	e005      	b.n	8005226 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d077      	beq.n	800531c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	005a      	lsls	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	441a      	add	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b0f      	cmp	r3, #15
 8005246:	d916      	bls.n	8005276 <UART_SetConfig+0x4a6>
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524e:	d212      	bcs.n	8005276 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f023 030f 	bic.w	r3, r3, #15
 8005258:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	b29b      	uxth	r3, r3
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	b29a      	uxth	r2, r3
 8005266:	8afb      	ldrh	r3, [r7, #22]
 8005268:	4313      	orrs	r3, r2
 800526a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	8afa      	ldrh	r2, [r7, #22]
 8005272:	60da      	str	r2, [r3, #12]
 8005274:	e052      	b.n	800531c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800527c:	e04e      	b.n	800531c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800527e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005282:	2b08      	cmp	r3, #8
 8005284:	d827      	bhi.n	80052d6 <UART_SetConfig+0x506>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x4bc>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b9 	.word	0x080052b9
 8005294:	080052c1 	.word	0x080052c1
 8005298:	080052d7 	.word	0x080052d7
 800529c:	080052c7 	.word	0x080052c7
 80052a0:	080052d7 	.word	0x080052d7
 80052a4:	080052d7 	.word	0x080052d7
 80052a8:	080052d7 	.word	0x080052d7
 80052ac:	080052cf 	.word	0x080052cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fd fdee 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 80052b4:	61f8      	str	r0, [r7, #28]
        break;
 80052b6:	e014      	b.n	80052e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7fd fe00 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 80052bc:	61f8      	str	r0, [r7, #28]
        break;
 80052be:	e010      	b.n	80052e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c0:	4b1e      	ldr	r3, [pc, #120]	; (800533c <UART_SetConfig+0x56c>)
 80052c2:	61fb      	str	r3, [r7, #28]
        break;
 80052c4:	e00d      	b.n	80052e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c6:	f7fd fd4b 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 80052ca:	61f8      	str	r0, [r7, #28]
        break;
 80052cc:	e009      	b.n	80052e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d2:	61fb      	str	r3, [r7, #28]
        break;
 80052d4:	e005      	b.n	80052e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052e0:	bf00      	nop
    }

    if (pclk != 0U)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d019      	beq.n	800531c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	085a      	lsrs	r2, r3, #1
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	441a      	add	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b0f      	cmp	r3, #15
 8005300:	d909      	bls.n	8005316 <UART_SetConfig+0x546>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005308:	d205      	bcs.n	8005316 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	e002      	b.n	800531c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005328:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800532c:	4618      	mov	r0, r3
 800532e:	3728      	adds	r7, #40	; 0x28
 8005330:	46bd      	mov	sp, r7
 8005332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005336:	bf00      	nop
 8005338:	40008000 	.word	0x40008000
 800533c:	00f42400 	.word	0x00f42400

08005340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800543e:	d10a      	bne.n	8005456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005494:	f7fc fbd0 	bl	8001c38 <HAL_GetTick>
 8005498:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10e      	bne.n	80054c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f82d 	bl	8005516 <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e023      	b.n	800550e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d10e      	bne.n	80054f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f817 	bl	8005516 <UART_WaitOnFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e00d      	b.n	800550e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b09c      	sub	sp, #112	; 0x70
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	4613      	mov	r3, r2
 8005524:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005526:	e0a5      	b.n	8005674 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	f000 80a1 	beq.w	8005674 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7fc fb81 	bl	8001c38 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <UART_WaitOnFlagUntilTimeout+0x32>
 8005542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005544:	2b00      	cmp	r3, #0
 8005546:	d13e      	bne.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005558:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800555c:	667b      	str	r3, [r7, #100]	; 0x64
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005568:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800556c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e6      	bne.n	8005548 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	663b      	str	r3, [r7, #96]	; 0x60
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3308      	adds	r3, #8
 8005598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800559a:	64ba      	str	r2, [r7, #72]	; 0x48
 800559c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e5      	bne.n	800557a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e067      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d04f      	beq.n	8005674 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e2:	d147      	bne.n	8005674 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
 800560e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e6      	bne.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	613b      	str	r3, [r7, #16]
   return(result);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	66bb      	str	r3, [r7, #104]	; 0x68
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005640:	623a      	str	r2, [r7, #32]
 8005642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	69f9      	ldr	r1, [r7, #28]
 8005646:	6a3a      	ldr	r2, [r7, #32]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	61bb      	str	r3, [r7, #24]
   return(result);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e010      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4013      	ands	r3, r2
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	429a      	cmp	r2, r3
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	429a      	cmp	r2, r3
 8005690:	f43f af4a 	beq.w	8005528 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3770      	adds	r7, #112	; 0x70
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b097      	sub	sp, #92	; 0x5c
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	d10e      	bne.n	80056f2 <UART_Start_Receive_IT+0x52>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <UART_Start_Receive_IT+0x48>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056e6:	e02d      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	22ff      	movs	r2, #255	; 0xff
 80056ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056f0:	e028      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10d      	bne.n	8005716 <UART_Start_Receive_IT+0x76>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <UART_Start_Receive_IT+0x6c>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800570a:	e01b      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	227f      	movs	r2, #127	; 0x7f
 8005710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005714:	e016      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800571e:	d10d      	bne.n	800573c <UART_Start_Receive_IT+0x9c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <UART_Start_Receive_IT+0x92>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	227f      	movs	r2, #127	; 0x7f
 800572c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005730:	e008      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	223f      	movs	r2, #63	; 0x3f
 8005736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800573a:	e003      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2222      	movs	r2, #34	; 0x22
 8005750:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	657b      	str	r3, [r7, #84]	; 0x54
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005772:	64ba      	str	r2, [r7, #72]	; 0x48
 8005774:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578e:	d107      	bne.n	80057a0 <UART_Start_Receive_IT+0x100>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a24      	ldr	r2, [pc, #144]	; (800582c <UART_Start_Receive_IT+0x18c>)
 800579c:	665a      	str	r2, [r3, #100]	; 0x64
 800579e:	e002      	b.n	80057a6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a23      	ldr	r2, [pc, #140]	; (8005830 <UART_Start_Receive_IT+0x190>)
 80057a4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d019      	beq.n	80057ea <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80057ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
 80057d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e6      	bne.n	80057b6 <UART_Start_Receive_IT+0x116>
 80057e8:	e018      	b.n	800581c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	613b      	str	r3, [r7, #16]
   return(result);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f043 0320 	orr.w	r3, r3, #32
 80057fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	69f9      	ldr	r1, [r7, #28]
 800580e:	6a3a      	ldr	r2, [r7, #32]
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	61bb      	str	r3, [r7, #24]
   return(result);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e6      	bne.n	80057ea <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	375c      	adds	r7, #92	; 0x5c
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	08005adb 	.word	0x08005adb
 8005830:	0800597b 	.word	0x0800597b

08005834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b095      	sub	sp, #84	; 0x54
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585a:	643b      	str	r3, [r7, #64]	; 0x40
 800585c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e6      	bne.n	800583c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	61fb      	str	r3, [r7, #28]
   return(result);
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3308      	adds	r3, #8
 800588c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800588e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e5      	bne.n	800586e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d118      	bne.n	80058dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	647b      	str	r3, [r7, #68]	; 0x44
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6979      	ldr	r1, [r7, #20]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	613b      	str	r3, [r7, #16]
   return(result);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058ee:	bf00      	nop
 80058f0:	3754      	adds	r7, #84	; 0x54
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff fa43 	bl	8004da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b088      	sub	sp, #32
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	60bb      	str	r3, [r7, #8]
   return(result);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6979      	ldr	r1, [r7, #20]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	613b      	str	r3, [r7, #16]
   return(result);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff fa0f 	bl	8004d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005972:	bf00      	nop
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b096      	sub	sp, #88	; 0x58
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005988:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005990:	2b22      	cmp	r3, #34	; 0x22
 8005992:	f040 8094 	bne.w	8005abe <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800599c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80059a4:	b2d9      	uxtb	r1, r3
 80059a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	400a      	ands	r2, r1
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d179      	bne.n	8005ad2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f2:	653b      	str	r3, [r7, #80]	; 0x50
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fc:	647b      	str	r3, [r7, #68]	; 0x44
 80059fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e6      	bne.n	80059de <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a30:	633a      	str	r2, [r7, #48]	; 0x30
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e5      	bne.n	8005a10 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d12e      	bne.n	8005ab6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0310 	bic.w	r3, r3, #16
 8005a72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	69b9      	ldr	r1, [r7, #24]
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e6      	bne.n	8005a5e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d103      	bne.n	8005aa6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2210      	movs	r2, #16
 8005aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff f982 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ab4:	e00d      	b.n	8005ad2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb fd62 	bl	8001580 <HAL_UART_RxCpltCallback>
}
 8005abc:	e009      	b.n	8005ad2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	8b1b      	ldrh	r3, [r3, #24]
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0208 	orr.w	r2, r2, #8
 8005ace:	b292      	uxth	r2, r2
 8005ad0:	831a      	strh	r2, [r3, #24]
}
 8005ad2:	bf00      	nop
 8005ad4:	3758      	adds	r7, #88	; 0x58
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b096      	sub	sp, #88	; 0x58
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ae8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af0:	2b22      	cmp	r3, #34	; 0x22
 8005af2:	f040 8094 	bne.w	8005c1e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005afc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b04:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b06:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005b0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b0e:	4013      	ands	r3, r2
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d179      	bne.n	8005c32 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3308      	adds	r3, #8
 8005b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d12e      	bne.n	8005c16 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f023 0310 	bic.w	r3, r3, #16
 8005bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e6      	bne.n	8005bbe <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d103      	bne.n	8005c06 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2210      	movs	r2, #16
 8005c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff f8d2 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c14:	e00d      	b.n	8005c32 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fb fcb2 	bl	8001580 <HAL_UART_RxCpltCallback>
}
 8005c1c:	e009      	b.n	8005c32 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	8b1b      	ldrh	r3, [r3, #24]
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0208 	orr.w	r2, r2, #8
 8005c2e:	b292      	uxth	r2, r2
 8005c30:	831a      	strh	r2, [r3, #24]
}
 8005c32:	bf00      	nop
 8005c34:	3758      	adds	r7, #88	; 0x58
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f103 0208 	add.w	r2, r3, #8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f04f 32ff 	mov.w	r2, #4294967295
 8005c66:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f103 0208 	add.w	r2, r3, #8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f103 0208 	add.w	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d103      	bne.n	8005d10 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	e00c      	b.n	8005d2a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3308      	adds	r3, #8
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	e002      	b.n	8005d1e <vListInsert+0x2e>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d2f6      	bcs.n	8005d18 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6892      	ldr	r2, [r2, #8]
 8005d78:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6852      	ldr	r2, [r2, #4]
 8005d82:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d103      	bne.n	8005d96 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	1e5a      	subs	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericReset+0x2a>
        __asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	60bb      	str	r3, [r7, #8]
    }
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005de2:	f002 fb09 	bl	80083f8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005df2:	fb01 f303 	mul.w	r3, r1, r3
 8005df6:	441a      	add	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	3b01      	subs	r3, #1
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	22ff      	movs	r2, #255	; 0xff
 8005e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d114      	bne.n	8005e62 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01a      	beq.n	8005e76 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3310      	adds	r3, #16
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 f921 	bl	800708c <xTaskRemoveFromEventList>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d012      	beq.n	8005e76 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005e50:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <xQueueGenericReset+0xcc>)
 8005e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	e009      	b.n	8005e76 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3310      	adds	r3, #16
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fef1 	bl	8005c4e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3324      	adds	r3, #36	; 0x24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff feec 	bl	8005c4e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005e76:	f002 faef 	bl	8008458 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005e7a:	2301      	movs	r3, #1
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	e000ed04 	.word	0xe000ed04

08005e88 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08c      	sub	sp, #48	; 0x30
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xQueueGenericCreate+0x2a>
        __asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61bb      	str	r3, [r7, #24]
    }
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d006      	beq.n	8005ed0 <xQueueGenericCreate+0x48>
 8005ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d101      	bne.n	8005ed4 <xQueueGenericCreate+0x4c>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <xQueueGenericCreate+0x4e>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <xQueueGenericCreate+0x68>
        __asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	617b      	str	r3, [r7, #20]
    }
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005ef6:	d90a      	bls.n	8005f0e <xQueueGenericCreate+0x86>
        __asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	613b      	str	r3, [r7, #16]
    }
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	3350      	adds	r3, #80	; 0x50
 8005f12:	4618      	mov	r0, r3
 8005f14:	f002 fb92 	bl	800863c <pvPortMalloc>
 8005f18:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00d      	beq.n	8005f3c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3350      	adds	r3, #80	; 0x50
 8005f28:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f2a:	79fa      	ldrb	r2, [r7, #7]
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f805 	bl	8005f46 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
    }
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3728      	adds	r7, #40	; 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e002      	b.n	8005f68 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f74:	2101      	movs	r1, #1
 8005f76:	69b8      	ldr	r0, [r7, #24]
 8005f78:	f7ff ff1e 	bl	8005db8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08e      	sub	sp, #56	; 0x38
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xQueueGenericSend+0x32>
        __asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d103      	bne.n	8005fcc <xQueueGenericSend+0x40>
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <xQueueGenericSend+0x44>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <xQueueGenericSend+0x46>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <xQueueGenericSend+0x60>
        __asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d103      	bne.n	8005ffa <xQueueGenericSend+0x6e>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <xQueueGenericSend+0x72>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <xQueueGenericSend+0x74>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <xQueueGenericSend+0x8e>
        __asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	623b      	str	r3, [r7, #32]
    }
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800601a:	f001 f9d3 	bl	80073c4 <xTaskGetSchedulerState>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <xQueueGenericSend+0x9e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <xQueueGenericSend+0xa2>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <xQueueGenericSend+0xa4>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <xQueueGenericSend+0xbe>
        __asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	61fb      	str	r3, [r7, #28]
    }
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800604a:	f002 f9d5 	bl	80083f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <xQueueGenericSend+0xd4>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d129      	bne.n	80060b4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006066:	f000 fac6 	bl	80065f6 <prvCopyDataToQueue>
 800606a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	d010      	beq.n	8006096 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	3324      	adds	r3, #36	; 0x24
 8006078:	4618      	mov	r0, r3
 800607a:	f001 f807 	bl	800708c <xTaskRemoveFromEventList>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d013      	beq.n	80060ac <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006084:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <xQueueGenericSend+0x1f8>)
 8006086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	e00a      	b.n	80060ac <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800609c:	4b39      	ldr	r3, [pc, #228]	; (8006184 <xQueueGenericSend+0x1f8>)
 800609e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80060ac:	f002 f9d4 	bl	8008458 <vPortExitCritical>
                return pdPASS;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e063      	b.n	800617c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d103      	bne.n	80060c2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80060ba:	f002 f9cd 	bl	8008458 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	e05c      	b.n	800617c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80060c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80060c8:	f107 0314 	add.w	r3, r7, #20
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 f83f 	bl	8007150 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80060d2:	2301      	movs	r3, #1
 80060d4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80060d6:	f002 f9bf 	bl	8008458 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80060da:	f000 fdb9 	bl	8006c50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80060de:	f002 f98b 	bl	80083f8 <vPortEnterCritical>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060e8:	b25b      	sxtb	r3, r3
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d103      	bne.n	80060f8 <xQueueGenericSend+0x16c>
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fe:	b25b      	sxtb	r3, r3
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d103      	bne.n	800610e <xQueueGenericSend+0x182>
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800610e:	f002 f9a3 	bl	8008458 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006112:	1d3a      	adds	r2, r7, #4
 8006114:	f107 0314 	add.w	r3, r7, #20
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f001 f82e 	bl	800717c <xTaskCheckForTimeOut>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d124      	bne.n	8006170 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006128:	f000 fb5d 	bl	80067e6 <prvIsQueueFull>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d018      	beq.n	8006164 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	3310      	adds	r3, #16
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4611      	mov	r1, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f000 ff56 	bl	8006fec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006142:	f000 fae8 	bl	8006716 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006146:	f000 fd91 	bl	8006c6c <xTaskResumeAll>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	f47f af7c 	bne.w	800604a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8006152:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <xQueueGenericSend+0x1f8>)
 8006154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	e772      	b.n	800604a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006166:	f000 fad6 	bl	8006716 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800616a:	f000 fd7f 	bl	8006c6c <xTaskResumeAll>
 800616e:	e76c      	b.n	800604a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006172:	f000 fad0 	bl	8006716 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006176:	f000 fd79 	bl	8006c6c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800617a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800617c:	4618      	mov	r0, r3
 800617e:	3738      	adds	r7, #56	; 0x38
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b090      	sub	sp, #64	; 0x40
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d103      	bne.n	80061c4 <xQueueGenericSendFromISR+0x3c>
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <xQueueGenericSendFromISR+0x40>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <xQueueGenericSendFromISR+0x42>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d103      	bne.n	80061f2 <xQueueGenericSendFromISR+0x6a>
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <xQueueGenericSendFromISR+0x6e>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <xQueueGenericSendFromISR+0x70>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	623b      	str	r3, [r7, #32]
    }
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006212:	f002 f9d3 	bl	80085bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006216:	f3ef 8211 	mrs	r2, BASEPRI
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	61fa      	str	r2, [r7, #28]
 800622c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800622e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	429a      	cmp	r2, r3
 800623c:	d302      	bcc.n	8006244 <xQueueGenericSendFromISR+0xbc>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d13e      	bne.n	80062c2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800624a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800625a:	f000 f9cc 	bl	80065f6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800625e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d112      	bne.n	800628e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	d025      	beq.n	80062bc <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	3324      	adds	r3, #36	; 0x24
 8006274:	4618      	mov	r0, r3
 8006276:	f000 ff09 	bl	800708c <xTaskRemoveFromEventList>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01d      	beq.n	80062bc <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01a      	beq.n	80062bc <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	e016      	b.n	80062bc <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800628e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006292:	2b7f      	cmp	r3, #127	; 0x7f
 8006294:	d10a      	bne.n	80062ac <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	617b      	str	r3, [r7, #20]
    }
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062b0:	3301      	adds	r3, #1
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	b25a      	sxtb	r2, r3
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80062bc:	2301      	movs	r3, #1
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80062c0:	e001      	b.n	80062c6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80062d0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80062d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3740      	adds	r7, #64	; 0x40
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08c      	sub	sp, #48	; 0x30
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <xQueueReceive+0x30>
        __asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	623b      	str	r3, [r7, #32]
    }
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <xQueueReceive+0x3e>
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <xQueueReceive+0x42>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <xQueueReceive+0x44>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <xQueueReceive+0x5e>
        __asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	61fb      	str	r3, [r7, #28]
    }
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800633a:	f001 f843 	bl	80073c4 <xTaskGetSchedulerState>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <xQueueReceive+0x6e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <xQueueReceive+0x72>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <xQueueReceive+0x74>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <xQueueReceive+0x8e>
        __asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	61bb      	str	r3, [r7, #24]
    }
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800636a:	f002 f845 	bl	80083f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01f      	beq.n	80063ba <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637e:	f000 f9a4 	bl	80066ca <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	1e5a      	subs	r2, r3, #1
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00f      	beq.n	80063b2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	3310      	adds	r3, #16
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fe78 	bl	800708c <xTaskRemoveFromEventList>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80063a2:	4b3d      	ldr	r3, [pc, #244]	; (8006498 <xQueueReceive+0x1bc>)
 80063a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80063b2:	f002 f851 	bl	8008458 <vPortExitCritical>
                return pdPASS;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e069      	b.n	800648e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80063c0:	f002 f84a 	bl	8008458 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e062      	b.n	800648e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80063ce:	f107 0310 	add.w	r3, r7, #16
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 febc 	bl	8007150 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80063dc:	f002 f83c 	bl	8008458 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80063e0:	f000 fc36 	bl	8006c50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80063e4:	f002 f808 	bl	80083f8 <vPortEnterCritical>
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d103      	bne.n	80063fe <xQueueReceive+0x122>
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006404:	b25b      	sxtb	r3, r3
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640a:	d103      	bne.n	8006414 <xQueueReceive+0x138>
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006414:	f002 f820 	bl	8008458 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006418:	1d3a      	adds	r2, r7, #4
 800641a:	f107 0310 	add.w	r3, r7, #16
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f000 feab 	bl	800717c <xTaskCheckForTimeOut>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d123      	bne.n	8006474 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800642c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800642e:	f000 f9c4 	bl	80067ba <prvIsQueueEmpty>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d017      	beq.n	8006468 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	3324      	adds	r3, #36	; 0x24
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fdd3 	bl	8006fec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006448:	f000 f965 	bl	8006716 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800644c:	f000 fc0e 	bl	8006c6c <xTaskResumeAll>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d189      	bne.n	800636a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <xQueueReceive+0x1bc>)
 8006458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	e780      	b.n	800636a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800646a:	f000 f954 	bl	8006716 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800646e:	f000 fbfd 	bl	8006c6c <xTaskResumeAll>
 8006472:	e77a      	b.n	800636a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006476:	f000 f94e 	bl	8006716 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800647a:	f000 fbf7 	bl	8006c6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800647e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006480:	f000 f99b 	bl	80067ba <prvIsQueueEmpty>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	f43f af6f 	beq.w	800636a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800648c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800648e:	4618      	mov	r0, r3
 8006490:	3730      	adds	r7, #48	; 0x30
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b090      	sub	sp, #64	; 0x40
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <xQueueReceiveFromISR+0x3a>
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <xQueueReceiveFromISR+0x3e>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueReceiveFromISR+0x40>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064f6:	f002 f861 	bl	80085bc <vPortValidateInterruptPriority>
        __asm volatile
 80064fa:	f3ef 8211 	mrs	r2, BASEPRI
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	623a      	str	r2, [r7, #32]
 8006510:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006512:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d03e      	beq.n	80065a0 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006530:	f000 f8cb 	bl	80066ca <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	1e5a      	subs	r2, r3, #1
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800653c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d112      	bne.n	800656c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d025      	beq.n	800659a <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	3310      	adds	r3, #16
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fd9a 	bl	800708c <xTaskRemoveFromEventList>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01d      	beq.n	800659a <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01a      	beq.n	800659a <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e016      	b.n	800659a <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800656c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006570:	2b7f      	cmp	r3, #127	; 0x7f
 8006572:	d10a      	bne.n	800658a <xQueueReceiveFromISR+0xee>
        __asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	61bb      	str	r3, [r7, #24]
    }
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800658a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800658e:	3301      	adds	r3, #1
 8006590:	b2db      	uxtb	r3, r3
 8006592:	b25a      	sxtb	r2, r3
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800659a:	2301      	movs	r3, #1
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800659e:	e001      	b.n	80065a4 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	617b      	str	r3, [r7, #20]
        __asm volatile
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f383 8811 	msr	BASEPRI, r3
    }
 80065ae:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80065b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3740      	adds	r7, #64	; 0x40
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60bb      	str	r3, [r7, #8]
    }
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80065de:	f001 ff0b 	bl	80083f8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80065e8:	f001 ff36 	bl	8008458 <vPortExitCritical>

    return uxReturn;
 80065ec:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b086      	sub	sp, #24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10d      	bne.n	8006630 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d14d      	bne.n	80066b8 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 feed 	bl	8007400 <xTaskPriorityDisinherit>
 8006626:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	609a      	str	r2, [r3, #8]
 800662e:	e043      	b.n	80066b8 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d119      	bne.n	800666a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6858      	ldr	r0, [r3, #4]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	461a      	mov	r2, r3
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	f002 fa23 	bl	8008a8c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	441a      	add	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	429a      	cmp	r2, r3
 800665e:	d32b      	bcc.n	80066b8 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	e026      	b.n	80066b8 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	68d8      	ldr	r0, [r3, #12]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	461a      	mov	r2, r3
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	f002 fa09 	bl	8008a8c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	425b      	negs	r3, r3
 8006684:	441a      	add	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d207      	bcs.n	80066a6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	425b      	negs	r3, r3
 80066a0:	441a      	add	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d105      	bne.n	80066b8 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80066c0:	697b      	ldr	r3, [r7, #20]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d018      	beq.n	800670e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d303      	bcc.n	80066fe <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68d9      	ldr	r1, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	461a      	mov	r2, r3
 8006708:	6838      	ldr	r0, [r7, #0]
 800670a:	f002 f9bf 	bl	8008a8c <memcpy>
    }
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800671e:	f001 fe6b 	bl	80083f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006728:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800672a:	e011      	b.n	8006750 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d012      	beq.n	800675a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3324      	adds	r3, #36	; 0x24
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fca7 	bl	800708c <xTaskRemoveFromEventList>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006744:	f000 fd80 	bl	8007248 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	3b01      	subs	r3, #1
 800674c:	b2db      	uxtb	r3, r3
 800674e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006754:	2b00      	cmp	r3, #0
 8006756:	dce9      	bgt.n	800672c <prvUnlockQueue+0x16>
 8006758:	e000      	b.n	800675c <prvUnlockQueue+0x46>
                        break;
 800675a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	22ff      	movs	r2, #255	; 0xff
 8006760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006764:	f001 fe78 	bl	8008458 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006768:	f001 fe46 	bl	80083f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006772:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006774:	e011      	b.n	800679a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d012      	beq.n	80067a4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3310      	adds	r3, #16
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fc82 	bl	800708c <xTaskRemoveFromEventList>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800678e:	f000 fd5b 	bl	8007248 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	3b01      	subs	r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800679a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dce9      	bgt.n	8006776 <prvUnlockQueue+0x60>
 80067a2:	e000      	b.n	80067a6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80067a4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	22ff      	movs	r2, #255	; 0xff
 80067aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80067ae:	f001 fe53 	bl	8008458 <vPortExitCritical>
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80067c2:	f001 fe19 	bl	80083f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80067ce:	2301      	movs	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e001      	b.n	80067d8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80067d8:	f001 fe3e 	bl	8008458 <vPortExitCritical>

    return xReturn;
 80067dc:	68fb      	ldr	r3, [r7, #12]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80067ee:	f001 fe03 	bl	80083f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d102      	bne.n	8006804 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80067fe:	2301      	movs	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e001      	b.n	8006808 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006808:	f001 fe26 	bl	8008458 <vPortExitCritical>

    return xReturn;
 800680c:	68fb      	ldr	r3, [r7, #12]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8006828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	60fb      	str	r3, [r7, #12]
    }
 800683a:	bf00      	nop
 800683c:	e7fe      	b.n	800683c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	429a      	cmp	r2, r3
 8006848:	d102      	bne.n	8006850 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800684a:	2301      	movs	r3, #1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	e001      	b.n	8006854 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006854:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006856:	4618      	mov	r0, r3
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e014      	b.n	800689e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006874:	4a0f      	ldr	r2, [pc, #60]	; (80068b4 <vQueueAddToRegistry+0x50>)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006880:	490c      	ldr	r1, [pc, #48]	; (80068b4 <vQueueAddToRegistry+0x50>)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800688a:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <vQueueAddToRegistry+0x50>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	4413      	add	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006896:	e006      	b.n	80068a6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b07      	cmp	r3, #7
 80068a2:	d9e7      	bls.n	8006874 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000234 	.word	0x20000234

080068b8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80068c8:	f001 fd96 	bl	80083f8 <vPortEnterCritical>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d2:	b25b      	sxtb	r3, r3
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d103      	bne.n	80068e2 <vQueueWaitForMessageRestricted+0x2a>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d103      	bne.n	80068f8 <vQueueWaitForMessageRestricted+0x40>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f8:	f001 fdae 	bl	8008458 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	3324      	adds	r3, #36	; 0x24
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fb91 	bl	8007034 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006912:	6978      	ldr	r0, [r7, #20]
 8006914:	f7ff feff 	bl	8006716 <prvUnlockQueue>
    }
 8006918:	bf00      	nop
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006920:	b580      	push	{r7, lr}
 8006922:	b08c      	sub	sp, #48	; 0x30
 8006924:	af04      	add	r7, sp, #16
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4618      	mov	r0, r3
 8006936:	f001 fe81 	bl	800863c <pvPortMalloc>
 800693a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00e      	beq.n	8006960 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006942:	2058      	movs	r0, #88	; 0x58
 8006944:	f001 fe7a 	bl	800863c <pvPortMalloc>
 8006948:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
 8006956:	e005      	b.n	8006964 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006958:	6978      	ldr	r0, [r7, #20]
 800695a:	f001 ff4f 	bl	80087fc <vPortFree>
 800695e:	e001      	b.n	8006964 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d013      	beq.n	8006992 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800696a:	88fa      	ldrh	r2, [r7, #6]
 800696c:	2300      	movs	r3, #0
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	9302      	str	r3, [sp, #8]
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f80e 	bl	80069a2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006986:	69f8      	ldr	r0, [r7, #28]
 8006988:	f000 f8a2 	bl	8006ad0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800698c:	2301      	movs	r3, #1
 800698e:	61bb      	str	r3, [r7, #24]
 8006990:	e002      	b.n	8006998 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006992:	f04f 33ff 	mov.w	r3, #4294967295
 8006996:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006998:	69bb      	ldr	r3, [r7, #24]
    }
 800699a:	4618      	mov	r0, r3
 800699c:	3720      	adds	r7, #32
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b088      	sub	sp, #32
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
 80069ae:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	461a      	mov	r2, r3
 80069ba:	21a5      	movs	r1, #165	; 0xa5
 80069bc:	f002 f874 	bl	8008aa8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069ca:	3b01      	subs	r3, #1
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	f023 0307 	bic.w	r3, r3, #7
 80069d8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <prvInitialiseNewTask+0x58>
        __asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	617b      	str	r3, [r7, #20]
    }
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01f      	beq.n	8006a40 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	e012      	b.n	8006a2c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	7819      	ldrb	r1, [r3, #0]
 8006a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	4413      	add	r3, r2
 8006a14:	3334      	adds	r3, #52	; 0x34
 8006a16:	460a      	mov	r2, r1
 8006a18:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d006      	beq.n	8006a34 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	2b09      	cmp	r3, #9
 8006a30:	d9e9      	bls.n	8006a06 <prvInitialiseNewTask+0x64>
 8006a32:	e000      	b.n	8006a36 <prvInitialiseNewTask+0x94>
            {
                break;
 8006a34:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a3e:	e003      	b.n	8006a48 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d901      	bls.n	8006a52 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a4e:	2304      	movs	r3, #4
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a56:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a5c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	2200      	movs	r2, #0
 8006a62:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	3304      	adds	r3, #4
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff f910 	bl	8005c8e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	3318      	adds	r3, #24
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff f90b 	bl	8005c8e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	f1c3 0205 	rsb	r2, r3, #5
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	3350      	adds	r3, #80	; 0x50
 8006a92:	2204      	movs	r2, #4
 8006a94:	2100      	movs	r1, #0
 8006a96:	4618      	mov	r0, r3
 8006a98:	f002 f806 	bl	8008aa8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	3354      	adds	r3, #84	; 0x54
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 ffff 	bl	8008aa8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	68f9      	ldr	r1, [r7, #12]
 8006aae:	69b8      	ldr	r0, [r7, #24]
 8006ab0:	f001 fb76 	bl	80081a0 <pxPortInitialiseStack>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006ac6:	bf00      	nop
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006ad8:	f001 fc8e 	bl	80083f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006adc:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <prvAddNewTaskToReadyList+0xc0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	4a2b      	ldr	r2, [pc, #172]	; (8006b90 <prvAddNewTaskToReadyList+0xc0>)
 8006ae4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006ae6:	4b2b      	ldr	r3, [pc, #172]	; (8006b94 <prvAddNewTaskToReadyList+0xc4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006aee:	4a29      	ldr	r2, [pc, #164]	; (8006b94 <prvAddNewTaskToReadyList+0xc4>)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006af4:	4b26      	ldr	r3, [pc, #152]	; (8006b90 <prvAddNewTaskToReadyList+0xc0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d110      	bne.n	8006b1e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006afc:	f000 fbc8 	bl	8007290 <prvInitialiseTaskLists>
 8006b00:	e00d      	b.n	8006b1e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006b02:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <prvAddNewTaskToReadyList+0xc8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b0a:	4b22      	ldr	r3, [pc, #136]	; (8006b94 <prvAddNewTaskToReadyList+0xc4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d802      	bhi.n	8006b1e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006b18:	4a1e      	ldr	r2, [pc, #120]	; (8006b94 <prvAddNewTaskToReadyList+0xc4>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006b1e:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <prvAddNewTaskToReadyList+0xcc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3301      	adds	r3, #1
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <prvAddNewTaskToReadyList+0xcc>)
 8006b26:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b28:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <prvAddNewTaskToReadyList+0xcc>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	2201      	movs	r2, #1
 8006b36:	409a      	lsls	r2, r3
 8006b38:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <prvAddNewTaskToReadyList+0xd0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <prvAddNewTaskToReadyList+0xd0>)
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <prvAddNewTaskToReadyList+0xd4>)
 8006b50:	441a      	add	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f7ff f8a5 	bl	8005ca8 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006b5e:	f001 fc7b 	bl	8008458 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006b62:	4b0d      	ldr	r3, [pc, #52]	; (8006b98 <prvAddNewTaskToReadyList+0xc8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00e      	beq.n	8006b88 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <prvAddNewTaskToReadyList+0xc4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d207      	bcs.n	8006b88 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006b78:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <prvAddNewTaskToReadyList+0xd8>)
 8006b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006b88:	bf00      	nop
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	2000034c 	.word	0x2000034c
 8006b94:	20000274 	.word	0x20000274
 8006b98:	20000358 	.word	0x20000358
 8006b9c:	20000368 	.word	0x20000368
 8006ba0:	20000354 	.word	0x20000354
 8006ba4:	20000278 	.word	0x20000278
 8006ba8:	e000ed04 	.word	0xe000ed04

08006bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8006bb2:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <vTaskStartScheduler+0x88>)
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2282      	movs	r2, #130	; 0x82
 8006bbe:	491e      	ldr	r1, [pc, #120]	; (8006c38 <vTaskStartScheduler+0x8c>)
 8006bc0:	481e      	ldr	r0, [pc, #120]	; (8006c3c <vTaskStartScheduler+0x90>)
 8006bc2:	f7ff fead 	bl	8006920 <xTaskCreate>
 8006bc6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d102      	bne.n	8006bd4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006bce:	f000 ff59 	bl	8007a84 <xTimerCreateTimerTask>
 8006bd2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d116      	bne.n	8006c08 <vTaskStartScheduler+0x5c>
        __asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	60bb      	str	r3, [r7, #8]
    }
 8006bec:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <vTaskStartScheduler+0x94>)
 8006bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006bf6:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <vTaskStartScheduler+0x98>)
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bfc:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <vTaskStartScheduler+0x9c>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006c02:	f001 fb57 	bl	80082b4 <xPortStartScheduler>
 8006c06:	e00e      	b.n	8006c26 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d10a      	bne.n	8006c26 <vTaskStartScheduler+0x7a>
        __asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	607b      	str	r3, [r7, #4]
    }
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006c26:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <vTaskStartScheduler+0xa0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000370 	.word	0x20000370
 8006c38:	08009724 	.word	0x08009724
 8006c3c:	08007261 	.word	0x08007261
 8006c40:	2000036c 	.word	0x2000036c
 8006c44:	20000358 	.word	0x20000358
 8006c48:	20000350 	.word	0x20000350
 8006c4c:	20000028 	.word	0x20000028

08006c50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006c54:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <vTaskSuspendAll+0x18>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	4a03      	ldr	r2, [pc, #12]	; (8006c68 <vTaskSuspendAll+0x18>)
 8006c5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006c5e:	bf00      	nop
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	20000374 	.word	0x20000374

08006c6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006c7a:	4b41      	ldr	r3, [pc, #260]	; (8006d80 <xTaskResumeAll+0x114>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <xTaskResumeAll+0x2c>
        __asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	603b      	str	r3, [r7, #0]
    }
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006c98:	f001 fbae 	bl	80083f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006c9c:	4b38      	ldr	r3, [pc, #224]	; (8006d80 <xTaskResumeAll+0x114>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	4a37      	ldr	r2, [pc, #220]	; (8006d80 <xTaskResumeAll+0x114>)
 8006ca4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca6:	4b36      	ldr	r3, [pc, #216]	; (8006d80 <xTaskResumeAll+0x114>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d161      	bne.n	8006d72 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cae:	4b35      	ldr	r3, [pc, #212]	; (8006d84 <xTaskResumeAll+0x118>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d05d      	beq.n	8006d72 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cb6:	e02e      	b.n	8006d16 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb8:	4b33      	ldr	r3, [pc, #204]	; (8006d88 <xTaskResumeAll+0x11c>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3318      	adds	r3, #24
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff f84c 	bl	8005d62 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff f847 	bl	8005d62 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	2201      	movs	r2, #1
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <xTaskResumeAll+0x120>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <xTaskResumeAll+0x120>)
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <xTaskResumeAll+0x124>)
 8006cf4:	441a      	add	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	f7fe ffd3 	bl	8005ca8 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <xTaskResumeAll+0x128>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d302      	bcc.n	8006d16 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8006d10:	4b21      	ldr	r3, [pc, #132]	; (8006d98 <xTaskResumeAll+0x12c>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d16:	4b1c      	ldr	r3, [pc, #112]	; (8006d88 <xTaskResumeAll+0x11c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1cc      	bne.n	8006cb8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006d24:	f000 fb32 	bl	800738c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d28:	4b1c      	ldr	r3, [pc, #112]	; (8006d9c <xTaskResumeAll+0x130>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006d34:	f000 f846 	bl	8006dc4 <xTaskIncrementTick>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8006d3e:	4b16      	ldr	r3, [pc, #88]	; (8006d98 <xTaskResumeAll+0x12c>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f1      	bne.n	8006d34 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8006d50:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <xTaskResumeAll+0x130>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006d56:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <xTaskResumeAll+0x12c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006d62:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <xTaskResumeAll+0x134>)
 8006d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006d72:	f001 fb71 	bl	8008458 <vPortExitCritical>

    return xAlreadyYielded;
 8006d76:	68bb      	ldr	r3, [r7, #8]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000374 	.word	0x20000374
 8006d84:	2000034c 	.word	0x2000034c
 8006d88:	2000030c 	.word	0x2000030c
 8006d8c:	20000354 	.word	0x20000354
 8006d90:	20000278 	.word	0x20000278
 8006d94:	20000274 	.word	0x20000274
 8006d98:	20000360 	.word	0x20000360
 8006d9c:	2000035c 	.word	0x2000035c
 8006da0:	e000ed04 	.word	0xe000ed04

08006da4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <xTaskGetTickCount+0x1c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006db0:	687b      	ldr	r3, [r7, #4]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20000350 	.word	0x20000350

08006dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dce:	4b4e      	ldr	r3, [pc, #312]	; (8006f08 <xTaskIncrementTick+0x144>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 808e 	bne.w	8006ef4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dd8:	4b4c      	ldr	r3, [pc, #304]	; (8006f0c <xTaskIncrementTick+0x148>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006de0:	4a4a      	ldr	r2, [pc, #296]	; (8006f0c <xTaskIncrementTick+0x148>)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d120      	bne.n	8006e2e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006dec:	4b48      	ldr	r3, [pc, #288]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <xTaskIncrementTick+0x48>
        __asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	603b      	str	r3, [r7, #0]
    }
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <xTaskIncrementTick+0x46>
 8006e0c:	4b40      	ldr	r3, [pc, #256]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	4b40      	ldr	r3, [pc, #256]	; (8006f14 <xTaskIncrementTick+0x150>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a3e      	ldr	r2, [pc, #248]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	4a3e      	ldr	r2, [pc, #248]	; (8006f14 <xTaskIncrementTick+0x150>)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	4b3d      	ldr	r3, [pc, #244]	; (8006f18 <xTaskIncrementTick+0x154>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	4a3c      	ldr	r2, [pc, #240]	; (8006f18 <xTaskIncrementTick+0x154>)
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	f000 faaf 	bl	800738c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006e2e:	4b3b      	ldr	r3, [pc, #236]	; (8006f1c <xTaskIncrementTick+0x158>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d348      	bcc.n	8006eca <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e38:	4b35      	ldr	r3, [pc, #212]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e42:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <xTaskIncrementTick+0x158>)
 8006e44:	f04f 32ff 	mov.w	r2, #4294967295
 8006e48:	601a      	str	r2, [r3, #0]
                    break;
 8006e4a:	e03e      	b.n	8006eca <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e4c:	4b30      	ldr	r3, [pc, #192]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d203      	bcs.n	8006e6c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006e64:	4a2d      	ldr	r2, [pc, #180]	; (8006f1c <xTaskIncrementTick+0x158>)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e6a:	e02e      	b.n	8006eca <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe ff76 	bl	8005d62 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	3318      	adds	r3, #24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe ff6d 	bl	8005d62 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	4b23      	ldr	r3, [pc, #140]	; (8006f20 <xTaskIncrementTick+0x15c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	4a22      	ldr	r2, [pc, #136]	; (8006f20 <xTaskIncrementTick+0x15c>)
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4a1f      	ldr	r2, [pc, #124]	; (8006f24 <xTaskIncrementTick+0x160>)
 8006ea8:	441a      	add	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f7fe fef9 	bl	8005ca8 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eba:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <xTaskIncrementTick+0x164>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d3b9      	bcc.n	8006e38 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec8:	e7b6      	b.n	8006e38 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006eca:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <xTaskIncrementTick+0x164>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed0:	4914      	ldr	r1, [pc, #80]	; (8006f24 <xTaskIncrementTick+0x160>)
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d901      	bls.n	8006ee6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <xTaskIncrementTick+0x168>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	e004      	b.n	8006efe <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <xTaskIncrementTick+0x16c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	4a0d      	ldr	r2, [pc, #52]	; (8006f30 <xTaskIncrementTick+0x16c>)
 8006efc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006efe:	697b      	ldr	r3, [r7, #20]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000374 	.word	0x20000374
 8006f0c:	20000350 	.word	0x20000350
 8006f10:	20000304 	.word	0x20000304
 8006f14:	20000308 	.word	0x20000308
 8006f18:	20000364 	.word	0x20000364
 8006f1c:	2000036c 	.word	0x2000036c
 8006f20:	20000354 	.word	0x20000354
 8006f24:	20000278 	.word	0x20000278
 8006f28:	20000274 	.word	0x20000274
 8006f2c:	20000360 	.word	0x20000360
 8006f30:	2000035c 	.word	0x2000035c

08006f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f3a:	4b27      	ldr	r3, [pc, #156]	; (8006fd8 <vTaskSwitchContext+0xa4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006f42:	4b26      	ldr	r3, [pc, #152]	; (8006fdc <vTaskSwitchContext+0xa8>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006f48:	e03f      	b.n	8006fca <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8006f4a:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <vTaskSwitchContext+0xa8>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f50:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <vTaskSwitchContext+0xac>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	fab3 f383 	clz	r3, r3
 8006f5c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
 8006f60:	f1c3 031f 	rsb	r3, r3, #31
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	491f      	ldr	r1, [pc, #124]	; (8006fe4 <vTaskSwitchContext+0xb0>)
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	607b      	str	r3, [r7, #4]
    }
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <vTaskSwitchContext+0x5a>
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4a12      	ldr	r2, [pc, #72]	; (8006fe4 <vTaskSwitchContext+0xb0>)
 8006f9c:	4413      	add	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d104      	bne.n	8006fc0 <vTaskSwitchContext+0x8c>
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	605a      	str	r2, [r3, #4]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <vTaskSwitchContext+0xb4>)
 8006fc8:	6013      	str	r3, [r2, #0]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000374 	.word	0x20000374
 8006fdc:	20000360 	.word	0x20000360
 8006fe0:	20000354 	.word	0x20000354
 8006fe4:	20000278 	.word	0x20000278
 8006fe8:	20000274 	.word	0x20000274

08006fec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60fb      	str	r3, [r7, #12]
    }
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <vTaskPlaceOnEventList+0x44>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3318      	adds	r3, #24
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fe fe68 	bl	8005cf0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007020:	2101      	movs	r1, #1
 8007022:	6838      	ldr	r0, [r7, #0]
 8007024:	f000 fcc8 	bl	80079b8 <prvAddCurrentTaskToDelayedList>
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000274 	.word	0x20000274

08007034 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	617b      	str	r3, [r7, #20]
    }
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800705c:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <vTaskPlaceOnEventListRestricted+0x54>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3318      	adds	r3, #24
 8007062:	4619      	mov	r1, r3
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7fe fe1f 	bl	8005ca8 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8007070:	f04f 33ff 	mov.w	r3, #4294967295
 8007074:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	68b8      	ldr	r0, [r7, #8]
 800707a:	f000 fc9d 	bl	80079b8 <prvAddCurrentTaskToDelayedList>
    }
 800707e:	bf00      	nop
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000274 	.word	0x20000274

0800708c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60fb      	str	r3, [r7, #12]
    }
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	3318      	adds	r3, #24
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fe fe50 	bl	8005d62 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c2:	4b1d      	ldr	r3, [pc, #116]	; (8007138 <xTaskRemoveFromEventList+0xac>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d11c      	bne.n	8007104 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fe47 	bl	8005d62 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	2201      	movs	r2, #1
 80070da:	409a      	lsls	r2, r3
 80070dc:	4b17      	ldr	r3, [pc, #92]	; (800713c <xTaskRemoveFromEventList+0xb0>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	4a16      	ldr	r2, [pc, #88]	; (800713c <xTaskRemoveFromEventList+0xb0>)
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4a13      	ldr	r2, [pc, #76]	; (8007140 <xTaskRemoveFromEventList+0xb4>)
 80070f4:	441a      	add	r2, r3
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f7fe fdd3 	bl	8005ca8 <vListInsertEnd>
 8007102:	e005      	b.n	8007110 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	3318      	adds	r3, #24
 8007108:	4619      	mov	r1, r3
 800710a:	480e      	ldr	r0, [pc, #56]	; (8007144 <xTaskRemoveFromEventList+0xb8>)
 800710c:	f7fe fdcc 	bl	8005ca8 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007114:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <xTaskRemoveFromEventList+0xbc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	429a      	cmp	r2, r3
 800711c:	d905      	bls.n	800712a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800711e:	2301      	movs	r3, #1
 8007120:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <xTaskRemoveFromEventList+0xc0>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e001      	b.n	800712e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800712e:	697b      	ldr	r3, [r7, #20]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000374 	.word	0x20000374
 800713c:	20000354 	.word	0x20000354
 8007140:	20000278 	.word	0x20000278
 8007144:	2000030c 	.word	0x2000030c
 8007148:	20000274 	.word	0x20000274
 800714c:	20000360 	.word	0x20000360

08007150 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007158:	4b06      	ldr	r3, [pc, #24]	; (8007174 <vTaskInternalSetTimeOutState+0x24>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <vTaskInternalSetTimeOutState+0x28>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	605a      	str	r2, [r3, #4]
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	20000364 	.word	0x20000364
 8007178:	20000350 	.word	0x20000350

0800717c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	613b      	str	r3, [r7, #16]
    }
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	60fb      	str	r3, [r7, #12]
    }
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80071be:	f001 f91b 	bl	80083f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80071c2:	4b1f      	ldr	r3, [pc, #124]	; (8007240 <xTaskCheckForTimeOut+0xc4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d102      	bne.n	80071e2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80071dc:	2300      	movs	r3, #0
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	e026      	b.n	8007230 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b17      	ldr	r3, [pc, #92]	; (8007244 <xTaskCheckForTimeOut+0xc8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d00a      	beq.n	8007204 <xTaskCheckForTimeOut+0x88>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d305      	bcc.n	8007204 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e015      	b.n	8007230 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	429a      	cmp	r2, r3
 800720c:	d20b      	bcs.n	8007226 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff ff98 	bl	8007150 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007220:	2300      	movs	r3, #0
 8007222:	61fb      	str	r3, [r7, #28]
 8007224:	e004      	b.n	8007230 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007230:	f001 f912 	bl	8008458 <vPortExitCritical>

    return xReturn;
 8007234:	69fb      	ldr	r3, [r7, #28]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000350 	.word	0x20000350
 8007244:	20000364 	.word	0x20000364

08007248 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800724c:	4b03      	ldr	r3, [pc, #12]	; (800725c <vTaskMissedYield+0x14>)
 800724e:	2201      	movs	r2, #1
 8007250:	601a      	str	r2, [r3, #0]
}
 8007252:	bf00      	nop
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	20000360 	.word	0x20000360

08007260 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007268:	f000 f852 	bl	8007310 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800726c:	4b06      	ldr	r3, [pc, #24]	; (8007288 <prvIdleTask+0x28>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d9f9      	bls.n	8007268 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <prvIdleTask+0x2c>)
 8007276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007284:	e7f0      	b.n	8007268 <prvIdleTask+0x8>
 8007286:	bf00      	nop
 8007288:	20000278 	.word	0x20000278
 800728c:	e000ed04 	.word	0xe000ed04

08007290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007296:	2300      	movs	r3, #0
 8007298:	607b      	str	r3, [r7, #4]
 800729a:	e00c      	b.n	80072b6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4a12      	ldr	r2, [pc, #72]	; (80072f0 <prvInitialiseTaskLists+0x60>)
 80072a8:	4413      	add	r3, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fccf 	bl	8005c4e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3301      	adds	r3, #1
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d9ef      	bls.n	800729c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80072bc:	480d      	ldr	r0, [pc, #52]	; (80072f4 <prvInitialiseTaskLists+0x64>)
 80072be:	f7fe fcc6 	bl	8005c4e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80072c2:	480d      	ldr	r0, [pc, #52]	; (80072f8 <prvInitialiseTaskLists+0x68>)
 80072c4:	f7fe fcc3 	bl	8005c4e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80072c8:	480c      	ldr	r0, [pc, #48]	; (80072fc <prvInitialiseTaskLists+0x6c>)
 80072ca:	f7fe fcc0 	bl	8005c4e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80072ce:	480c      	ldr	r0, [pc, #48]	; (8007300 <prvInitialiseTaskLists+0x70>)
 80072d0:	f7fe fcbd 	bl	8005c4e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80072d4:	480b      	ldr	r0, [pc, #44]	; (8007304 <prvInitialiseTaskLists+0x74>)
 80072d6:	f7fe fcba 	bl	8005c4e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80072da:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <prvInitialiseTaskLists+0x78>)
 80072dc:	4a05      	ldr	r2, [pc, #20]	; (80072f4 <prvInitialiseTaskLists+0x64>)
 80072de:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <prvInitialiseTaskLists+0x7c>)
 80072e2:	4a05      	ldr	r2, [pc, #20]	; (80072f8 <prvInitialiseTaskLists+0x68>)
 80072e4:	601a      	str	r2, [r3, #0]
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000278 	.word	0x20000278
 80072f4:	200002dc 	.word	0x200002dc
 80072f8:	200002f0 	.word	0x200002f0
 80072fc:	2000030c 	.word	0x2000030c
 8007300:	20000320 	.word	0x20000320
 8007304:	20000338 	.word	0x20000338
 8007308:	20000304 	.word	0x20000304
 800730c:	20000308 	.word	0x20000308

08007310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007316:	e019      	b.n	800734c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007318:	f001 f86e 	bl	80083f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800731c:	4b10      	ldr	r3, [pc, #64]	; (8007360 <prvCheckTasksWaitingTermination+0x50>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3304      	adds	r3, #4
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fd1a 	bl	8005d62 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800732e:	4b0d      	ldr	r3, [pc, #52]	; (8007364 <prvCheckTasksWaitingTermination+0x54>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3b01      	subs	r3, #1
 8007334:	4a0b      	ldr	r2, [pc, #44]	; (8007364 <prvCheckTasksWaitingTermination+0x54>)
 8007336:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007338:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <prvCheckTasksWaitingTermination+0x58>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3b01      	subs	r3, #1
 800733e:	4a0a      	ldr	r2, [pc, #40]	; (8007368 <prvCheckTasksWaitingTermination+0x58>)
 8007340:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007342:	f001 f889 	bl	8008458 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f810 	bl	800736c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <prvCheckTasksWaitingTermination+0x58>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e1      	bne.n	8007318 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000320 	.word	0x20000320
 8007364:	2000034c 	.word	0x2000034c
 8007368:	20000334 	.word	0x20000334

0800736c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	4618      	mov	r0, r3
 800737a:	f001 fa3f 	bl	80087fc <vPortFree>
                vPortFree( pxTCB );
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fa3c 	bl	80087fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007384:	bf00      	nop
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007390:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <prvResetNextTaskUnblockTime+0x30>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <prvResetNextTaskUnblockTime+0x34>)
 800739c:	f04f 32ff 	mov.w	r2, #4294967295
 80073a0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80073a2:	e005      	b.n	80073b0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <prvResetNextTaskUnblockTime+0x30>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a04      	ldr	r2, [pc, #16]	; (80073c0 <prvResetNextTaskUnblockTime+0x34>)
 80073ae:	6013      	str	r3, [r2, #0]
}
 80073b0:	bf00      	nop
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20000304 	.word	0x20000304
 80073c0:	2000036c 	.word	0x2000036c

080073c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80073ca:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <xTaskGetSchedulerState+0x34>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80073d2:	2301      	movs	r3, #1
 80073d4:	607b      	str	r3, [r7, #4]
 80073d6:	e008      	b.n	80073ea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d8:	4b08      	ldr	r3, [pc, #32]	; (80073fc <xTaskGetSchedulerState+0x38>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80073e0:	2302      	movs	r3, #2
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	e001      	b.n	80073ea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80073e6:	2300      	movs	r3, #0
 80073e8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80073ea:	687b      	ldr	r3, [r7, #4]
    }
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	20000358 	.word	0x20000358
 80073fc:	20000374 	.word	0x20000374

08007400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d063      	beq.n	80074de <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007416:	4b34      	ldr	r3, [pc, #208]	; (80074e8 <xTaskPriorityDisinherit+0xe8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	429a      	cmp	r2, r3
 800741e:	d00a      	beq.n	8007436 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
    }
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10a      	bne.n	8007454 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	60bb      	str	r3, [r7, #8]
    }
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007458:	1e5a      	subs	r2, r3, #1
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007466:	429a      	cmp	r2, r3
 8007468:	d039      	beq.n	80074de <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d135      	bne.n	80074de <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3304      	adds	r3, #4
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fc73 	bl	8005d62 <uxListRemove>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	2201      	movs	r2, #1
 8007488:	fa02 f303 	lsl.w	r3, r2, r3
 800748c:	43da      	mvns	r2, r3
 800748e:	4b17      	ldr	r3, [pc, #92]	; (80074ec <xTaskPriorityDisinherit+0xec>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4013      	ands	r3, r2
 8007494:	4a15      	ldr	r2, [pc, #84]	; (80074ec <xTaskPriorityDisinherit+0xec>)
 8007496:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	f1c3 0205 	rsb	r2, r3, #5
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	2201      	movs	r2, #1
 80074b2:	409a      	lsls	r2, r3
 80074b4:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <xTaskPriorityDisinherit+0xec>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	4a0c      	ldr	r2, [pc, #48]	; (80074ec <xTaskPriorityDisinherit+0xec>)
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <xTaskPriorityDisinherit+0xf0>)
 80074cc:	441a      	add	r2, r3
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f7fe fbe7 	bl	8005ca8 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80074de:	697b      	ldr	r3, [r7, #20]
    }
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000274 	.word	0x20000274
 80074ec:	20000354 	.word	0x20000354
 80074f0:	20000278 	.word	0x20000278

080074f4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	613b      	str	r3, [r7, #16]
    }
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800751e:	f000 ff6b 	bl	80083f8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007522:	4b32      	ldr	r3, [pc, #200]	; (80075ec <xTaskGenericNotifyWait+0xf8>)
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	3354      	adds	r3, #84	; 0x54
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d022      	beq.n	800757a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8007534:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <xTaskGenericNotifyWait+0xf8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	3214      	adds	r2, #20
 800753c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	43d2      	mvns	r2, r2
 8007544:	4011      	ands	r1, r2
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	3214      	adds	r2, #20
 800754a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800754e:	4b27      	ldr	r3, [pc, #156]	; (80075ec <xTaskGenericNotifyWait+0xf8>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	3354      	adds	r3, #84	; 0x54
 8007558:	2201      	movs	r2, #1
 800755a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007562:	2101      	movs	r1, #1
 8007564:	6a38      	ldr	r0, [r7, #32]
 8007566:	f000 fa27 	bl	80079b8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800756a:	4b21      	ldr	r3, [pc, #132]	; (80075f0 <xTaskGenericNotifyWait+0xfc>)
 800756c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800757a:	f000 ff6d 	bl	8008458 <vPortExitCritical>

        taskENTER_CRITICAL();
 800757e:	f000 ff3b 	bl	80083f8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8007588:	4b18      	ldr	r3, [pc, #96]	; (80075ec <xTaskGenericNotifyWait+0xf8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	3214      	adds	r2, #20
 8007590:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007598:	4b14      	ldr	r3, [pc, #80]	; (80075ec <xTaskGenericNotifyWait+0xf8>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	3354      	adds	r3, #84	; 0x54
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d002      	beq.n	80075b0 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	e00e      	b.n	80075ce <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80075b0:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <xTaskGenericNotifyWait+0xf8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	3214      	adds	r2, #20
 80075b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	43d2      	mvns	r2, r2
 80075c0:	4011      	ands	r1, r2
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	3214      	adds	r2, #20
 80075c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80075ca:	2301      	movs	r3, #1
 80075cc:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80075ce:	4b07      	ldr	r3, [pc, #28]	; (80075ec <xTaskGenericNotifyWait+0xf8>)
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4413      	add	r3, r2
 80075d6:	3354      	adds	r3, #84	; 0x54
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80075dc:	f000 ff3c 	bl	8008458 <vPortExitCritical>

        return xReturn;
 80075e0:	697b      	ldr	r3, [r7, #20]
    }
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000274 	.word	0x20000274
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08c      	sub	sp, #48	; 0x30
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8007602:	2301      	movs	r3, #1
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <xTaskGenericNotify+0x2e>
        __asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	623b      	str	r3, [r7, #32]
    }
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <xTaskGenericNotify+0x4a>
        __asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	61fb      	str	r3, [r7, #28]
    }
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8007642:	f000 fed9 	bl	80083f8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d006      	beq.n	800765a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	3214      	adds	r2, #20
 8007652:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800765a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	4413      	add	r3, r2
 8007660:	3354      	adds	r3, #84	; 0x54
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	4413      	add	r3, r2
 800766e:	3354      	adds	r3, #84	; 0x54
 8007670:	2202      	movs	r2, #2
 8007672:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	2b04      	cmp	r3, #4
 8007678:	d83b      	bhi.n	80076f2 <xTaskGenericNotify+0xfe>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <xTaskGenericNotify+0x8c>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	08007711 	.word	0x08007711
 8007684:	08007695 	.word	0x08007695
 8007688:	080076b1 	.word	0x080076b1
 800768c:	080076c9 	.word	0x080076c9
 8007690:	080076d7 	.word	0x080076d7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	3214      	adds	r2, #20
 800769a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	ea42 0103 	orr.w	r1, r2, r3
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	3214      	adds	r2, #20
 80076aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80076ae:	e032      	b.n	8007716 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	3214      	adds	r2, #20
 80076b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ba:	1c59      	adds	r1, r3, #1
 80076bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	3214      	adds	r2, #20
 80076c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80076c6:	e026      	b.n	8007716 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	3214      	adds	r2, #20
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80076d4:	e01f      	b.n	8007716 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80076d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d006      	beq.n	80076ec <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	3214      	adds	r2, #20
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80076ea:	e014      	b.n	8007716 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80076f0:	e011      	b.n	8007716 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80076f2:	4b2b      	ldr	r3, [pc, #172]	; (80077a0 <xTaskGenericNotify+0x1ac>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00c      	beq.n	8007714 <xTaskGenericNotify+0x120>
        __asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	61bb      	str	r3, [r7, #24]
    }
 800770c:	bf00      	nop
 800770e:	e7fe      	b.n	800770e <xTaskGenericNotify+0x11a>
                    break;
 8007710:	bf00      	nop
 8007712:	e000      	b.n	8007716 <xTaskGenericNotify+0x122>

                    break;
 8007714:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800771a:	2b01      	cmp	r3, #1
 800771c:	d139      	bne.n	8007792 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	3304      	adds	r3, #4
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe fb1d 	bl	8005d62 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	2201      	movs	r2, #1
 800772e:	409a      	lsls	r2, r3
 8007730:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <xTaskGenericNotify+0x1b0>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4313      	orrs	r3, r2
 8007736:	4a1b      	ldr	r2, [pc, #108]	; (80077a4 <xTaskGenericNotify+0x1b0>)
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <xTaskGenericNotify+0x1b4>)
 8007748:	441a      	add	r2, r3
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f7fe faa9 	bl	8005ca8 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <xTaskGenericNotify+0x180>
        __asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	617b      	str	r3, [r7, #20]
    }
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <xTaskGenericNotify+0x1b8>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	429a      	cmp	r2, r3
 8007780:	d907      	bls.n	8007792 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <xTaskGenericNotify+0x1bc>)
 8007784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007792:	f000 fe61 	bl	8008458 <vPortExitCritical>

        return xReturn;
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8007798:	4618      	mov	r0, r3
 800779a:	3730      	adds	r7, #48	; 0x30
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000350 	.word	0x20000350
 80077a4:	20000354 	.word	0x20000354
 80077a8:	20000278 	.word	0x20000278
 80077ac:	20000274 	.word	0x20000274
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b090      	sub	sp, #64	; 0x40
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80077c2:	2301      	movs	r3, #1
 80077c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077fe:	f000 fedd 	bl	80085bc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8007806:	f3ef 8211 	mrs	r2, BASEPRI
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	627a      	str	r2, [r7, #36]	; 0x24
 800781c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8007822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007824:	2b00      	cmp	r3, #0
 8007826:	d006      	beq.n	8007836 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	3214      	adds	r2, #20
 800782e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007834:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4413      	add	r3, r2
 800783c:	3354      	adds	r3, #84	; 0x54
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4413      	add	r3, r2
 800784a:	3354      	adds	r3, #84	; 0x54
 800784c:	2202      	movs	r2, #2
 800784e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	2b04      	cmp	r3, #4
 8007854:	d83b      	bhi.n	80078ce <xTaskGenericNotifyFromISR+0x11a>
 8007856:	a201      	add	r2, pc, #4	; (adr r2, 800785c <xTaskGenericNotifyFromISR+0xa8>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	080078ed 	.word	0x080078ed
 8007860:	08007871 	.word	0x08007871
 8007864:	0800788d 	.word	0x0800788d
 8007868:	080078a5 	.word	0x080078a5
 800786c:	080078b3 	.word	0x080078b3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	3214      	adds	r2, #20
 8007876:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	ea42 0103 	orr.w	r1, r2, r3
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	3214      	adds	r2, #20
 8007886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800788a:	e032      	b.n	80078f2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	3214      	adds	r2, #20
 8007892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007896:	1c59      	adds	r1, r3, #1
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	3214      	adds	r2, #20
 800789e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80078a2:	e026      	b.n	80078f2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	3214      	adds	r2, #20
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80078b0:	e01f      	b.n	80078f2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80078b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d006      	beq.n	80078c8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	3214      	adds	r2, #20
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80078c6:	e014      	b.n	80078f2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80078cc:	e011      	b.n	80078f2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80078ce:	4b33      	ldr	r3, [pc, #204]	; (800799c <xTaskGenericNotifyFromISR+0x1e8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00c      	beq.n	80078f0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	61fb      	str	r3, [r7, #28]
    }
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <xTaskGenericNotifyFromISR+0x136>
                    break;
 80078ec:	bf00      	nop
 80078ee:	e000      	b.n	80078f2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80078f0:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80078f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d145      	bne.n	8007986 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	61bb      	str	r3, [r7, #24]
    }
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007918:	4b21      	ldr	r3, [pc, #132]	; (80079a0 <xTaskGenericNotifyFromISR+0x1ec>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d11c      	bne.n	800795a <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007922:	3304      	adds	r3, #4
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe fa1c 	bl	8005d62 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800792a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	2201      	movs	r2, #1
 8007930:	409a      	lsls	r2, r3
 8007932:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <xTaskGenericNotifyFromISR+0x1f0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4313      	orrs	r3, r2
 8007938:	4a1a      	ldr	r2, [pc, #104]	; (80079a4 <xTaskGenericNotifyFromISR+0x1f0>)
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <xTaskGenericNotifyFromISR+0x1f4>)
 800794a:	441a      	add	r2, r3
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	3304      	adds	r3, #4
 8007950:	4619      	mov	r1, r3
 8007952:	4610      	mov	r0, r2
 8007954:	f7fe f9a8 	bl	8005ca8 <vListInsertEnd>
 8007958:	e005      	b.n	8007966 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	3318      	adds	r3, #24
 800795e:	4619      	mov	r1, r3
 8007960:	4812      	ldr	r0, [pc, #72]	; (80079ac <xTaskGenericNotifyFromISR+0x1f8>)
 8007962:	f7fe f9a1 	bl	8005ca8 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796a:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <xTaskGenericNotifyFromISR+0x1fc>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	429a      	cmp	r2, r3
 8007972:	d908      	bls.n	8007986 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800797a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797c:	2201      	movs	r2, #1
 800797e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <xTaskGenericNotifyFromISR+0x200>)
 8007982:	2201      	movs	r2, #1
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007988:	617b      	str	r3, [r7, #20]
        __asm volatile
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f383 8811 	msr	BASEPRI, r3
    }
 8007990:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8007994:	4618      	mov	r0, r3
 8007996:	3740      	adds	r7, #64	; 0x40
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000350 	.word	0x20000350
 80079a0:	20000374 	.word	0x20000374
 80079a4:	20000354 	.word	0x20000354
 80079a8:	20000278 	.word	0x20000278
 80079ac:	2000030c 	.word	0x2000030c
 80079b0:	20000274 	.word	0x20000274
 80079b4:	20000360 	.word	0x20000360

080079b8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80079c2:	4b29      	ldr	r3, [pc, #164]	; (8007a68 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079c8:	4b28      	ldr	r3, [pc, #160]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3304      	adds	r3, #4
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe f9c7 	bl	8005d62 <uxListRemove>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079da:	4b24      	ldr	r3, [pc, #144]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	2201      	movs	r2, #1
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43da      	mvns	r2, r3
 80079e8:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <prvAddCurrentTaskToDelayedList+0xb8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4013      	ands	r3, r2
 80079ee:	4a20      	ldr	r2, [pc, #128]	; (8007a70 <prvAddCurrentTaskToDelayedList+0xb8>)
 80079f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d10a      	bne.n	8007a10 <prvAddCurrentTaskToDelayedList+0x58>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d007      	beq.n	8007a10 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	481a      	ldr	r0, [pc, #104]	; (8007a74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a0a:	f7fe f94d 	bl	8005ca8 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007a0e:	e026      	b.n	8007a5e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a18:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d209      	bcs.n	8007a3c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a28:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4619      	mov	r1, r3
 8007a34:	4610      	mov	r0, r2
 8007a36:	f7fe f95b 	bl	8005cf0 <vListInsert>
}
 8007a3a:	e010      	b.n	8007a5e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3304      	adds	r3, #4
 8007a46:	4619      	mov	r1, r3
 8007a48:	4610      	mov	r0, r2
 8007a4a:	f7fe f951 	bl	8005cf0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d202      	bcs.n	8007a5e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	6013      	str	r3, [r2, #0]
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20000350 	.word	0x20000350
 8007a6c:	20000274 	.word	0x20000274
 8007a70:	20000354 	.word	0x20000354
 8007a74:	20000338 	.word	0x20000338
 8007a78:	20000308 	.word	0x20000308
 8007a7c:	20000304 	.word	0x20000304
 8007a80:	2000036c 	.word	0x2000036c

08007a84 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007a8e:	f000 fb31 	bl	80080f4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007a92:	4b11      	ldr	r3, [pc, #68]	; (8007ad8 <xTimerCreateTimerTask+0x54>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8007a9a:	4b10      	ldr	r3, [pc, #64]	; (8007adc <xTimerCreateTimerTask+0x58>)
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007aa8:	490d      	ldr	r1, [pc, #52]	; (8007ae0 <xTimerCreateTimerTask+0x5c>)
 8007aaa:	480e      	ldr	r0, [pc, #56]	; (8007ae4 <xTimerCreateTimerTask+0x60>)
 8007aac:	f7fe ff38 	bl	8006920 <xTaskCreate>
 8007ab0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	603b      	str	r3, [r7, #0]
    }
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007ace:	687b      	ldr	r3, [r7, #4]
    }
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	200003a8 	.word	0x200003a8
 8007adc:	200003ac 	.word	0x200003ac
 8007ae0:	0800972c 	.word	0x0800972c
 8007ae4:	08007cd5 	.word	0x08007cd5

08007ae8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007af6:	202c      	movs	r0, #44	; 0x2c
 8007af8:	f000 fda0 	bl	800863c <pvPortMalloc>
 8007afc:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00d      	beq.n	8007b20 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 f805 	bl	8007b2a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8007b20:	697b      	ldr	r3, [r7, #20]
        }
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b086      	sub	sp, #24
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
 8007b36:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	617b      	str	r3, [r7, #20]
    }
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01e      	beq.n	8007b98 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8007b5a:	f000 facb 	bl	80080f4 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	6a3a      	ldr	r2, [r7, #32]
 8007b74:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	3304      	adds	r3, #4
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe f887 	bl	8005c8e <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d008      	beq.n	8007b98 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b8c:	f043 0304 	orr.w	r3, r3, #4
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8007b98:	bf00      	nop
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08a      	sub	sp, #40	; 0x28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <xTimerGenericCommand+0x2e>
        __asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	623b      	str	r3, [r7, #32]
    }
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007bce:	4b1a      	ldr	r3, [pc, #104]	; (8007c38 <xTimerGenericCommand+0x98>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02a      	beq.n	8007c2c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b05      	cmp	r3, #5
 8007be6:	dc18      	bgt.n	8007c1a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007be8:	f7ff fbec 	bl	80073c4 <xTaskGetSchedulerState>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d109      	bne.n	8007c06 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bf2:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <xTimerGenericCommand+0x98>)
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	f107 0114 	add.w	r1, r7, #20
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfe:	f7fe f9c5 	bl	8005f8c <xQueueGenericSend>
 8007c02:	6278      	str	r0, [r7, #36]	; 0x24
 8007c04:	e012      	b.n	8007c2c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c06:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <xTimerGenericCommand+0x98>)
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	f107 0114 	add.w	r1, r7, #20
 8007c0e:	2300      	movs	r3, #0
 8007c10:	2200      	movs	r2, #0
 8007c12:	f7fe f9bb 	bl	8005f8c <xQueueGenericSend>
 8007c16:	6278      	str	r0, [r7, #36]	; 0x24
 8007c18:	e008      	b.n	8007c2c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c1a:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <xTimerGenericCommand+0x98>)
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	f107 0114 	add.w	r1, r7, #20
 8007c22:	2300      	movs	r3, #0
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	f7fe faaf 	bl	8006188 <xQueueGenericSendFromISR>
 8007c2a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3728      	adds	r7, #40	; 0x28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	200003a8 	.word	0x200003a8

08007c3c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c46:	4b22      	ldr	r3, [pc, #136]	; (8007cd0 <prvProcessExpiredTimer+0x94>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	3304      	adds	r3, #4
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe f884 	bl	8005d62 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d022      	beq.n	8007cae <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	699a      	ldr	r2, [r3, #24]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	18d1      	adds	r1, r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	6978      	ldr	r0, [r7, #20]
 8007c76:	f000 f8d1 	bl	8007e1c <prvInsertTimerInActiveList>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01f      	beq.n	8007cc0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c80:	2300      	movs	r3, #0
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	2100      	movs	r1, #0
 8007c8a:	6978      	ldr	r0, [r7, #20]
 8007c8c:	f7ff ff88 	bl	8007ba0 <xTimerGenericCommand>
 8007c90:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d113      	bne.n	8007cc0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	60fb      	str	r3, [r7, #12]
    }
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cb4:	f023 0301 	bic.w	r3, r3, #1
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	6978      	ldr	r0, [r7, #20]
 8007cc6:	4798      	blx	r3
    }
 8007cc8:	bf00      	nop
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	200003a0 	.word	0x200003a0

08007cd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cdc:	f107 0308 	add.w	r3, r7, #8
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f857 	bl	8007d94 <prvGetNextExpireTime>
 8007ce6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4619      	mov	r1, r3
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f803 	bl	8007cf8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007cf2:	f000 f8d5 	bl	8007ea0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cf6:	e7f1      	b.n	8007cdc <prvTimerTask+0x8>

08007cf8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007d02:	f7fe ffa5 	bl	8006c50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d06:	f107 0308 	add.w	r3, r7, #8
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 f866 	bl	8007ddc <prvSampleTimeNow>
 8007d10:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d130      	bne.n	8007d7a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <prvProcessTimerOrBlockTask+0x3c>
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d806      	bhi.n	8007d34 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007d26:	f7fe ffa1 	bl	8006c6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff ff85 	bl	8007c3c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007d32:	e024      	b.n	8007d7e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d008      	beq.n	8007d4c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d3a:	4b13      	ldr	r3, [pc, #76]	; (8007d88 <prvProcessTimerOrBlockTask+0x90>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <prvProcessTimerOrBlockTask+0x50>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e000      	b.n	8007d4a <prvProcessTimerOrBlockTask+0x52>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <prvProcessTimerOrBlockTask+0x94>)
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	f7fe fdad 	bl	80068b8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007d5e:	f7fe ff85 	bl	8006c6c <xTaskResumeAll>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10a      	bne.n	8007d7e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007d68:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <prvProcessTimerOrBlockTask+0x98>)
 8007d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	f3bf 8f6f 	isb	sy
    }
 8007d78:	e001      	b.n	8007d7e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007d7a:	f7fe ff77 	bl	8006c6c <xTaskResumeAll>
    }
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	200003a4 	.word	0x200003a4
 8007d8c:	200003a8 	.word	0x200003a8
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d9c:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <prvGetNextExpireTime+0x44>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <prvGetNextExpireTime+0x16>
 8007da6:	2201      	movs	r2, #1
 8007da8:	e000      	b.n	8007dac <prvGetNextExpireTime+0x18>
 8007daa:	2200      	movs	r2, #0
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007db8:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <prvGetNextExpireTime+0x44>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	e001      	b.n	8007dc8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
    }
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	200003a0 	.word	0x200003a0

08007ddc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007de4:	f7fe ffde 	bl	8006da4 <xTaskGetTickCount>
 8007de8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007dea:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <prvSampleTimeNow+0x3c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d205      	bcs.n	8007e00 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007df4:	f000 f91a 	bl	800802c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e002      	b.n	8007e06 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007e06:	4a04      	ldr	r2, [pc, #16]	; (8007e18 <prvSampleTimeNow+0x3c>)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
    }
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	200003b0 	.word	0x200003b0

08007e1c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d812      	bhi.n	8007e68 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	1ad2      	subs	r2, r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d302      	bcc.n	8007e56 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007e50:	2301      	movs	r3, #1
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	e01b      	b.n	8007e8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e56:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <prvInsertTimerInActiveList+0x7c>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4610      	mov	r0, r2
 8007e62:	f7fd ff45 	bl	8005cf0 <vListInsert>
 8007e66:	e012      	b.n	8007e8e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d206      	bcs.n	8007e7e <prvInsertTimerInActiveList+0x62>
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d302      	bcc.n	8007e7e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	e007      	b.n	8007e8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e7e:	4b07      	ldr	r3, [pc, #28]	; (8007e9c <prvInsertTimerInActiveList+0x80>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3304      	adds	r3, #4
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7fd ff31 	bl	8005cf0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007e8e:	697b      	ldr	r3, [r7, #20]
    }
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	200003a4 	.word	0x200003a4
 8007e9c:	200003a0 	.word	0x200003a0

08007ea0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08c      	sub	sp, #48	; 0x30
 8007ea4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ea6:	e0ae      	b.n	8008006 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f2c0 80aa 	blt.w	8008004 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d004      	beq.n	8007ec6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fd ff4e 	bl	8005d62 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ec6:	1d3b      	adds	r3, r7, #4
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff ff87 	bl	8007ddc <prvSampleTimeNow>
 8007ece:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2b09      	cmp	r3, #9
 8007ed4:	f200 8097 	bhi.w	8008006 <prvProcessReceivedCommands+0x166>
 8007ed8:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <prvProcessReceivedCommands+0x40>)
 8007eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ede:	bf00      	nop
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f09 	.word	0x08007f09
 8007ee8:	08007f09 	.word	0x08007f09
 8007eec:	08007f7d 	.word	0x08007f7d
 8007ef0:	08007f91 	.word	0x08007f91
 8007ef4:	08007fdb 	.word	0x08007fdb
 8007ef8:	08007f09 	.word	0x08007f09
 8007efc:	08007f09 	.word	0x08007f09
 8007f00:	08007f7d 	.word	0x08007f7d
 8007f04:	08007f91 	.word	0x08007f91
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	18d1      	adds	r1, r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a3a      	ldr	r2, [r7, #32]
 8007f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f28:	f7ff ff78 	bl	8007e1c <prvInsertTimerInActiveList>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d069      	beq.n	8008006 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f38:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d05e      	beq.n	8008006 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	441a      	add	r2, r3
 8007f50:	2300      	movs	r3, #0
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	2300      	movs	r3, #0
 8007f56:	2100      	movs	r1, #0
 8007f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f5a:	f7ff fe21 	bl	8007ba0 <xTimerGenericCommand>
 8007f5e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d14f      	bne.n	8008006 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	61bb      	str	r3, [r7, #24]
    }
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f82:	f023 0301 	bic.w	r3, r3, #1
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007f8e:	e03a      	b.n	8008006 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f96:	f043 0301 	orr.w	r3, r3, #1
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	617b      	str	r3, [r7, #20]
    }
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	699a      	ldr	r2, [r3, #24]
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	18d1      	adds	r1, r2, r3
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	6a3a      	ldr	r2, [r7, #32]
 8007fd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fd4:	f7ff ff22 	bl	8007e1c <prvInsertTimerInActiveList>
                        break;
 8007fd8:	e015      	b.n	8008006 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d103      	bne.n	8007ff0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fea:	f000 fc07 	bl	80087fc <vPortFree>
 8007fee:	e00a      	b.n	8008006 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008002:	e000      	b.n	8008006 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8008004:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008006:	4b08      	ldr	r3, [pc, #32]	; (8008028 <prvProcessReceivedCommands+0x188>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f107 0108 	add.w	r1, r7, #8
 800800e:	2200      	movs	r2, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f7fe f963 	bl	80062dc <xQueueReceive>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	f47f af45 	bne.w	8007ea8 <prvProcessReceivedCommands+0x8>
        }
    }
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	3728      	adds	r7, #40	; 0x28
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	200003a8 	.word	0x200003a8

0800802c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008032:	e048      	b.n	80080c6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008034:	4b2d      	ldr	r3, [pc, #180]	; (80080ec <prvSwitchTimerLists+0xc0>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800803e:	4b2b      	ldr	r3, [pc, #172]	; (80080ec <prvSwitchTimerLists+0xc0>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3304      	adds	r3, #4
 800804c:	4618      	mov	r0, r3
 800804e:	f7fd fe88 	bl	8005d62 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b00      	cmp	r3, #0
 8008066:	d02e      	beq.n	80080c6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4413      	add	r3, r2
 8008070:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	429a      	cmp	r2, r3
 8008078:	d90e      	bls.n	8008098 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008086:	4b19      	ldr	r3, [pc, #100]	; (80080ec <prvSwitchTimerLists+0xc0>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3304      	adds	r3, #4
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f7fd fe2d 	bl	8005cf0 <vListInsert>
 8008096:	e016      	b.n	80080c6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008098:	2300      	movs	r3, #0
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	2300      	movs	r3, #0
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	2100      	movs	r1, #0
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7ff fd7c 	bl	8007ba0 <xTimerGenericCommand>
 80080a8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	603b      	str	r3, [r7, #0]
    }
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <prvSwitchTimerLists+0xc0>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1b1      	bne.n	8008034 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80080d0:	4b06      	ldr	r3, [pc, #24]	; (80080ec <prvSwitchTimerLists+0xc0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80080d6:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <prvSwitchTimerLists+0xc4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a04      	ldr	r2, [pc, #16]	; (80080ec <prvSwitchTimerLists+0xc0>)
 80080dc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80080de:	4a04      	ldr	r2, [pc, #16]	; (80080f0 <prvSwitchTimerLists+0xc4>)
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	6013      	str	r3, [r2, #0]
    }
 80080e4:	bf00      	nop
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	200003a0 	.word	0x200003a0
 80080f0:	200003a4 	.word	0x200003a4

080080f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80080f8:	f000 f97e 	bl	80083f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80080fc:	4b12      	ldr	r3, [pc, #72]	; (8008148 <prvCheckForValidListAndQueue+0x54>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d11d      	bne.n	8008140 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008104:	4811      	ldr	r0, [pc, #68]	; (800814c <prvCheckForValidListAndQueue+0x58>)
 8008106:	f7fd fda2 	bl	8005c4e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800810a:	4811      	ldr	r0, [pc, #68]	; (8008150 <prvCheckForValidListAndQueue+0x5c>)
 800810c:	f7fd fd9f 	bl	8005c4e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008110:	4b10      	ldr	r3, [pc, #64]	; (8008154 <prvCheckForValidListAndQueue+0x60>)
 8008112:	4a0e      	ldr	r2, [pc, #56]	; (800814c <prvCheckForValidListAndQueue+0x58>)
 8008114:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008116:	4b10      	ldr	r3, [pc, #64]	; (8008158 <prvCheckForValidListAndQueue+0x64>)
 8008118:	4a0d      	ldr	r2, [pc, #52]	; (8008150 <prvCheckForValidListAndQueue+0x5c>)
 800811a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800811c:	2200      	movs	r2, #0
 800811e:	210c      	movs	r1, #12
 8008120:	200a      	movs	r0, #10
 8008122:	f7fd feb1 	bl	8005e88 <xQueueGenericCreate>
 8008126:	4603      	mov	r3, r0
 8008128:	4a07      	ldr	r2, [pc, #28]	; (8008148 <prvCheckForValidListAndQueue+0x54>)
 800812a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <prvCheckForValidListAndQueue+0x54>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008134:	4b04      	ldr	r3, [pc, #16]	; (8008148 <prvCheckForValidListAndQueue+0x54>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4908      	ldr	r1, [pc, #32]	; (800815c <prvCheckForValidListAndQueue+0x68>)
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe fb92 	bl	8006864 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008140:	f000 f98a 	bl	8008458 <vPortExitCritical>
    }
 8008144:	bf00      	nop
 8008146:	bd80      	pop	{r7, pc}
 8008148:	200003a8 	.word	0x200003a8
 800814c:	20000378 	.word	0x20000378
 8008150:	2000038c 	.word	0x2000038c
 8008154:	200003a0 	.word	0x200003a0
 8008158:	200003a4 	.word	0x200003a4
 800815c:	08009734 	.word	0x08009734

08008160 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <pvTimerGetTimerID+0x28>
        __asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	60fb      	str	r3, [r7, #12]
    }
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8008188:	f000 f936 	bl	80083f8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8008192:	f000 f961 	bl	8008458 <vPortExitCritical>

        return pvReturn;
 8008196:	693b      	ldr	r3, [r7, #16]
    }
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3b04      	subs	r3, #4
 80081b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3b04      	subs	r3, #4
 80081be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f023 0201 	bic.w	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3b04      	subs	r3, #4
 80081ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80081d0:	4a0c      	ldr	r2, [pc, #48]	; (8008204 <pxPortInitialiseStack+0x64>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3b14      	subs	r3, #20
 80081da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3b04      	subs	r3, #4
 80081e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f06f 0202 	mvn.w	r2, #2
 80081ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3b20      	subs	r3, #32
 80081f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80081f6:	68fb      	ldr	r3, [r7, #12]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	08008209 	.word	0x08008209

08008208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <prvTaskExitError+0x54>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821a:	d00a      	beq.n	8008232 <prvTaskExitError+0x2a>
        __asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	60fb      	str	r3, [r7, #12]
    }
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <prvTaskExitError+0x28>
        __asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	60bb      	str	r3, [r7, #8]
    }
 8008244:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008246:	bf00      	nop
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0fc      	beq.n	8008248 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	2000002c 	.word	0x2000002c

08008260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <pxCurrentTCBConst2>)
 8008262:	6819      	ldr	r1, [r3, #0]
 8008264:	6808      	ldr	r0, [r1, #0]
 8008266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	f380 8809 	msr	PSP, r0
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f04f 0000 	mov.w	r0, #0
 8008276:	f380 8811 	msr	BASEPRI, r0
 800827a:	4770      	bx	lr
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst2>:
 8008280:	20000274 	.word	0x20000274
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008288:	4808      	ldr	r0, [pc, #32]	; (80082ac <prvPortStartFirstTask+0x24>)
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f380 8808 	msr	MSP, r0
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8814 	msr	CONTROL, r0
 800829a:	b662      	cpsie	i
 800829c:	b661      	cpsie	f
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	df00      	svc	0
 80082a8:	bf00      	nop
 80082aa:	0000      	.short	0x0000
 80082ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop

080082b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082ba:	4b46      	ldr	r3, [pc, #280]	; (80083d4 <xPortStartScheduler+0x120>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a46      	ldr	r2, [pc, #280]	; (80083d8 <xPortStartScheduler+0x124>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d10a      	bne.n	80082da <xPortStartScheduler+0x26>
        __asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	613b      	str	r3, [r7, #16]
    }
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082da:	4b3e      	ldr	r3, [pc, #248]	; (80083d4 <xPortStartScheduler+0x120>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a3f      	ldr	r2, [pc, #252]	; (80083dc <xPortStartScheduler+0x128>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d10a      	bne.n	80082fa <xPortStartScheduler+0x46>
        __asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	60fb      	str	r3, [r7, #12]
    }
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082fa:	4b39      	ldr	r3, [pc, #228]	; (80083e0 <xPortStartScheduler+0x12c>)
 80082fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	22ff      	movs	r2, #255	; 0xff
 800830a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	b2db      	uxtb	r3, r3
 8008312:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800831c:	b2da      	uxtb	r2, r3
 800831e:	4b31      	ldr	r3, [pc, #196]	; (80083e4 <xPortStartScheduler+0x130>)
 8008320:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008322:	4b31      	ldr	r3, [pc, #196]	; (80083e8 <xPortStartScheduler+0x134>)
 8008324:	2207      	movs	r2, #7
 8008326:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008328:	e009      	b.n	800833e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800832a:	4b2f      	ldr	r3, [pc, #188]	; (80083e8 <xPortStartScheduler+0x134>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3b01      	subs	r3, #1
 8008330:	4a2d      	ldr	r2, [pc, #180]	; (80083e8 <xPortStartScheduler+0x134>)
 8008332:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	b2db      	uxtb	r3, r3
 800833c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008346:	2b80      	cmp	r3, #128	; 0x80
 8008348:	d0ef      	beq.n	800832a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800834a:	4b27      	ldr	r3, [pc, #156]	; (80083e8 <xPortStartScheduler+0x134>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f1c3 0307 	rsb	r3, r3, #7
 8008352:	2b04      	cmp	r3, #4
 8008354:	d00a      	beq.n	800836c <xPortStartScheduler+0xb8>
        __asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	60bb      	str	r3, [r7, #8]
    }
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800836c:	4b1e      	ldr	r3, [pc, #120]	; (80083e8 <xPortStartScheduler+0x134>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	4a1d      	ldr	r2, [pc, #116]	; (80083e8 <xPortStartScheduler+0x134>)
 8008374:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008376:	4b1c      	ldr	r3, [pc, #112]	; (80083e8 <xPortStartScheduler+0x134>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800837e:	4a1a      	ldr	r2, [pc, #104]	; (80083e8 <xPortStartScheduler+0x134>)
 8008380:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	b2da      	uxtb	r2, r3
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800838a:	4b18      	ldr	r3, [pc, #96]	; (80083ec <xPortStartScheduler+0x138>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a17      	ldr	r2, [pc, #92]	; (80083ec <xPortStartScheduler+0x138>)
 8008390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008394:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008396:	4b15      	ldr	r3, [pc, #84]	; (80083ec <xPortStartScheduler+0x138>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a14      	ldr	r2, [pc, #80]	; (80083ec <xPortStartScheduler+0x138>)
 800839c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80083a2:	f000 f8db 	bl	800855c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80083a6:	4b12      	ldr	r3, [pc, #72]	; (80083f0 <xPortStartScheduler+0x13c>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80083ac:	f000 f8fa 	bl	80085a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083b0:	4b10      	ldr	r3, [pc, #64]	; (80083f4 <xPortStartScheduler+0x140>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a0f      	ldr	r2, [pc, #60]	; (80083f4 <xPortStartScheduler+0x140>)
 80083b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80083bc:	f7ff ff64 	bl	8008288 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80083c0:	f7fe fdb8 	bl	8006f34 <vTaskSwitchContext>
    prvTaskExitError();
 80083c4:	f7ff ff20 	bl	8008208 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	e000ed00 	.word	0xe000ed00
 80083d8:	410fc271 	.word	0x410fc271
 80083dc:	410fc270 	.word	0x410fc270
 80083e0:	e000e400 	.word	0xe000e400
 80083e4:	200003b4 	.word	0x200003b4
 80083e8:	200003b8 	.word	0x200003b8
 80083ec:	e000ed20 	.word	0xe000ed20
 80083f0:	2000002c 	.word	0x2000002c
 80083f4:	e000ef34 	.word	0xe000ef34

080083f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
        __asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	607b      	str	r3, [r7, #4]
    }
 8008410:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008412:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <vPortEnterCritical+0x58>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3301      	adds	r3, #1
 8008418:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <vPortEnterCritical+0x58>)
 800841a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800841c:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <vPortEnterCritical+0x58>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d10f      	bne.n	8008444 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008424:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <vPortEnterCritical+0x5c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <vPortEnterCritical+0x4c>
        __asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	603b      	str	r3, [r7, #0]
    }
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <vPortEnterCritical+0x4a>
    }
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	2000002c 	.word	0x2000002c
 8008454:	e000ed04 	.word	0xe000ed04

08008458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800845e:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <vPortExitCritical+0x50>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <vPortExitCritical+0x24>
        __asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	607b      	str	r3, [r7, #4]
    }
 8008478:	bf00      	nop
 800847a:	e7fe      	b.n	800847a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800847c:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <vPortExitCritical+0x50>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3b01      	subs	r3, #1
 8008482:	4a09      	ldr	r2, [pc, #36]	; (80084a8 <vPortExitCritical+0x50>)
 8008484:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008486:	4b08      	ldr	r3, [pc, #32]	; (80084a8 <vPortExitCritical+0x50>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d105      	bne.n	800849a <vPortExitCritical+0x42>
 800848e:	2300      	movs	r3, #0
 8008490:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	f383 8811 	msr	BASEPRI, r3
    }
 8008498:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	2000002c 	.word	0x2000002c
 80084ac:	00000000 	.word	0x00000000

080084b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80084b0:	f3ef 8009 	mrs	r0, PSP
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	4b15      	ldr	r3, [pc, #84]	; (8008510 <pxCurrentTCBConst>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	f01e 0f10 	tst.w	lr, #16
 80084c0:	bf08      	it	eq
 80084c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ca:	6010      	str	r0, [r2, #0]
 80084cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084d4:	f380 8811 	msr	BASEPRI, r0
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f7fe fd28 	bl	8006f34 <vTaskSwitchContext>
 80084e4:	f04f 0000 	mov.w	r0, #0
 80084e8:	f380 8811 	msr	BASEPRI, r0
 80084ec:	bc09      	pop	{r0, r3}
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	6808      	ldr	r0, [r1, #0]
 80084f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f6:	f01e 0f10 	tst.w	lr, #16
 80084fa:	bf08      	it	eq
 80084fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008500:	f380 8809 	msr	PSP, r0
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	f3af 8000 	nop.w

08008510 <pxCurrentTCBConst>:
 8008510:	20000274 	.word	0x20000274
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop

08008518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
        __asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	607b      	str	r3, [r7, #4]
    }
 8008530:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008532:	f7fe fc47 	bl	8006dc4 <xTaskIncrementTick>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <SysTick_Handler+0x40>)
 800853e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	2300      	movs	r3, #0
 8008546:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f383 8811 	msr	BASEPRI, r3
    }
 800854e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008560:	4b0b      	ldr	r3, [pc, #44]	; (8008590 <vPortSetupTimerInterrupt+0x34>)
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008566:	4b0b      	ldr	r3, [pc, #44]	; (8008594 <vPortSetupTimerInterrupt+0x38>)
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800856c:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <vPortSetupTimerInterrupt+0x3c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a0a      	ldr	r2, [pc, #40]	; (800859c <vPortSetupTimerInterrupt+0x40>)
 8008572:	fba2 2303 	umull	r2, r3, r2, r3
 8008576:	099b      	lsrs	r3, r3, #6
 8008578:	4a09      	ldr	r2, [pc, #36]	; (80085a0 <vPortSetupTimerInterrupt+0x44>)
 800857a:	3b01      	subs	r3, #1
 800857c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800857e:	4b04      	ldr	r3, [pc, #16]	; (8008590 <vPortSetupTimerInterrupt+0x34>)
 8008580:	2207      	movs	r2, #7
 8008582:	601a      	str	r2, [r3, #0]
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	e000e010 	.word	0xe000e010
 8008594:	e000e018 	.word	0xe000e018
 8008598:	2000001c 	.word	0x2000001c
 800859c:	10624dd3 	.word	0x10624dd3
 80085a0:	e000e014 	.word	0xe000e014

080085a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80085a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085b4 <vPortEnableVFP+0x10>
 80085a8:	6801      	ldr	r1, [r0, #0]
 80085aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085ae:	6001      	str	r1, [r0, #0]
 80085b0:	4770      	bx	lr
 80085b2:	0000      	.short	0x0000
 80085b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop

080085bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80085c2:	f3ef 8305 	mrs	r3, IPSR
 80085c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b0f      	cmp	r3, #15
 80085cc:	d914      	bls.n	80085f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085ce:	4a17      	ldr	r2, [pc, #92]	; (800862c <vPortValidateInterruptPriority+0x70>)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4413      	add	r3, r2
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085d8:	4b15      	ldr	r3, [pc, #84]	; (8008630 <vPortValidateInterruptPriority+0x74>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	7afa      	ldrb	r2, [r7, #11]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d20a      	bcs.n	80085f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	607b      	str	r3, [r7, #4]
    }
 80085f4:	bf00      	nop
 80085f6:	e7fe      	b.n	80085f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085f8:	4b0e      	ldr	r3, [pc, #56]	; (8008634 <vPortValidateInterruptPriority+0x78>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008600:	4b0d      	ldr	r3, [pc, #52]	; (8008638 <vPortValidateInterruptPriority+0x7c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d90a      	bls.n	800861e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	603b      	str	r3, [r7, #0]
    }
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <vPortValidateInterruptPriority+0x60>
    }
 800861e:	bf00      	nop
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	e000e3f0 	.word	0xe000e3f0
 8008630:	200003b4 	.word	0x200003b4
 8008634:	e000ed0c 	.word	0xe000ed0c
 8008638:	200003b8 	.word	0x200003b8

0800863c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08a      	sub	sp, #40	; 0x28
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008644:	2300      	movs	r3, #0
 8008646:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008648:	f7fe fb02 	bl	8006c50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800864c:	4b65      	ldr	r3, [pc, #404]	; (80087e4 <pvPortMalloc+0x1a8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008654:	f000 f934 	bl	80088c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008658:	4b63      	ldr	r3, [pc, #396]	; (80087e8 <pvPortMalloc+0x1ac>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4013      	ands	r3, r2
 8008660:	2b00      	cmp	r3, #0
 8008662:	f040 80a7 	bne.w	80087b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d02d      	beq.n	80086c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800866c:	2208      	movs	r2, #8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d227      	bcs.n	80086c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008678:	2208      	movs	r2, #8
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4413      	add	r3, r2
 800867e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	2b00      	cmp	r3, #0
 8008688:	d021      	beq.n	80086ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f023 0307 	bic.w	r3, r3, #7
 8008690:	3308      	adds	r3, #8
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	429a      	cmp	r2, r3
 8008696:	d214      	bcs.n	80086c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f023 0307 	bic.w	r3, r3, #7
 800869e:	3308      	adds	r3, #8
 80086a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f003 0307 	and.w	r3, r3, #7
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d010      	beq.n	80086ce <pvPortMalloc+0x92>
        __asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	617b      	str	r3, [r7, #20]
    }
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086c6:	e002      	b.n	80086ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	607b      	str	r3, [r7, #4]
 80086cc:	e000      	b.n	80086d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d06e      	beq.n	80087b4 <pvPortMalloc+0x178>
 80086d6:	4b45      	ldr	r3, [pc, #276]	; (80087ec <pvPortMalloc+0x1b0>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d869      	bhi.n	80087b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80086e0:	4b43      	ldr	r3, [pc, #268]	; (80087f0 <pvPortMalloc+0x1b4>)
 80086e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80086e4:	4b42      	ldr	r3, [pc, #264]	; (80087f0 <pvPortMalloc+0x1b4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086ea:	e004      	b.n	80086f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d903      	bls.n	8008708 <pvPortMalloc+0xcc>
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1f1      	bne.n	80086ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008708:	4b36      	ldr	r3, [pc, #216]	; (80087e4 <pvPortMalloc+0x1a8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870e:	429a      	cmp	r2, r3
 8008710:	d050      	beq.n	80087b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2208      	movs	r2, #8
 8008718:	4413      	add	r3, r2
 800871a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	1ad2      	subs	r2, r2, r3
 800872c:	2308      	movs	r3, #8
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	429a      	cmp	r2, r3
 8008732:	d91f      	bls.n	8008774 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4413      	add	r3, r2
 800873a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <pvPortMalloc+0x120>
        __asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	613b      	str	r3, [r7, #16]
    }
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	1ad2      	subs	r2, r2, r3
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800876e:	69b8      	ldr	r0, [r7, #24]
 8008770:	f000 f908 	bl	8008984 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008774:	4b1d      	ldr	r3, [pc, #116]	; (80087ec <pvPortMalloc+0x1b0>)
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	4a1b      	ldr	r2, [pc, #108]	; (80087ec <pvPortMalloc+0x1b0>)
 8008780:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008782:	4b1a      	ldr	r3, [pc, #104]	; (80087ec <pvPortMalloc+0x1b0>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b1b      	ldr	r3, [pc, #108]	; (80087f4 <pvPortMalloc+0x1b8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	429a      	cmp	r2, r3
 800878c:	d203      	bcs.n	8008796 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800878e:	4b17      	ldr	r3, [pc, #92]	; (80087ec <pvPortMalloc+0x1b0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a18      	ldr	r2, [pc, #96]	; (80087f4 <pvPortMalloc+0x1b8>)
 8008794:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <pvPortMalloc+0x1ac>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	431a      	orrs	r2, r3
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	2200      	movs	r2, #0
 80087a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80087aa:	4b13      	ldr	r3, [pc, #76]	; (80087f8 <pvPortMalloc+0x1bc>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3301      	adds	r3, #1
 80087b0:	4a11      	ldr	r2, [pc, #68]	; (80087f8 <pvPortMalloc+0x1bc>)
 80087b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80087b4:	f7fe fa5a 	bl	8006c6c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <pvPortMalloc+0x19c>
        __asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	60fb      	str	r3, [r7, #12]
    }
 80087d4:	bf00      	nop
 80087d6:	e7fe      	b.n	80087d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80087d8:	69fb      	ldr	r3, [r7, #28]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3728      	adds	r7, #40	; 0x28
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20012fc4 	.word	0x20012fc4
 80087e8:	20012fd8 	.word	0x20012fd8
 80087ec:	20012fc8 	.word	0x20012fc8
 80087f0:	20012fbc 	.word	0x20012fbc
 80087f4:	20012fcc 	.word	0x20012fcc
 80087f8:	20012fd0 	.word	0x20012fd0

080087fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d04d      	beq.n	80088aa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800880e:	2308      	movs	r3, #8
 8008810:	425b      	negs	r3, r3
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	4413      	add	r3, r2
 8008816:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	4b24      	ldr	r3, [pc, #144]	; (80088b4 <vPortFree+0xb8>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4013      	ands	r3, r2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <vPortFree+0x44>
        __asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	60fb      	str	r3, [r7, #12]
    }
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00a      	beq.n	800885e <vPortFree+0x62>
        __asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	60bb      	str	r3, [r7, #8]
    }
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	685a      	ldr	r2, [r3, #4]
 8008862:	4b14      	ldr	r3, [pc, #80]	; (80088b4 <vPortFree+0xb8>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4013      	ands	r3, r2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01e      	beq.n	80088aa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d11a      	bne.n	80088aa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <vPortFree+0xb8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	43db      	mvns	r3, r3
 800887e:	401a      	ands	r2, r3
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008884:	f7fe f9e4 	bl	8006c50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <vPortFree+0xbc>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4413      	add	r3, r2
 8008892:	4a09      	ldr	r2, [pc, #36]	; (80088b8 <vPortFree+0xbc>)
 8008894:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008896:	6938      	ldr	r0, [r7, #16]
 8008898:	f000 f874 	bl	8008984 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800889c:	4b07      	ldr	r3, [pc, #28]	; (80088bc <vPortFree+0xc0>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3301      	adds	r3, #1
 80088a2:	4a06      	ldr	r2, [pc, #24]	; (80088bc <vPortFree+0xc0>)
 80088a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80088a6:	f7fe f9e1 	bl	8006c6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80088aa:	bf00      	nop
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20012fd8 	.word	0x20012fd8
 80088b8:	20012fc8 	.word	0x20012fc8
 80088bc:	20012fd4 	.word	0x20012fd4

080088c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088c6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80088ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80088cc:	4b27      	ldr	r3, [pc, #156]	; (800896c <prvHeapInit+0xac>)
 80088ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00c      	beq.n	80088f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3307      	adds	r3, #7
 80088de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0307 	bic.w	r3, r3, #7
 80088e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	4a1f      	ldr	r2, [pc, #124]	; (800896c <prvHeapInit+0xac>)
 80088f0:	4413      	add	r3, r2
 80088f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088f8:	4a1d      	ldr	r2, [pc, #116]	; (8008970 <prvHeapInit+0xb0>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80088fe:	4b1c      	ldr	r3, [pc, #112]	; (8008970 <prvHeapInit+0xb0>)
 8008900:	2200      	movs	r2, #0
 8008902:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	4413      	add	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800890c:	2208      	movs	r2, #8
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1a9b      	subs	r3, r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0307 	bic.w	r3, r3, #7
 800891a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4a15      	ldr	r2, [pc, #84]	; (8008974 <prvHeapInit+0xb4>)
 8008920:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008922:	4b14      	ldr	r3, [pc, #80]	; (8008974 <prvHeapInit+0xb4>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2200      	movs	r2, #0
 8008928:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800892a:	4b12      	ldr	r3, [pc, #72]	; (8008974 <prvHeapInit+0xb4>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2200      	movs	r2, #0
 8008930:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	1ad2      	subs	r2, r2, r3
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008940:	4b0c      	ldr	r3, [pc, #48]	; (8008974 <prvHeapInit+0xb4>)
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	4a0a      	ldr	r2, [pc, #40]	; (8008978 <prvHeapInit+0xb8>)
 800894e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	4a09      	ldr	r2, [pc, #36]	; (800897c <prvHeapInit+0xbc>)
 8008956:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008958:	4b09      	ldr	r3, [pc, #36]	; (8008980 <prvHeapInit+0xc0>)
 800895a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800895e:	601a      	str	r2, [r3, #0]
}
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	200003bc 	.word	0x200003bc
 8008970:	20012fbc 	.word	0x20012fbc
 8008974:	20012fc4 	.word	0x20012fc4
 8008978:	20012fcc 	.word	0x20012fcc
 800897c:	20012fc8 	.word	0x20012fc8
 8008980:	20012fd8 	.word	0x20012fd8

08008984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800898c:	4b28      	ldr	r3, [pc, #160]	; (8008a30 <prvInsertBlockIntoFreeList+0xac>)
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	e002      	b.n	8008998 <prvInsertBlockIntoFreeList+0x14>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d8f7      	bhi.n	8008992 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	4413      	add	r3, r2
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d108      	bne.n	80089c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	441a      	add	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	441a      	add	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d118      	bne.n	8008a0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	4b15      	ldr	r3, [pc, #84]	; (8008a34 <prvInsertBlockIntoFreeList+0xb0>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d00d      	beq.n	8008a02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	441a      	add	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	e008      	b.n	8008a14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a02:	4b0c      	ldr	r3, [pc, #48]	; (8008a34 <prvInsertBlockIntoFreeList+0xb0>)
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	e003      	b.n	8008a14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d002      	beq.n	8008a22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008a22:	bf00      	nop
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	20012fbc 	.word	0x20012fbc
 8008a34:	20012fc4 	.word	0x20012fc4

08008a38 <__errno>:
 8008a38:	4b01      	ldr	r3, [pc, #4]	; (8008a40 <__errno+0x8>)
 8008a3a:	6818      	ldr	r0, [r3, #0]
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20000030 	.word	0x20000030

08008a44 <__libc_init_array>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	4d0d      	ldr	r5, [pc, #52]	; (8008a7c <__libc_init_array+0x38>)
 8008a48:	4c0d      	ldr	r4, [pc, #52]	; (8008a80 <__libc_init_array+0x3c>)
 8008a4a:	1b64      	subs	r4, r4, r5
 8008a4c:	10a4      	asrs	r4, r4, #2
 8008a4e:	2600      	movs	r6, #0
 8008a50:	42a6      	cmp	r6, r4
 8008a52:	d109      	bne.n	8008a68 <__libc_init_array+0x24>
 8008a54:	4d0b      	ldr	r5, [pc, #44]	; (8008a84 <__libc_init_array+0x40>)
 8008a56:	4c0c      	ldr	r4, [pc, #48]	; (8008a88 <__libc_init_array+0x44>)
 8008a58:	f000 fc8e 	bl	8009378 <_init>
 8008a5c:	1b64      	subs	r4, r4, r5
 8008a5e:	10a4      	asrs	r4, r4, #2
 8008a60:	2600      	movs	r6, #0
 8008a62:	42a6      	cmp	r6, r4
 8008a64:	d105      	bne.n	8008a72 <__libc_init_array+0x2e>
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6c:	4798      	blx	r3
 8008a6e:	3601      	adds	r6, #1
 8008a70:	e7ee      	b.n	8008a50 <__libc_init_array+0xc>
 8008a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a76:	4798      	blx	r3
 8008a78:	3601      	adds	r6, #1
 8008a7a:	e7f2      	b.n	8008a62 <__libc_init_array+0x1e>
 8008a7c:	080097c0 	.word	0x080097c0
 8008a80:	080097c0 	.word	0x080097c0
 8008a84:	080097c0 	.word	0x080097c0
 8008a88:	080097c4 	.word	0x080097c4

08008a8c <memcpy>:
 8008a8c:	440a      	add	r2, r1
 8008a8e:	4291      	cmp	r1, r2
 8008a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a94:	d100      	bne.n	8008a98 <memcpy+0xc>
 8008a96:	4770      	bx	lr
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aa2:	4291      	cmp	r1, r2
 8008aa4:	d1f9      	bne.n	8008a9a <memcpy+0xe>
 8008aa6:	bd10      	pop	{r4, pc}

08008aa8 <memset>:
 8008aa8:	4402      	add	r2, r0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d100      	bne.n	8008ab2 <memset+0xa>
 8008ab0:	4770      	bx	lr
 8008ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ab6:	e7f9      	b.n	8008aac <memset+0x4>

08008ab8 <siprintf>:
 8008ab8:	b40e      	push	{r1, r2, r3}
 8008aba:	b500      	push	{lr}
 8008abc:	b09c      	sub	sp, #112	; 0x70
 8008abe:	ab1d      	add	r3, sp, #116	; 0x74
 8008ac0:	9002      	str	r0, [sp, #8]
 8008ac2:	9006      	str	r0, [sp, #24]
 8008ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ac8:	4809      	ldr	r0, [pc, #36]	; (8008af0 <siprintf+0x38>)
 8008aca:	9107      	str	r1, [sp, #28]
 8008acc:	9104      	str	r1, [sp, #16]
 8008ace:	4909      	ldr	r1, [pc, #36]	; (8008af4 <siprintf+0x3c>)
 8008ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad4:	9105      	str	r1, [sp, #20]
 8008ad6:	6800      	ldr	r0, [r0, #0]
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	a902      	add	r1, sp, #8
 8008adc:	f000 f868 	bl	8008bb0 <_svfiprintf_r>
 8008ae0:	9b02      	ldr	r3, [sp, #8]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	b01c      	add	sp, #112	; 0x70
 8008ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aec:	b003      	add	sp, #12
 8008aee:	4770      	bx	lr
 8008af0:	20000030 	.word	0x20000030
 8008af4:	ffff0208 	.word	0xffff0208

08008af8 <__ssputs_r>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	688e      	ldr	r6, [r1, #8]
 8008afe:	429e      	cmp	r6, r3
 8008b00:	4682      	mov	sl, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	4690      	mov	r8, r2
 8008b06:	461f      	mov	r7, r3
 8008b08:	d838      	bhi.n	8008b7c <__ssputs_r+0x84>
 8008b0a:	898a      	ldrh	r2, [r1, #12]
 8008b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b10:	d032      	beq.n	8008b78 <__ssputs_r+0x80>
 8008b12:	6825      	ldr	r5, [r4, #0]
 8008b14:	6909      	ldr	r1, [r1, #16]
 8008b16:	eba5 0901 	sub.w	r9, r5, r1
 8008b1a:	6965      	ldr	r5, [r4, #20]
 8008b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b24:	3301      	adds	r3, #1
 8008b26:	444b      	add	r3, r9
 8008b28:	106d      	asrs	r5, r5, #1
 8008b2a:	429d      	cmp	r5, r3
 8008b2c:	bf38      	it	cc
 8008b2e:	461d      	movcc	r5, r3
 8008b30:	0553      	lsls	r3, r2, #21
 8008b32:	d531      	bpl.n	8008b98 <__ssputs_r+0xa0>
 8008b34:	4629      	mov	r1, r5
 8008b36:	f000 fb55 	bl	80091e4 <_malloc_r>
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	b950      	cbnz	r0, 8008b54 <__ssputs_r+0x5c>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	f8ca 3000 	str.w	r3, [sl]
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b54:	6921      	ldr	r1, [r4, #16]
 8008b56:	464a      	mov	r2, r9
 8008b58:	f7ff ff98 	bl	8008a8c <memcpy>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	6126      	str	r6, [r4, #16]
 8008b6a:	6165      	str	r5, [r4, #20]
 8008b6c:	444e      	add	r6, r9
 8008b6e:	eba5 0509 	sub.w	r5, r5, r9
 8008b72:	6026      	str	r6, [r4, #0]
 8008b74:	60a5      	str	r5, [r4, #8]
 8008b76:	463e      	mov	r6, r7
 8008b78:	42be      	cmp	r6, r7
 8008b7a:	d900      	bls.n	8008b7e <__ssputs_r+0x86>
 8008b7c:	463e      	mov	r6, r7
 8008b7e:	6820      	ldr	r0, [r4, #0]
 8008b80:	4632      	mov	r2, r6
 8008b82:	4641      	mov	r1, r8
 8008b84:	f000 faa8 	bl	80090d8 <memmove>
 8008b88:	68a3      	ldr	r3, [r4, #8]
 8008b8a:	1b9b      	subs	r3, r3, r6
 8008b8c:	60a3      	str	r3, [r4, #8]
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	4433      	add	r3, r6
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	2000      	movs	r0, #0
 8008b96:	e7db      	b.n	8008b50 <__ssputs_r+0x58>
 8008b98:	462a      	mov	r2, r5
 8008b9a:	f000 fb97 	bl	80092cc <_realloc_r>
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d1e1      	bne.n	8008b68 <__ssputs_r+0x70>
 8008ba4:	6921      	ldr	r1, [r4, #16]
 8008ba6:	4650      	mov	r0, sl
 8008ba8:	f000 fab0 	bl	800910c <_free_r>
 8008bac:	e7c7      	b.n	8008b3e <__ssputs_r+0x46>
	...

08008bb0 <_svfiprintf_r>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	4698      	mov	r8, r3
 8008bb6:	898b      	ldrh	r3, [r1, #12]
 8008bb8:	061b      	lsls	r3, r3, #24
 8008bba:	b09d      	sub	sp, #116	; 0x74
 8008bbc:	4607      	mov	r7, r0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	d50e      	bpl.n	8008be2 <_svfiprintf_r+0x32>
 8008bc4:	690b      	ldr	r3, [r1, #16]
 8008bc6:	b963      	cbnz	r3, 8008be2 <_svfiprintf_r+0x32>
 8008bc8:	2140      	movs	r1, #64	; 0x40
 8008bca:	f000 fb0b 	bl	80091e4 <_malloc_r>
 8008bce:	6028      	str	r0, [r5, #0]
 8008bd0:	6128      	str	r0, [r5, #16]
 8008bd2:	b920      	cbnz	r0, 8008bde <_svfiprintf_r+0x2e>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	e0d1      	b.n	8008d82 <_svfiprintf_r+0x1d2>
 8008bde:	2340      	movs	r3, #64	; 0x40
 8008be0:	616b      	str	r3, [r5, #20]
 8008be2:	2300      	movs	r3, #0
 8008be4:	9309      	str	r3, [sp, #36]	; 0x24
 8008be6:	2320      	movs	r3, #32
 8008be8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf0:	2330      	movs	r3, #48	; 0x30
 8008bf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d9c <_svfiprintf_r+0x1ec>
 8008bf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bfa:	f04f 0901 	mov.w	r9, #1
 8008bfe:	4623      	mov	r3, r4
 8008c00:	469a      	mov	sl, r3
 8008c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c06:	b10a      	cbz	r2, 8008c0c <_svfiprintf_r+0x5c>
 8008c08:	2a25      	cmp	r2, #37	; 0x25
 8008c0a:	d1f9      	bne.n	8008c00 <_svfiprintf_r+0x50>
 8008c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c10:	d00b      	beq.n	8008c2a <_svfiprintf_r+0x7a>
 8008c12:	465b      	mov	r3, fp
 8008c14:	4622      	mov	r2, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	4638      	mov	r0, r7
 8008c1a:	f7ff ff6d 	bl	8008af8 <__ssputs_r>
 8008c1e:	3001      	adds	r0, #1
 8008c20:	f000 80aa 	beq.w	8008d78 <_svfiprintf_r+0x1c8>
 8008c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c26:	445a      	add	r2, fp
 8008c28:	9209      	str	r2, [sp, #36]	; 0x24
 8008c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 80a2 	beq.w	8008d78 <_svfiprintf_r+0x1c8>
 8008c34:	2300      	movs	r3, #0
 8008c36:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c3e:	f10a 0a01 	add.w	sl, sl, #1
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	9307      	str	r3, [sp, #28]
 8008c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c4c:	4654      	mov	r4, sl
 8008c4e:	2205      	movs	r2, #5
 8008c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c54:	4851      	ldr	r0, [pc, #324]	; (8008d9c <_svfiprintf_r+0x1ec>)
 8008c56:	f7f7 fad3 	bl	8000200 <memchr>
 8008c5a:	9a04      	ldr	r2, [sp, #16]
 8008c5c:	b9d8      	cbnz	r0, 8008c96 <_svfiprintf_r+0xe6>
 8008c5e:	06d0      	lsls	r0, r2, #27
 8008c60:	bf44      	itt	mi
 8008c62:	2320      	movmi	r3, #32
 8008c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c68:	0711      	lsls	r1, r2, #28
 8008c6a:	bf44      	itt	mi
 8008c6c:	232b      	movmi	r3, #43	; 0x2b
 8008c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c72:	f89a 3000 	ldrb.w	r3, [sl]
 8008c76:	2b2a      	cmp	r3, #42	; 0x2a
 8008c78:	d015      	beq.n	8008ca6 <_svfiprintf_r+0xf6>
 8008c7a:	9a07      	ldr	r2, [sp, #28]
 8008c7c:	4654      	mov	r4, sl
 8008c7e:	2000      	movs	r0, #0
 8008c80:	f04f 0c0a 	mov.w	ip, #10
 8008c84:	4621      	mov	r1, r4
 8008c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c8a:	3b30      	subs	r3, #48	; 0x30
 8008c8c:	2b09      	cmp	r3, #9
 8008c8e:	d94e      	bls.n	8008d2e <_svfiprintf_r+0x17e>
 8008c90:	b1b0      	cbz	r0, 8008cc0 <_svfiprintf_r+0x110>
 8008c92:	9207      	str	r2, [sp, #28]
 8008c94:	e014      	b.n	8008cc0 <_svfiprintf_r+0x110>
 8008c96:	eba0 0308 	sub.w	r3, r0, r8
 8008c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	46a2      	mov	sl, r4
 8008ca4:	e7d2      	b.n	8008c4c <_svfiprintf_r+0x9c>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	1d19      	adds	r1, r3, #4
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	9103      	str	r1, [sp, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bfbb      	ittet	lt
 8008cb2:	425b      	neglt	r3, r3
 8008cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8008cb8:	9307      	strge	r3, [sp, #28]
 8008cba:	9307      	strlt	r3, [sp, #28]
 8008cbc:	bfb8      	it	lt
 8008cbe:	9204      	strlt	r2, [sp, #16]
 8008cc0:	7823      	ldrb	r3, [r4, #0]
 8008cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8008cc4:	d10c      	bne.n	8008ce0 <_svfiprintf_r+0x130>
 8008cc6:	7863      	ldrb	r3, [r4, #1]
 8008cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cca:	d135      	bne.n	8008d38 <_svfiprintf_r+0x188>
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	9203      	str	r2, [sp, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bfb8      	it	lt
 8008cd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cdc:	3402      	adds	r4, #2
 8008cde:	9305      	str	r3, [sp, #20]
 8008ce0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008dac <_svfiprintf_r+0x1fc>
 8008ce4:	7821      	ldrb	r1, [r4, #0]
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	4650      	mov	r0, sl
 8008cea:	f7f7 fa89 	bl	8000200 <memchr>
 8008cee:	b140      	cbz	r0, 8008d02 <_svfiprintf_r+0x152>
 8008cf0:	2340      	movs	r3, #64	; 0x40
 8008cf2:	eba0 000a 	sub.w	r0, r0, sl
 8008cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8008cfa:	9b04      	ldr	r3, [sp, #16]
 8008cfc:	4303      	orrs	r3, r0
 8008cfe:	3401      	adds	r4, #1
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d06:	4826      	ldr	r0, [pc, #152]	; (8008da0 <_svfiprintf_r+0x1f0>)
 8008d08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d0c:	2206      	movs	r2, #6
 8008d0e:	f7f7 fa77 	bl	8000200 <memchr>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d038      	beq.n	8008d88 <_svfiprintf_r+0x1d8>
 8008d16:	4b23      	ldr	r3, [pc, #140]	; (8008da4 <_svfiprintf_r+0x1f4>)
 8008d18:	bb1b      	cbnz	r3, 8008d62 <_svfiprintf_r+0x1b2>
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	3307      	adds	r3, #7
 8008d1e:	f023 0307 	bic.w	r3, r3, #7
 8008d22:	3308      	adds	r3, #8
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d28:	4433      	add	r3, r6
 8008d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2c:	e767      	b.n	8008bfe <_svfiprintf_r+0x4e>
 8008d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d32:	460c      	mov	r4, r1
 8008d34:	2001      	movs	r0, #1
 8008d36:	e7a5      	b.n	8008c84 <_svfiprintf_r+0xd4>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f04f 0c0a 	mov.w	ip, #10
 8008d44:	4620      	mov	r0, r4
 8008d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d4a:	3a30      	subs	r2, #48	; 0x30
 8008d4c:	2a09      	cmp	r2, #9
 8008d4e:	d903      	bls.n	8008d58 <_svfiprintf_r+0x1a8>
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0c5      	beq.n	8008ce0 <_svfiprintf_r+0x130>
 8008d54:	9105      	str	r1, [sp, #20]
 8008d56:	e7c3      	b.n	8008ce0 <_svfiprintf_r+0x130>
 8008d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e7f0      	b.n	8008d44 <_svfiprintf_r+0x194>
 8008d62:	ab03      	add	r3, sp, #12
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	462a      	mov	r2, r5
 8008d68:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <_svfiprintf_r+0x1f8>)
 8008d6a:	a904      	add	r1, sp, #16
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f3af 8000 	nop.w
 8008d72:	1c42      	adds	r2, r0, #1
 8008d74:	4606      	mov	r6, r0
 8008d76:	d1d6      	bne.n	8008d26 <_svfiprintf_r+0x176>
 8008d78:	89ab      	ldrh	r3, [r5, #12]
 8008d7a:	065b      	lsls	r3, r3, #25
 8008d7c:	f53f af2c 	bmi.w	8008bd8 <_svfiprintf_r+0x28>
 8008d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d82:	b01d      	add	sp, #116	; 0x74
 8008d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d88:	ab03      	add	r3, sp, #12
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	462a      	mov	r2, r5
 8008d8e:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <_svfiprintf_r+0x1f8>)
 8008d90:	a904      	add	r1, sp, #16
 8008d92:	4638      	mov	r0, r7
 8008d94:	f000 f87a 	bl	8008e8c <_printf_i>
 8008d98:	e7eb      	b.n	8008d72 <_svfiprintf_r+0x1c2>
 8008d9a:	bf00      	nop
 8008d9c:	08009784 	.word	0x08009784
 8008da0:	0800978e 	.word	0x0800978e
 8008da4:	00000000 	.word	0x00000000
 8008da8:	08008af9 	.word	0x08008af9
 8008dac:	0800978a 	.word	0x0800978a

08008db0 <_printf_common>:
 8008db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db4:	4616      	mov	r6, r2
 8008db6:	4699      	mov	r9, r3
 8008db8:	688a      	ldr	r2, [r1, #8]
 8008dba:	690b      	ldr	r3, [r1, #16]
 8008dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	bfb8      	it	lt
 8008dc4:	4613      	movlt	r3, r2
 8008dc6:	6033      	str	r3, [r6, #0]
 8008dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dcc:	4607      	mov	r7, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	b10a      	cbz	r2, 8008dd6 <_printf_common+0x26>
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	6033      	str	r3, [r6, #0]
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	0699      	lsls	r1, r3, #26
 8008dda:	bf42      	ittt	mi
 8008ddc:	6833      	ldrmi	r3, [r6, #0]
 8008dde:	3302      	addmi	r3, #2
 8008de0:	6033      	strmi	r3, [r6, #0]
 8008de2:	6825      	ldr	r5, [r4, #0]
 8008de4:	f015 0506 	ands.w	r5, r5, #6
 8008de8:	d106      	bne.n	8008df8 <_printf_common+0x48>
 8008dea:	f104 0a19 	add.w	sl, r4, #25
 8008dee:	68e3      	ldr	r3, [r4, #12]
 8008df0:	6832      	ldr	r2, [r6, #0]
 8008df2:	1a9b      	subs	r3, r3, r2
 8008df4:	42ab      	cmp	r3, r5
 8008df6:	dc26      	bgt.n	8008e46 <_printf_common+0x96>
 8008df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dfc:	1e13      	subs	r3, r2, #0
 8008dfe:	6822      	ldr	r2, [r4, #0]
 8008e00:	bf18      	it	ne
 8008e02:	2301      	movne	r3, #1
 8008e04:	0692      	lsls	r2, r2, #26
 8008e06:	d42b      	bmi.n	8008e60 <_printf_common+0xb0>
 8008e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	4638      	mov	r0, r7
 8008e10:	47c0      	blx	r8
 8008e12:	3001      	adds	r0, #1
 8008e14:	d01e      	beq.n	8008e54 <_printf_common+0xa4>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	68e5      	ldr	r5, [r4, #12]
 8008e1a:	6832      	ldr	r2, [r6, #0]
 8008e1c:	f003 0306 	and.w	r3, r3, #6
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	bf08      	it	eq
 8008e24:	1aad      	subeq	r5, r5, r2
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	6922      	ldr	r2, [r4, #16]
 8008e2a:	bf0c      	ite	eq
 8008e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e30:	2500      	movne	r5, #0
 8008e32:	4293      	cmp	r3, r2
 8008e34:	bfc4      	itt	gt
 8008e36:	1a9b      	subgt	r3, r3, r2
 8008e38:	18ed      	addgt	r5, r5, r3
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	341a      	adds	r4, #26
 8008e3e:	42b5      	cmp	r5, r6
 8008e40:	d11a      	bne.n	8008e78 <_printf_common+0xc8>
 8008e42:	2000      	movs	r0, #0
 8008e44:	e008      	b.n	8008e58 <_printf_common+0xa8>
 8008e46:	2301      	movs	r3, #1
 8008e48:	4652      	mov	r2, sl
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	47c0      	blx	r8
 8008e50:	3001      	adds	r0, #1
 8008e52:	d103      	bne.n	8008e5c <_printf_common+0xac>
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295
 8008e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	e7c6      	b.n	8008dee <_printf_common+0x3e>
 8008e60:	18e1      	adds	r1, r4, r3
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	2030      	movs	r0, #48	; 0x30
 8008e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e6a:	4422      	add	r2, r4
 8008e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e74:	3302      	adds	r3, #2
 8008e76:	e7c7      	b.n	8008e08 <_printf_common+0x58>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	4638      	mov	r0, r7
 8008e80:	47c0      	blx	r8
 8008e82:	3001      	adds	r0, #1
 8008e84:	d0e6      	beq.n	8008e54 <_printf_common+0xa4>
 8008e86:	3601      	adds	r6, #1
 8008e88:	e7d9      	b.n	8008e3e <_printf_common+0x8e>
	...

08008e8c <_printf_i>:
 8008e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	7e0f      	ldrb	r7, [r1, #24]
 8008e92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e94:	2f78      	cmp	r7, #120	; 0x78
 8008e96:	4691      	mov	r9, r2
 8008e98:	4680      	mov	r8, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	469a      	mov	sl, r3
 8008e9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ea2:	d807      	bhi.n	8008eb4 <_printf_i+0x28>
 8008ea4:	2f62      	cmp	r7, #98	; 0x62
 8008ea6:	d80a      	bhi.n	8008ebe <_printf_i+0x32>
 8008ea8:	2f00      	cmp	r7, #0
 8008eaa:	f000 80d8 	beq.w	800905e <_printf_i+0x1d2>
 8008eae:	2f58      	cmp	r7, #88	; 0x58
 8008eb0:	f000 80a3 	beq.w	8008ffa <_printf_i+0x16e>
 8008eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ebc:	e03a      	b.n	8008f34 <_printf_i+0xa8>
 8008ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ec2:	2b15      	cmp	r3, #21
 8008ec4:	d8f6      	bhi.n	8008eb4 <_printf_i+0x28>
 8008ec6:	a101      	add	r1, pc, #4	; (adr r1, 8008ecc <_printf_i+0x40>)
 8008ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ecc:	08008f25 	.word	0x08008f25
 8008ed0:	08008f39 	.word	0x08008f39
 8008ed4:	08008eb5 	.word	0x08008eb5
 8008ed8:	08008eb5 	.word	0x08008eb5
 8008edc:	08008eb5 	.word	0x08008eb5
 8008ee0:	08008eb5 	.word	0x08008eb5
 8008ee4:	08008f39 	.word	0x08008f39
 8008ee8:	08008eb5 	.word	0x08008eb5
 8008eec:	08008eb5 	.word	0x08008eb5
 8008ef0:	08008eb5 	.word	0x08008eb5
 8008ef4:	08008eb5 	.word	0x08008eb5
 8008ef8:	08009045 	.word	0x08009045
 8008efc:	08008f69 	.word	0x08008f69
 8008f00:	08009027 	.word	0x08009027
 8008f04:	08008eb5 	.word	0x08008eb5
 8008f08:	08008eb5 	.word	0x08008eb5
 8008f0c:	08009067 	.word	0x08009067
 8008f10:	08008eb5 	.word	0x08008eb5
 8008f14:	08008f69 	.word	0x08008f69
 8008f18:	08008eb5 	.word	0x08008eb5
 8008f1c:	08008eb5 	.word	0x08008eb5
 8008f20:	0800902f 	.word	0x0800902f
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	1d1a      	adds	r2, r3, #4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	602a      	str	r2, [r5, #0]
 8008f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f34:	2301      	movs	r3, #1
 8008f36:	e0a3      	b.n	8009080 <_printf_i+0x1f4>
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	6829      	ldr	r1, [r5, #0]
 8008f3c:	0606      	lsls	r6, r0, #24
 8008f3e:	f101 0304 	add.w	r3, r1, #4
 8008f42:	d50a      	bpl.n	8008f5a <_printf_i+0xce>
 8008f44:	680e      	ldr	r6, [r1, #0]
 8008f46:	602b      	str	r3, [r5, #0]
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	da03      	bge.n	8008f54 <_printf_i+0xc8>
 8008f4c:	232d      	movs	r3, #45	; 0x2d
 8008f4e:	4276      	negs	r6, r6
 8008f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f54:	485e      	ldr	r0, [pc, #376]	; (80090d0 <_printf_i+0x244>)
 8008f56:	230a      	movs	r3, #10
 8008f58:	e019      	b.n	8008f8e <_printf_i+0x102>
 8008f5a:	680e      	ldr	r6, [r1, #0]
 8008f5c:	602b      	str	r3, [r5, #0]
 8008f5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f62:	bf18      	it	ne
 8008f64:	b236      	sxthne	r6, r6
 8008f66:	e7ef      	b.n	8008f48 <_printf_i+0xbc>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	6820      	ldr	r0, [r4, #0]
 8008f6c:	1d19      	adds	r1, r3, #4
 8008f6e:	6029      	str	r1, [r5, #0]
 8008f70:	0601      	lsls	r1, r0, #24
 8008f72:	d501      	bpl.n	8008f78 <_printf_i+0xec>
 8008f74:	681e      	ldr	r6, [r3, #0]
 8008f76:	e002      	b.n	8008f7e <_printf_i+0xf2>
 8008f78:	0646      	lsls	r6, r0, #25
 8008f7a:	d5fb      	bpl.n	8008f74 <_printf_i+0xe8>
 8008f7c:	881e      	ldrh	r6, [r3, #0]
 8008f7e:	4854      	ldr	r0, [pc, #336]	; (80090d0 <_printf_i+0x244>)
 8008f80:	2f6f      	cmp	r7, #111	; 0x6f
 8008f82:	bf0c      	ite	eq
 8008f84:	2308      	moveq	r3, #8
 8008f86:	230a      	movne	r3, #10
 8008f88:	2100      	movs	r1, #0
 8008f8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f8e:	6865      	ldr	r5, [r4, #4]
 8008f90:	60a5      	str	r5, [r4, #8]
 8008f92:	2d00      	cmp	r5, #0
 8008f94:	bfa2      	ittt	ge
 8008f96:	6821      	ldrge	r1, [r4, #0]
 8008f98:	f021 0104 	bicge.w	r1, r1, #4
 8008f9c:	6021      	strge	r1, [r4, #0]
 8008f9e:	b90e      	cbnz	r6, 8008fa4 <_printf_i+0x118>
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	d04d      	beq.n	8009040 <_printf_i+0x1b4>
 8008fa4:	4615      	mov	r5, r2
 8008fa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008faa:	fb03 6711 	mls	r7, r3, r1, r6
 8008fae:	5dc7      	ldrb	r7, [r0, r7]
 8008fb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fb4:	4637      	mov	r7, r6
 8008fb6:	42bb      	cmp	r3, r7
 8008fb8:	460e      	mov	r6, r1
 8008fba:	d9f4      	bls.n	8008fa6 <_printf_i+0x11a>
 8008fbc:	2b08      	cmp	r3, #8
 8008fbe:	d10b      	bne.n	8008fd8 <_printf_i+0x14c>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	07de      	lsls	r6, r3, #31
 8008fc4:	d508      	bpl.n	8008fd8 <_printf_i+0x14c>
 8008fc6:	6923      	ldr	r3, [r4, #16]
 8008fc8:	6861      	ldr	r1, [r4, #4]
 8008fca:	4299      	cmp	r1, r3
 8008fcc:	bfde      	ittt	le
 8008fce:	2330      	movle	r3, #48	; 0x30
 8008fd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fd8:	1b52      	subs	r2, r2, r5
 8008fda:	6122      	str	r2, [r4, #16]
 8008fdc:	f8cd a000 	str.w	sl, [sp]
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	aa03      	add	r2, sp, #12
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	f7ff fee2 	bl	8008db0 <_printf_common>
 8008fec:	3001      	adds	r0, #1
 8008fee:	d14c      	bne.n	800908a <_printf_i+0x1fe>
 8008ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff4:	b004      	add	sp, #16
 8008ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffa:	4835      	ldr	r0, [pc, #212]	; (80090d0 <_printf_i+0x244>)
 8008ffc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009000:	6829      	ldr	r1, [r5, #0]
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	f851 6b04 	ldr.w	r6, [r1], #4
 8009008:	6029      	str	r1, [r5, #0]
 800900a:	061d      	lsls	r5, r3, #24
 800900c:	d514      	bpl.n	8009038 <_printf_i+0x1ac>
 800900e:	07df      	lsls	r7, r3, #31
 8009010:	bf44      	itt	mi
 8009012:	f043 0320 	orrmi.w	r3, r3, #32
 8009016:	6023      	strmi	r3, [r4, #0]
 8009018:	b91e      	cbnz	r6, 8009022 <_printf_i+0x196>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	f023 0320 	bic.w	r3, r3, #32
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	2310      	movs	r3, #16
 8009024:	e7b0      	b.n	8008f88 <_printf_i+0xfc>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	f043 0320 	orr.w	r3, r3, #32
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	2378      	movs	r3, #120	; 0x78
 8009030:	4828      	ldr	r0, [pc, #160]	; (80090d4 <_printf_i+0x248>)
 8009032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009036:	e7e3      	b.n	8009000 <_printf_i+0x174>
 8009038:	0659      	lsls	r1, r3, #25
 800903a:	bf48      	it	mi
 800903c:	b2b6      	uxthmi	r6, r6
 800903e:	e7e6      	b.n	800900e <_printf_i+0x182>
 8009040:	4615      	mov	r5, r2
 8009042:	e7bb      	b.n	8008fbc <_printf_i+0x130>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	6826      	ldr	r6, [r4, #0]
 8009048:	6961      	ldr	r1, [r4, #20]
 800904a:	1d18      	adds	r0, r3, #4
 800904c:	6028      	str	r0, [r5, #0]
 800904e:	0635      	lsls	r5, r6, #24
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	d501      	bpl.n	8009058 <_printf_i+0x1cc>
 8009054:	6019      	str	r1, [r3, #0]
 8009056:	e002      	b.n	800905e <_printf_i+0x1d2>
 8009058:	0670      	lsls	r0, r6, #25
 800905a:	d5fb      	bpl.n	8009054 <_printf_i+0x1c8>
 800905c:	8019      	strh	r1, [r3, #0]
 800905e:	2300      	movs	r3, #0
 8009060:	6123      	str	r3, [r4, #16]
 8009062:	4615      	mov	r5, r2
 8009064:	e7ba      	b.n	8008fdc <_printf_i+0x150>
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	1d1a      	adds	r2, r3, #4
 800906a:	602a      	str	r2, [r5, #0]
 800906c:	681d      	ldr	r5, [r3, #0]
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	2100      	movs	r1, #0
 8009072:	4628      	mov	r0, r5
 8009074:	f7f7 f8c4 	bl	8000200 <memchr>
 8009078:	b108      	cbz	r0, 800907e <_printf_i+0x1f2>
 800907a:	1b40      	subs	r0, r0, r5
 800907c:	6060      	str	r0, [r4, #4]
 800907e:	6863      	ldr	r3, [r4, #4]
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	2300      	movs	r3, #0
 8009084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009088:	e7a8      	b.n	8008fdc <_printf_i+0x150>
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	462a      	mov	r2, r5
 800908e:	4649      	mov	r1, r9
 8009090:	4640      	mov	r0, r8
 8009092:	47d0      	blx	sl
 8009094:	3001      	adds	r0, #1
 8009096:	d0ab      	beq.n	8008ff0 <_printf_i+0x164>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	079b      	lsls	r3, r3, #30
 800909c:	d413      	bmi.n	80090c6 <_printf_i+0x23a>
 800909e:	68e0      	ldr	r0, [r4, #12]
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	4298      	cmp	r0, r3
 80090a4:	bfb8      	it	lt
 80090a6:	4618      	movlt	r0, r3
 80090a8:	e7a4      	b.n	8008ff4 <_printf_i+0x168>
 80090aa:	2301      	movs	r3, #1
 80090ac:	4632      	mov	r2, r6
 80090ae:	4649      	mov	r1, r9
 80090b0:	4640      	mov	r0, r8
 80090b2:	47d0      	blx	sl
 80090b4:	3001      	adds	r0, #1
 80090b6:	d09b      	beq.n	8008ff0 <_printf_i+0x164>
 80090b8:	3501      	adds	r5, #1
 80090ba:	68e3      	ldr	r3, [r4, #12]
 80090bc:	9903      	ldr	r1, [sp, #12]
 80090be:	1a5b      	subs	r3, r3, r1
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	dcf2      	bgt.n	80090aa <_printf_i+0x21e>
 80090c4:	e7eb      	b.n	800909e <_printf_i+0x212>
 80090c6:	2500      	movs	r5, #0
 80090c8:	f104 0619 	add.w	r6, r4, #25
 80090cc:	e7f5      	b.n	80090ba <_printf_i+0x22e>
 80090ce:	bf00      	nop
 80090d0:	08009795 	.word	0x08009795
 80090d4:	080097a6 	.word	0x080097a6

080090d8 <memmove>:
 80090d8:	4288      	cmp	r0, r1
 80090da:	b510      	push	{r4, lr}
 80090dc:	eb01 0402 	add.w	r4, r1, r2
 80090e0:	d902      	bls.n	80090e8 <memmove+0x10>
 80090e2:	4284      	cmp	r4, r0
 80090e4:	4623      	mov	r3, r4
 80090e6:	d807      	bhi.n	80090f8 <memmove+0x20>
 80090e8:	1e43      	subs	r3, r0, #1
 80090ea:	42a1      	cmp	r1, r4
 80090ec:	d008      	beq.n	8009100 <memmove+0x28>
 80090ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090f6:	e7f8      	b.n	80090ea <memmove+0x12>
 80090f8:	4402      	add	r2, r0
 80090fa:	4601      	mov	r1, r0
 80090fc:	428a      	cmp	r2, r1
 80090fe:	d100      	bne.n	8009102 <memmove+0x2a>
 8009100:	bd10      	pop	{r4, pc}
 8009102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800910a:	e7f7      	b.n	80090fc <memmove+0x24>

0800910c <_free_r>:
 800910c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800910e:	2900      	cmp	r1, #0
 8009110:	d044      	beq.n	800919c <_free_r+0x90>
 8009112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009116:	9001      	str	r0, [sp, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	f1a1 0404 	sub.w	r4, r1, #4
 800911e:	bfb8      	it	lt
 8009120:	18e4      	addlt	r4, r4, r3
 8009122:	f000 f913 	bl	800934c <__malloc_lock>
 8009126:	4a1e      	ldr	r2, [pc, #120]	; (80091a0 <_free_r+0x94>)
 8009128:	9801      	ldr	r0, [sp, #4]
 800912a:	6813      	ldr	r3, [r2, #0]
 800912c:	b933      	cbnz	r3, 800913c <_free_r+0x30>
 800912e:	6063      	str	r3, [r4, #4]
 8009130:	6014      	str	r4, [r2, #0]
 8009132:	b003      	add	sp, #12
 8009134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009138:	f000 b90e 	b.w	8009358 <__malloc_unlock>
 800913c:	42a3      	cmp	r3, r4
 800913e:	d908      	bls.n	8009152 <_free_r+0x46>
 8009140:	6825      	ldr	r5, [r4, #0]
 8009142:	1961      	adds	r1, r4, r5
 8009144:	428b      	cmp	r3, r1
 8009146:	bf01      	itttt	eq
 8009148:	6819      	ldreq	r1, [r3, #0]
 800914a:	685b      	ldreq	r3, [r3, #4]
 800914c:	1949      	addeq	r1, r1, r5
 800914e:	6021      	streq	r1, [r4, #0]
 8009150:	e7ed      	b.n	800912e <_free_r+0x22>
 8009152:	461a      	mov	r2, r3
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	b10b      	cbz	r3, 800915c <_free_r+0x50>
 8009158:	42a3      	cmp	r3, r4
 800915a:	d9fa      	bls.n	8009152 <_free_r+0x46>
 800915c:	6811      	ldr	r1, [r2, #0]
 800915e:	1855      	adds	r5, r2, r1
 8009160:	42a5      	cmp	r5, r4
 8009162:	d10b      	bne.n	800917c <_free_r+0x70>
 8009164:	6824      	ldr	r4, [r4, #0]
 8009166:	4421      	add	r1, r4
 8009168:	1854      	adds	r4, r2, r1
 800916a:	42a3      	cmp	r3, r4
 800916c:	6011      	str	r1, [r2, #0]
 800916e:	d1e0      	bne.n	8009132 <_free_r+0x26>
 8009170:	681c      	ldr	r4, [r3, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	6053      	str	r3, [r2, #4]
 8009176:	4421      	add	r1, r4
 8009178:	6011      	str	r1, [r2, #0]
 800917a:	e7da      	b.n	8009132 <_free_r+0x26>
 800917c:	d902      	bls.n	8009184 <_free_r+0x78>
 800917e:	230c      	movs	r3, #12
 8009180:	6003      	str	r3, [r0, #0]
 8009182:	e7d6      	b.n	8009132 <_free_r+0x26>
 8009184:	6825      	ldr	r5, [r4, #0]
 8009186:	1961      	adds	r1, r4, r5
 8009188:	428b      	cmp	r3, r1
 800918a:	bf04      	itt	eq
 800918c:	6819      	ldreq	r1, [r3, #0]
 800918e:	685b      	ldreq	r3, [r3, #4]
 8009190:	6063      	str	r3, [r4, #4]
 8009192:	bf04      	itt	eq
 8009194:	1949      	addeq	r1, r1, r5
 8009196:	6021      	streq	r1, [r4, #0]
 8009198:	6054      	str	r4, [r2, #4]
 800919a:	e7ca      	b.n	8009132 <_free_r+0x26>
 800919c:	b003      	add	sp, #12
 800919e:	bd30      	pop	{r4, r5, pc}
 80091a0:	20012fdc 	.word	0x20012fdc

080091a4 <sbrk_aligned>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4e0e      	ldr	r6, [pc, #56]	; (80091e0 <sbrk_aligned+0x3c>)
 80091a8:	460c      	mov	r4, r1
 80091aa:	6831      	ldr	r1, [r6, #0]
 80091ac:	4605      	mov	r5, r0
 80091ae:	b911      	cbnz	r1, 80091b6 <sbrk_aligned+0x12>
 80091b0:	f000 f8bc 	bl	800932c <_sbrk_r>
 80091b4:	6030      	str	r0, [r6, #0]
 80091b6:	4621      	mov	r1, r4
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 f8b7 	bl	800932c <_sbrk_r>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d00a      	beq.n	80091d8 <sbrk_aligned+0x34>
 80091c2:	1cc4      	adds	r4, r0, #3
 80091c4:	f024 0403 	bic.w	r4, r4, #3
 80091c8:	42a0      	cmp	r0, r4
 80091ca:	d007      	beq.n	80091dc <sbrk_aligned+0x38>
 80091cc:	1a21      	subs	r1, r4, r0
 80091ce:	4628      	mov	r0, r5
 80091d0:	f000 f8ac 	bl	800932c <_sbrk_r>
 80091d4:	3001      	adds	r0, #1
 80091d6:	d101      	bne.n	80091dc <sbrk_aligned+0x38>
 80091d8:	f04f 34ff 	mov.w	r4, #4294967295
 80091dc:	4620      	mov	r0, r4
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	20012fe0 	.word	0x20012fe0

080091e4 <_malloc_r>:
 80091e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e8:	1ccd      	adds	r5, r1, #3
 80091ea:	f025 0503 	bic.w	r5, r5, #3
 80091ee:	3508      	adds	r5, #8
 80091f0:	2d0c      	cmp	r5, #12
 80091f2:	bf38      	it	cc
 80091f4:	250c      	movcc	r5, #12
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	4607      	mov	r7, r0
 80091fa:	db01      	blt.n	8009200 <_malloc_r+0x1c>
 80091fc:	42a9      	cmp	r1, r5
 80091fe:	d905      	bls.n	800920c <_malloc_r+0x28>
 8009200:	230c      	movs	r3, #12
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	2600      	movs	r6, #0
 8009206:	4630      	mov	r0, r6
 8009208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800920c:	4e2e      	ldr	r6, [pc, #184]	; (80092c8 <_malloc_r+0xe4>)
 800920e:	f000 f89d 	bl	800934c <__malloc_lock>
 8009212:	6833      	ldr	r3, [r6, #0]
 8009214:	461c      	mov	r4, r3
 8009216:	bb34      	cbnz	r4, 8009266 <_malloc_r+0x82>
 8009218:	4629      	mov	r1, r5
 800921a:	4638      	mov	r0, r7
 800921c:	f7ff ffc2 	bl	80091a4 <sbrk_aligned>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	4604      	mov	r4, r0
 8009224:	d14d      	bne.n	80092c2 <_malloc_r+0xde>
 8009226:	6834      	ldr	r4, [r6, #0]
 8009228:	4626      	mov	r6, r4
 800922a:	2e00      	cmp	r6, #0
 800922c:	d140      	bne.n	80092b0 <_malloc_r+0xcc>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	4631      	mov	r1, r6
 8009232:	4638      	mov	r0, r7
 8009234:	eb04 0803 	add.w	r8, r4, r3
 8009238:	f000 f878 	bl	800932c <_sbrk_r>
 800923c:	4580      	cmp	r8, r0
 800923e:	d13a      	bne.n	80092b6 <_malloc_r+0xd2>
 8009240:	6821      	ldr	r1, [r4, #0]
 8009242:	3503      	adds	r5, #3
 8009244:	1a6d      	subs	r5, r5, r1
 8009246:	f025 0503 	bic.w	r5, r5, #3
 800924a:	3508      	adds	r5, #8
 800924c:	2d0c      	cmp	r5, #12
 800924e:	bf38      	it	cc
 8009250:	250c      	movcc	r5, #12
 8009252:	4629      	mov	r1, r5
 8009254:	4638      	mov	r0, r7
 8009256:	f7ff ffa5 	bl	80091a4 <sbrk_aligned>
 800925a:	3001      	adds	r0, #1
 800925c:	d02b      	beq.n	80092b6 <_malloc_r+0xd2>
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	442b      	add	r3, r5
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	e00e      	b.n	8009284 <_malloc_r+0xa0>
 8009266:	6822      	ldr	r2, [r4, #0]
 8009268:	1b52      	subs	r2, r2, r5
 800926a:	d41e      	bmi.n	80092aa <_malloc_r+0xc6>
 800926c:	2a0b      	cmp	r2, #11
 800926e:	d916      	bls.n	800929e <_malloc_r+0xba>
 8009270:	1961      	adds	r1, r4, r5
 8009272:	42a3      	cmp	r3, r4
 8009274:	6025      	str	r5, [r4, #0]
 8009276:	bf18      	it	ne
 8009278:	6059      	strne	r1, [r3, #4]
 800927a:	6863      	ldr	r3, [r4, #4]
 800927c:	bf08      	it	eq
 800927e:	6031      	streq	r1, [r6, #0]
 8009280:	5162      	str	r2, [r4, r5]
 8009282:	604b      	str	r3, [r1, #4]
 8009284:	4638      	mov	r0, r7
 8009286:	f104 060b 	add.w	r6, r4, #11
 800928a:	f000 f865 	bl	8009358 <__malloc_unlock>
 800928e:	f026 0607 	bic.w	r6, r6, #7
 8009292:	1d23      	adds	r3, r4, #4
 8009294:	1af2      	subs	r2, r6, r3
 8009296:	d0b6      	beq.n	8009206 <_malloc_r+0x22>
 8009298:	1b9b      	subs	r3, r3, r6
 800929a:	50a3      	str	r3, [r4, r2]
 800929c:	e7b3      	b.n	8009206 <_malloc_r+0x22>
 800929e:	6862      	ldr	r2, [r4, #4]
 80092a0:	42a3      	cmp	r3, r4
 80092a2:	bf0c      	ite	eq
 80092a4:	6032      	streq	r2, [r6, #0]
 80092a6:	605a      	strne	r2, [r3, #4]
 80092a8:	e7ec      	b.n	8009284 <_malloc_r+0xa0>
 80092aa:	4623      	mov	r3, r4
 80092ac:	6864      	ldr	r4, [r4, #4]
 80092ae:	e7b2      	b.n	8009216 <_malloc_r+0x32>
 80092b0:	4634      	mov	r4, r6
 80092b2:	6876      	ldr	r6, [r6, #4]
 80092b4:	e7b9      	b.n	800922a <_malloc_r+0x46>
 80092b6:	230c      	movs	r3, #12
 80092b8:	603b      	str	r3, [r7, #0]
 80092ba:	4638      	mov	r0, r7
 80092bc:	f000 f84c 	bl	8009358 <__malloc_unlock>
 80092c0:	e7a1      	b.n	8009206 <_malloc_r+0x22>
 80092c2:	6025      	str	r5, [r4, #0]
 80092c4:	e7de      	b.n	8009284 <_malloc_r+0xa0>
 80092c6:	bf00      	nop
 80092c8:	20012fdc 	.word	0x20012fdc

080092cc <_realloc_r>:
 80092cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d0:	4680      	mov	r8, r0
 80092d2:	4614      	mov	r4, r2
 80092d4:	460e      	mov	r6, r1
 80092d6:	b921      	cbnz	r1, 80092e2 <_realloc_r+0x16>
 80092d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092dc:	4611      	mov	r1, r2
 80092de:	f7ff bf81 	b.w	80091e4 <_malloc_r>
 80092e2:	b92a      	cbnz	r2, 80092f0 <_realloc_r+0x24>
 80092e4:	f7ff ff12 	bl	800910c <_free_r>
 80092e8:	4625      	mov	r5, r4
 80092ea:	4628      	mov	r0, r5
 80092ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f0:	f000 f838 	bl	8009364 <_malloc_usable_size_r>
 80092f4:	4284      	cmp	r4, r0
 80092f6:	4607      	mov	r7, r0
 80092f8:	d802      	bhi.n	8009300 <_realloc_r+0x34>
 80092fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092fe:	d812      	bhi.n	8009326 <_realloc_r+0x5a>
 8009300:	4621      	mov	r1, r4
 8009302:	4640      	mov	r0, r8
 8009304:	f7ff ff6e 	bl	80091e4 <_malloc_r>
 8009308:	4605      	mov	r5, r0
 800930a:	2800      	cmp	r0, #0
 800930c:	d0ed      	beq.n	80092ea <_realloc_r+0x1e>
 800930e:	42bc      	cmp	r4, r7
 8009310:	4622      	mov	r2, r4
 8009312:	4631      	mov	r1, r6
 8009314:	bf28      	it	cs
 8009316:	463a      	movcs	r2, r7
 8009318:	f7ff fbb8 	bl	8008a8c <memcpy>
 800931c:	4631      	mov	r1, r6
 800931e:	4640      	mov	r0, r8
 8009320:	f7ff fef4 	bl	800910c <_free_r>
 8009324:	e7e1      	b.n	80092ea <_realloc_r+0x1e>
 8009326:	4635      	mov	r5, r6
 8009328:	e7df      	b.n	80092ea <_realloc_r+0x1e>
	...

0800932c <_sbrk_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4d06      	ldr	r5, [pc, #24]	; (8009348 <_sbrk_r+0x1c>)
 8009330:	2300      	movs	r3, #0
 8009332:	4604      	mov	r4, r0
 8009334:	4608      	mov	r0, r1
 8009336:	602b      	str	r3, [r5, #0]
 8009338:	f7f8 fbd8 	bl	8001aec <_sbrk>
 800933c:	1c43      	adds	r3, r0, #1
 800933e:	d102      	bne.n	8009346 <_sbrk_r+0x1a>
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	b103      	cbz	r3, 8009346 <_sbrk_r+0x1a>
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	bd38      	pop	{r3, r4, r5, pc}
 8009348:	20012fe4 	.word	0x20012fe4

0800934c <__malloc_lock>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__malloc_lock+0x8>)
 800934e:	f000 b811 	b.w	8009374 <__retarget_lock_acquire_recursive>
 8009352:	bf00      	nop
 8009354:	20012fe8 	.word	0x20012fe8

08009358 <__malloc_unlock>:
 8009358:	4801      	ldr	r0, [pc, #4]	; (8009360 <__malloc_unlock+0x8>)
 800935a:	f000 b80c 	b.w	8009376 <__retarget_lock_release_recursive>
 800935e:	bf00      	nop
 8009360:	20012fe8 	.word	0x20012fe8

08009364 <_malloc_usable_size_r>:
 8009364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009368:	1f18      	subs	r0, r3, #4
 800936a:	2b00      	cmp	r3, #0
 800936c:	bfbc      	itt	lt
 800936e:	580b      	ldrlt	r3, [r1, r0]
 8009370:	18c0      	addlt	r0, r0, r3
 8009372:	4770      	bx	lr

08009374 <__retarget_lock_acquire_recursive>:
 8009374:	4770      	bx	lr

08009376 <__retarget_lock_release_recursive>:
 8009376:	4770      	bx	lr

08009378 <_init>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr

08009384 <_fini>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr
